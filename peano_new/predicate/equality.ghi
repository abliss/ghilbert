param (PROP prop.ghi () "")
param (PREDICATE_MIN predicate_min.ghi (PROP) "")
param (PREDICATE predicate.ghi (PROP PREDICATE_MIN) "")
param (EQUALITY_MIN equality_min.ghi (PROP PREDICATE_MIN PREDICATE) "")

tvar (wff ph ps ch)
tvar (nat A B C D)
var (nat x y z)

# Exists-unique is handy for iota def, but could be expanded there
term (wff (E! x ph))
stmt (df-eu ((ph y)) ()
  (<-> (E! x ph) (E. y (A. x (<-> ph (= x y))))))
	
stmt (eubid ((ph x)) ((-> ph (<-> ps ch))) (-> ph (<-> (E! x ps) (E! x ch))))

## <title> Quantifier variable exchange </title>
stmt (eualpha ((ph y) (ps x)) ((-> (= x y) (<-> ph ps))) (<-> (E! x ph) (E! y ps)))

stmt (tyeu ((A x)) () (E! x (= x A)))

## <title> A number exists that proves the antecedent </title>
## <table>
##   (-> <r> (= x A) [ ph)
##                   [ ph
## </table>
stmt (vtocle ((A x) (ph x)) ((-> (= x A) ph)) ph)

term (wff ([/] A x ph) (x A))
stmt (df-subst ((A z) (ph z)) ()
  (<-> ([/] A x ph) (E. z (/\ (= z A) (E. x (/\ (= x z) ph))))))

term (wff (rwff x ph))
stmt (df-rwff () ()
  (<-> (rwff x ph) (A. x (<-> ph ([/] x x ph)))))

## <title> Symmetric Property </title>
## <table>
##   (= <r> A <g> B)
##   (= <g> B <r> A)
## </table>
stmt (eqcomi () ((= A B)) (= B A))

## <title> Symmetric Property </title>
## <table>
##   (-> ph (= <r> A <g> B))
##   (-> ph (= <g> B <r> A))
## </table>
stmt (eqcomd ()
  ((-> ph (= A B)))
   (-> ph (= B A)))

## <title> Equivalence over Equality </title>
stmt (eqeq1 () () (-> (= A B) (<-> (= A C) (= B C))))

## <title> Equivalence over Equality </title>
stmt (eqeq2 () () (-> (= A B) (<-> (= C A) (= C B))))

## <title> Equivalence over Equality </title>
## <table>
##   (=      A ]    ] [    B ] )
##   (<-> (= A ] C) ] [ (= B ] C))
## </table>
stmt (eqeq1i () ((= A B)) (<-> (= A C) (= B C)))

## <title> Equivalence over Equality </title>
## <table>
##   (=        [ A  ] [      [ B)
##   (<-> (= C [ A) ] [ (= C [ B))
## </table>
stmt (eqeq2i () ((= A B)) (<-> (= C A) (= C B)))

## <title> Equivalence over Equality </title>
## <table>
##   (-> ph (=      A ]    ] [    B ] ))
##   (-> ph (<-> (= A ] C) ] [ (= B ] C)))
## </table>
stmt(eqeq1d () ((-> ph (= A B))) (-> ph (<-> (= A C) (= B C))))

## <title> Equivalence over Equality </title>
## <table>
##   (-> ph (=        [ A  ] [      [ B))
##   (-> ph (<-> (= C [ A) ] [ (= C [ B)))
## </table>
stmt(eqeq2d () ((-> ph (= A B))) (-> ph (<-> (= C A) (= C B))))

stmt (eqeq12 () () (-> (/\ (= A B) (= C D)) (<-> (= A C) (= B D))))

## <title> Transitive Property </title>
stmt (eqeq12d ()
  ((-> ph (= A B))
   (-> ph (= C D)))
  (-> ph (<-> (= A C) (= B D))))

## <title> Equivalence over Equality </title>
stmt (eqeq12i ()
  ((= A B)
   (= C D))
  (<-> (= A C) (= B D)))

## <title> Transitive Property </title>
## <table>
##   (= A  [    B ] ] )
##         [ (= B ] [ C)
##   (= A  [      [ [ C)
## </table>
stmt (eqtri () ((= A B) (= B C)) (= A C))

## <title> Transitive Property </title>
## <table>
##   (= A [      [ [ B)
##   (= A [    C ] ]  )
##        [ (= C ] [B )
## </table>
stmt (eqtr2 () () (-> (/\ (= A B) (= A C)) (= B C)))

## <title> Transitive Property </title>
## <table>
##   (-> ph (= A  [    B ] ] ))
##   (-> ph       [ (= B ] [ C))
##   (-> ph (= A  [      [ [ C))
## </table>
stmt (eqtrd () ((-> ph (= A B)) (-> ph (= B C))) (-> ph (= A C)))

## <title> Transitive Property </title>
## <table>
##   (= A [ B    ] ]  )
##   (= A [      [ [ C)
##        [ (= B ] [ C)
## </table>
stmt (eqtr3 ()
  ((= A B)
   (= A C))
  (= B C))

## <title> Transitive Property </title>
## <table>
##   (= A    [   [ B)
##        (= [ C [ B )
##   (= A    [ C ]   )
## </table>
stmt (eqtr4 ()
  ((= A B)
   (= C B))
  (= A C))

## <title> Transitive Property </title>
## <table>
##   (= A [      [ [ B)
##   (= A [    C ] ]  )
##        [ (= C ] [ B )
## </table>
stmt (eqtr5 () ((= A B) (= A C)) (= C B))

## <title> Syllogism </title>
stmt (syl5eq ()
  ((-> ph (= A B))
   (= C A))
  (-> ph (= C B)))

## <title> Syllogism </title>
stmt (syl5eqr ()
  ((-> ph (= A B))
          (= A C))
   (-> ph (= C B)))

## <title> Syllogism </title>
## <table>
##   (-> ph (= A [    B ] ]  ))
##               [ (= B ] [ C)
##   (-> ph (= A [      [ [ C))
## </table>
stmt (syl6eq ()
  ((-> ph (= A B))
   (= B C))
  (-> ph (= A C)))

## <title> Syllogism </title>
stmt (syl6eqr ()
  ((-> ph (= A B))
   (= C B))
  (-> ph (= A C)))

## <title> Syllogism </title>
stmt (sylan9eq ()
  ((-> ph (= A B))
   (-> ps (= B C)))
  (-> (/\ ph ps) (= A C)))

## <title> Make Implicit Substitution Explicit </title>
## <summary>
##   A representation of explicit substitution, inferred from an implicit substitution hypothesis.
## </summary>
stmt (ceqsal ((A x) (ps x))
  ((-> (= x A) (<-> ph ps)))
  (<-> (A. x (-> (= x A) ph)) ps))

## <title> Make Implicit Substitution Explicit </title>
## <summary>
##   A representation of explicit substitution, inferred from an implicit substitution hypothesis.
## </summary>
stmt (ceqsex ((ps x) (A x))
  ((-> (= x A) (<-> ph ps)))
  (<-> (E. x (/\ (= x A) ph)) ps))

stmt (vtocl ((A x) (ps x)) ((-> (= x A) (<-> ph ps)) ph) ps)

## <title> Equality over substitution </title>
## <summary>
##   If A = B, then substituting A into an expression is the same as
##   substituting B.
## </summary>
stmt (dfsbcq () () (-> (= A B) (<-> ([/] A x ph) ([/] B x ph))))

## <title> Make an implicit substitution explicit </title>
stmt (sbcie ((A x) (ps x))
  ((-> (= x A) (<-> ph ps)))
  (<-> ([/] A x ph) ps))

## <title> Convert Arbitrary Substitution into Universal Quantifier </title>
stmt (cla4g ((A x) (ps x))
  ((-> (= x A) (<-> ph ps)))
  (-> (A. x ph) ps))

## <title> Quantifier variable exchange </title>
stmt (exalpha ((ph y) (ps x)) ((-> (= x y) (<-> ph ps))) (<-> (E. x ph) (E. y ps)))

## <title> Relatively Well-Formed Formula Infernece </title>
stmt (rwffi ((ps x) (ph y)) ((-> (= x y) (<-> ph ps))) (rwff x ph))

## <title> Symmetric Property </title>
stmt (eqcoms () ((-> (= A B) ph)) (-> (= B A) ph))

## <title> Add Substitutions to both sides </title>
stmt (sbcbid ((ph x)) ((-> ph (<-> ps ch))) (-> ph (<-> ([/] A x ps) ([/] A x ch))))

## <title> Existence when number is used in substitution </title>
stmt (sbcex ((A x) (ph x)) () (-> ([/] A y ph) (E. x ([/] x y ph))))

## <title> Substitute any number into a universal statement </title>
stmt (a4sbc () () (-> (A. x ph) ([/] A x ph)))

## <title> Negation Preserves Relatively Well-Formed-ness </title>
stmt (not-rwff () ((rwff x ph)) (rwff x (-. ph)))

## <title> Transitive Property </title>
stmt (3eqtr4g () ((-> ph (= A B)) (= C A) (= D B)) (-> ph (= C D)))

stmt (alpha ((ph y) (ps x)) ((-> (= x y) (<-> ph ps))) (<-> (A. x ph) (A. y ps)))

stmt (substex ((ph x y) (ps y) (ch x) (A y))
  ((-> (/\ ph (/\ (= y A) ps)) ch))
  (-> (/\ ph (E. x ps)) (E. y ch)))
