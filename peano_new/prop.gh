# Some theorems and definitions of propositional logic

import (PROP_MIN prop_min.ghi () "")

# This is to get the file to display on a local host:
# import (PROP_MIN /peano/prop_min.ghi () "")

tvar (wff ph ps ch th ta et ze si)

thm (dummylink () (1 ph 2 ps) ph
     1)
         
## <title> First Axiom Inference </title>
## <table>
##          [ ph
##   (-> ps [ ph)
## </table>
thm (a1i () (1 ph) (-> ps ph)
     1 ph ps ax-1 ax-mp)

## <title> Second Axiom Inference </title>
## <table>
##   (->     ph ] (-> [ ps ]         [ ch))
##   (-> (-> ph ]     [ ps ] ) (-> ph [ ch))
## </table>
thm (a2i () (1 (-> ph (-> ps ch))) (-> (-> ph ps) (-> ph ch))
     1 ph ps ch ax-2 ax-mp)

## <title> Syllogism </title>
## <table>
##   (-> ph [     ps ] ]    ] )
##          [ (-> ps ] [ ch ] )
##   (-> ph [        [ [ ch ] )
## </table>
thm (syl () (1 (-> ph ps) 2 (-> ps ch)) (-> ph ch)
     1 2 ph a1i a2i ax-mp)

## <title> Commute First and Second Antecedents </title>
## <table>
##   (-> <r> ph (-> <g> ps ch))
##   (-> <g> ps (-> <r> ph ch))
## </table>
thm (com12 () (1 (-> ph (-> ps ch))) (-> ps (-> ph ch))
     ps ph ax-1 1 a2i syl)

## <title> First Axiom Deduction </title>
## <table>
##          [ ph
##   (-> ps [ ph)
## </table>
thm (a1d () (1 (-> ph ps)) (-> ph (-> ch ps))
     1 ch a1i com12)

## <title> Second Axiom Deduction </title>
## <table>
##   (-> ph (->     ps ] (-> [ ch ]          [ th)))
##   (-> ph (-> (-> ps ]     [ ch ] ) (-> ps [ th)))
## </table>
thm (a2d () (1 (-> ph (-> ps (-> ch th)))) (-> ph (-> (-> ps ch) (-> ps th)))
     1 ps ch th ax-2 syl)

## <table>
##   (-> (-> ph [ ps ] ) [ ch)
##          (-> [ ps ]   [ ch)
## </table>
thm (himp1i () (1 (-> (-> ph ps) ch)) (-> ps ch)
     ps ph ax-1 1 syl)

## <title> Syllogism (Closed Form) </title>
thm (imim2 () () (-> (-> ph ps) (-> (-> ch ph) (-> ch ps)))
     ch ph ps ax-2 himp1i)

# a.k.a. sylt
## <title> Syllogism (Closed Form) </title>
thm (imim1 () () (-> (-> ph ps) (-> (-> ps ch) (-> ph ch)))
     ps ch ph imim2 com12)

## <title> Syllogism </title>
## <summary>
##   The theorem <a href="imim1">imim1</a> written as an inference.
## </summary>
thm (imim1i () (1 (-> ph ps)) (-> (-> ps ch) (-> ph ch))
     1 ph ps ch imim1 ax-mp)

## <title> Syllogism </title>
## <summary>
##   The theorem <a href="imim2">imim2</a> written as an inference.
## </summary>
## <table>
##   (->        [ ph ]          [ ps)
##   (-> (-> ch [ ph ] ) (-> ch [ ps))
## </table>
thm (imim2i () (1 (-> ph ps)) (-> (-> ch ph) (-> ch ps))
     1 ch a1i a2i)
	 
## <title> Inference joining two implications (Bridge) </title>
thm (imim12i () (1 (-> ph ps) 2 (-> ch th)) (-> (-> ps ch) (-> ph th))
     2 ps imim2i 1 th imim1i syl)

## <title> Inference adding three nested antecedents. </title>
thm (imim3i () (1 (-> ph (-> ps ch))) (-> (-> th ph) (-> (-> th ps) (-> th ch)))
     1 th imim2i a2d)

## <title> Inference chaining two syllogisms </title>
thm (3syl () (1 (-> ph ps) 2 (-> ps ch) 3 (-> ch th)) (-> ph th)
     1 2 3 syl syl)

## <title> A syllogism rule of inference </title>
## <summary>
##   The second premise is used to replace the second antecedent of the first premise.
## </summary>
thm (syl5 () (1 (-> ph (-> ps ch)) 2 (-> th ps)) (-> ph (-> th ch))
     2 1 com12 syl com12)

## <title> A syllogism rule of inference </title>
## <summary>
##   The second premise is used to replace the consequent of the first premise.
## </summary>
thm (syl6 () (1 (-> ph (-> ps ch)) 2 (-> ch th)) (-> ph (-> ps th))
     1 2 ps imim2i syl)

## <title> A syllogism rule of inference </title>
## <summary>
##   The second premise is used to replace the third antecedent of the first premise.
## </summary>
thm (syl7 () (1 (-> ph (-> ps (-> ch th))) 2 (-> ta ch))
      (-> ph (-> ps (-> ta th)))
     1 2 th imim1i syl6)

## <title> A syllogism rule of inference </title>
## <summary>
##   The second premise is used to replace the consequent of the first premise.
## </summary>
thm (syl8 () (1 (-> ph (-> ps (-> ch th))) 2 (-> th ta))
             (-> ph (-> ps (-> ch ta)))
     1 2 ch imim2i syl6)

## <title> Deduction adding nested antecedents </title>
thm (imim2d () (1 (-> ph (-> ps ch))) (-> ph (-> (-> th ps) (-> th ch)))
     1 th a1i com12 a2d)

## <title> Modus Ponens </title>
## <table>
##   (-> ph     [ ps ] ] )
##   (-> ph (-> [ ps ] [ ch))
##   (-> ph     [    [ [ ch)
## </table>
thm (mpd () (1 (-> ph ps) 2 (-> ph (-> ps ch))) (-> ph ch)
     1 2 a2i ax-mp)

## <title> Syllogism Deduction </title>
## <summary>
##   Notice that this has the same form as <a href="syl">syl</a> with ph added in front of each 
##   hypothesis and conclusion. When all theorems referenced in a proof are converted in this
##   way, we can replace ph with a hypothesis of the proof, allowing the hypothesis to be
##   eliminated with <a href="id">id</a> and become an antecedent.
## </summary>
thm (syld () (1 (-> ph (-> ps ch)) 2 (-> ph (-> ch th))) (-> ph (-> ps th))
     1 2 ps imim2d mpd)

## <title> Deduction adding nested consequents </title>
## <summary>
##   The theorem <a href="imim1">imim1</a> written as an deduction.
## </summary>
thm (imim1d () (1 (-> ph (-> ps ch))) (-> ph (-> (-> ch th) (-> ps th)))
     1 ps ch th imim1 syl)

## <title> Deduction combining antecedents and consequents </title>
thm (imim12d () (1 (-> ph (-> ps ch)) 2 (-> ph (-> th ta)))
        (-> ph (-> (-> ch th) (-> ps ta)))
     2 ch imim2d 1 ta imim1d syld)

# aka com12t

## <title> Commute First and Second Antecedents </title>
## <summary>
##   One line version of <a href="com12">com12</a>.
## </summary>
## <table>
##   (-> (-> <r> ph (-> <g> ps ch)) (-> <g> ps (-> <r> ph ch)))
## </table>
thm (pm2.04 () () (-> (-> ph (-> ps ch)) (-> ps (-> ph ch)))
     ph ps ch ax-2 ps ph ax-1 syl5)

thm (pm2.83 () () (-> (-> ph (-> ps ch)) (-> (-> ph (-> ch th)) 
                                             (-> ph (-> ps th))))
     ps ch th imim1 ph imim3i)

## <title> Commute Second and Third Antecedents </title>
## <table>
##   (-> ph (-> <r> ps (-> <g> ch th)))
##   (-> ph (-> <g>ch (-> <r> ps th)))
## </table>
thm (com23 () (1 (-> ph (-> ps (-> ch th)))) (-> ph (-> ch (-> ps th)))
     1 ps ch th pm2.04 syl)

## <title> Commute First and Third Antecedents </title>
thm (com13 () (1 (-> ph (-> ps (-> ch th)))) (-> ch (-> ps (-> ph th)))
     1 com23 com12 com23)

## <title> Commute Antecedents (Rotate Left) </title>
thm (com3l () (1 (-> ph (-> ps (-> ch th)))) (-> ps (-> ch (-> ph th)))
     1 com12 com23)
	
## <title> Commute Antecedents (Rotate Right) </title>
thm (com3r () (1 (-> ph (-> ps (-> ch th)))) (-> ch (-> ph (-> ps th)))
     1 com23 com12)

## <title> Commute Third and Fourth Antecedents </title>
thm (com34 () (1 (-> ph (-> ps (-> ch (-> th ta)))))
                 (-> ph (-> ps (-> th (-> ch ta))))
     1 ch th ta pm2.04 syl6)

## <title> Commute Second and Fourth Antecedents </title>
thm (com24 () (1 (-> ph (-> ps (-> ch (-> th ta)))))
                 (-> ph (-> th (-> ch (-> ps ta))))
    1 com23 com34 com23)

## <title> Commute First and Fourth Antecedents </title>
thm (com14 () (1 (-> ph (-> ps (-> ch (-> th ta)))))
                 (-> th (-> ps (-> ch (-> ph ta))))
    1 com3l com34 com3r)

## <title> Commute Antecedents (Rotate Left) </title>
thm (com4l () (1 (-> ph (-> ps (-> ch (-> th ta)))))
                 (-> ps (-> ch (-> th (-> ph ta))))
     1 com3l com34)

## <title> Commute Antecedents (Rotate Twice) </title>
thm (com4t () (1 (-> ph (-> ps (-> ch (-> th ta)))))
                 (-> ch (-> th (-> ph (-> ps ta))))
     1 com4l com4l)

## <title> Commute Antecedents (Rotate Right) </title>
thm (com4r () (1 (-> ph (-> ps (-> ch (-> th ta)))))
                 (-> th (-> ph (-> ps (-> ch ta))))
     1 com4l com4t)

## <title> Introducing an embedded antecedent </title>
thm (a1dd () (1 (-> ph (-> ps ch))) (-> ph (-> ps (-> th ch)))
     1 th a1i com3l)

## <title> Double Modus Ponens </title>
thm (mp2 () (1 ph 2 ps 3 (-> ph (-> ps ch))) ch
     2 1 3 ax-mp ax-mp)

## <title> Modus Ponens Inference </title>
thm (mpi () (1 ps 2 (-> ph (-> ps ch))) (-> ph ch)
     1 2 com12 ax-mp)

## <title> Modus Ponens Inference </title>
thm (mpii () (1 ch 2 (-> ph (-> ps (-> ch th)))) (-> ph (-> ps th))
     1 2 com3r ax-mp)
	
## <title> Modus Ponens Deduction </title>
thm (mpdd () (1 (-> ph (-> ps ch)) 2 (-> ph (-> ps (-> ch th))))
             (-> ph (-> ps th))
     1 2 a2d mpd)

## <title> Modus Ponens Deduction </title>
thm (mpid () (1 (-> ph ch) 2 (-> ph (-> ps (-> ch th)))) (-> ph (-> ps th))
     1 ps a1d 2 mpdd)

## <title> Modus Ponens Deduction </title>
thm (mpdi () (1 (-> ps ch) 2 (-> ph (-> ps (-> ch th)))) (-> ph (-> ps th))
     1 ph a1i 2 mpdd)

## <title> Modus Ponens & Commute Antecedents </title>
thm (mpcom () (1 (-> ps ph) 2 (-> ph (-> ps ch))) (-> ps ch)
     1 2 com12 mpd)

## <title> Syllogism deduction </title>
thm (syldd () (1 (-> ph (-> ps (-> ch th))) 2 (-> ph (-> ps (-> th ta))))
                 (-> ph (-> ps (-> ch ta)))
     2 1 ch th ta imim1 syl6 mpdd)

## <title> Syllogism & Commute Antecedents </title>
thm (sylcom () (1 (-> ph (-> ps ch)) 2 (-> ps (-> ch th))) (-> ph (-> ps th))
     1 2 ph a1i mpdd)

# Hmm, this is the kind of thing where it's easier to just use syl5 com12
# rather than introduce a new name syl5com ...  There should be a proof
# complexity metric that reflects that.
## <title> Syllogism & Commute Antecedents </title>
thm (syl5com () (1 (-> ph (-> ps ch)) 2 (-> th ps)) (-> th (-> ph ch))
     1 2 syl5 com12)

## <title> Syllogism & Commute Antecedents </title>
thm (syl6com () (1 (-> ph (-> ps ch)) 2 (-> ch th)) (-> ps (-> ph th))
     1 2 syl6 com12)

## <title> Syllogism </title>
## <summary>  Syllogism inference with common nested antecedent. </summary>
thm (syli () (1 (-> ps (-> ph ch)) 2 (-> ch (-> ph th))) (-> ps (-> ph th))
     1 com12 2 com12 syld com12)

## <title> Syllogism Deduction </title>
thm (syl5d () (1 (-> ph (-> ps (-> ch th))) 2 (-> ph (-> ta ch)))
         (-> ph (-> ps (-> ta th)))
     2 ps a1d 1 syldd)

## <title> Syllogism Deduction </title>
thm (syl6d () (1 (-> ph (-> ps (-> ch th))) 2 (-> ph (-> th ta)))
         (-> ph (-> ps (-> ch ta)))
     1 2 ps a1d syldd)

## <title> Syllogism Deduction </title>
thm (syl9 () (1 (-> ph (-> ps ch)) 2 (-> th (-> ch ta)))
      (-> ph (-> th (-> ps ta)))
     2 ph a1i 1 syl5d)

## <title> Syllogism Deduction </title>
thm (syl9r () (1 (-> ph (-> ps ch)) 2 (-> th (-> ch ta)))
          (-> th (-> ph (-> ps ta)))
     1 2 syl9 com12)

## <title> Identity </title>
## <table>
##   (-> <g> ph <g> ph)
## </table>
## <summary>
##   See <a href="id1">id1</a> for an alternative proof directly from the axioms.
## </summary>
thm (id () () (-> ph ph)
     ph ps ax-1 ph (-> ps ph) ax-1 mpd)

## <title> Identity </title>
## <summary>
##   This version is proved directly from the axioms for demonstration purposes.
##   This proof is a popular example in the literature. For an alternative proof
##   see <a href="id">id</a>.
## </summary>
## <table>
##   (-> <g> ph <g> ph)
## </table>
thm (id1 () () (-> ph ph)
     ph ps ax-1 ph (-> ps ph) ax-1 ph (-> ps ph) ph ax-2 ax-mp ax-mp)

## <title> Identity Deduction </title>
## <summary>
##   <a href="id">Identity</a> written as an deduction.
## </summary>
thm (idd () () (-> ph (-> ps ps)) ps id ph a1i)

## <title> Modus Ponens </title>
## <summary>
##   This theorem can be thought of as a closed form of modus ponens.
## </summary>
thm (pm2.27 () () (-> ph (-> (-> ph ps) ps))
     (-> ph ps) id com12)

## <table>
##   (-> (-> ph ph) [ ps)
##                  [ ps
## </table>
thm (hid () (1 (-> (-> ph ph) ps)) ps
     ph id 1 ax-mp)

## <title> Absorb redundant antecedent </title>
## <summary>
##   Absorption of redundant antecedent.  Also called the "Contraction" or
##   "Hilbert" axiom.
## </summary>
thm (pm2.43 () () (-> (-> ph (-> ph ps)) (-> ph ps))
     ph ph ps ax-2 com12 hid)

# a.k.a. impsimpi
## <title> Absorb redundant antecedent </title>
## <table>
##   (-> <r> ph [ (-> <r> ph ps))
##              [ (-> <r> ph ps)
## </table>
thm (pm2.43i () (1 (-> ph (-> ph ps))) (-> ph ps)
     1 a2i hid)

## <title> Absorb redundant antecedent </title>
## <table>
##   (-> ph [ (-> <r> ps [ (-> <r> ps ch)))
##   (-> ph [            [ (-> <r> ps ch))
## </table>
thm (pm2.43d () (1 (-> ph (-> ps (-> ps ch)))) (-> ph (-> ps ch))
     1 ps ch pm2.43 syl)

## <title> Absorb redundant antecedent </title>
thm (pm2.43a () (1 (-> ps (-> ph (-> ps ch)))) (-> ps (-> ph ch))
     1 com23 pm2.43i)

## <title> Absorb redundant antecedent </title>
thm (pm2.43b () (1 (-> ps (-> ph (-> ps ch)))) (-> ph (-> ps ch))
     1 pm2.43a com12)

## <title> Syllogism & Contraction </title>
thm (sylc () (1 (-> ph (-> ps ch)) 2 (-> th ph) 3 (-> th ps)) (-> th ch)
     3 2 1 syl mpd)

## <table>
##   (-> (-> (-> <r> ph <g> ps) <b> ch) (-> <g> ps <b> ch))
## </table>
thm (himp1 () () (-> (-> (-> ph ps) ch) (-> ps ch))
     ps ph ax-1 ch imim1i)

## <title> Converse of ax-2 </title>
thm (pm2.86 () () (-> (-> (-> ph ps) (-> ph ch)) (-> ph (-> ps ch)))
     ph ps (-> ph ch) himp1 com23)

## <title> Converse of ax-2 </title>
## <summary>
##   <a href="pm2.86">pm2.86</a> written as an inference.
## </summary>
thm (pm2.86i () (1 (-> (-> ph ps) (-> ph ch))) (-> ph (-> ps ch))
     1 himp1i com12)

## <title> Converse of ax-2 </title>
## <summary>
##   <a href="pm2.86">pm2.86</a> written as an deduction.
## </summary>
thm (pm2.86d () (1 (-> ph (-> (-> ps ch) (-> ps th))))
     (-> ph (-> ps (-> ch th)))
     1 ps ch th pm2.86 syl)

## <title> Lukasiewicz's Linearity Axiom </title>
## <summary>
##     The Linearity Axiom of the infinite-valued sentential logic (L-infinity)
##     of <a href="http://en.wikipedia.org/wiki/Jan_%C5%81ukasiewicz">Lukasiewicz</a>.
## </summary>
thm (loolin () () (-> (-> (-> ph ps) (-> ps ph)) (-> ps ph))
     ph ps (-> ps ph) himp1 pm2.43d)

## <title> Lukasiewicz's Linearity Axiom </title>
## <summary>
##   An alternate for the Linearity Axiom of the infinite-valued sentential
##   logic (L-infinity) of Lukasiewicz, due to Barbara Wozniakowska.
## </summary>
thm (loowoz () () (-> (-> (-> ph ps) (-> ph ch)) (-> (-> ps ph) (-> ps ch)))
     ph ps ch pm2.86 com23 a2d)

# Yeah, negation!

## <title> Third Axiom Inference </title>
thm (a3i () (1 (-> (-. ph) (-. ps))) (-> ps ph)
     1 ph ps ax-3 ax-mp)

## <title> Third Axiom Inference </title>
## <summary>
##   Same as <a href="a3i">a3i</a> just a different name.
## </summary>
thm (con4i () (1 (-> (-. ph) (-. ps))) (-> ps ph)
     1 a3i)

# a.k.a. a3d
## <title> Third Axiom Deduction </title>
thm (con4d () (1 (-> ph (-> (-. ps) (-. ch)))) (-> ph (-> ch ps))
     1 ps ch ax-3 syl)

## <title> Third Axiom Deduction </title>
## <summary>
##   Same as <a href="con4d">con4d</a> just a different name.
## </summary>
thm (a3d () (1 (-> ph (-> (-. ps) (-. ch)))) (-> ph (-> ch ps))
     1 con4d)

# a.k.a. a1n
## <title> Contradiction Implies Anything </title>
## <summary>
##   From a wff and its negation, anything is true. Also called the
##   <a href="http://en.wikipedia.org/wiki/Duns_Scotus">Duns Scotus</a> law.
## </summary>
thm (pm2.21 () () (-> (-. ph) (-> ph ps))
     ps ph ax-3 himp1i)

## <title> Contradiction Implies Anything </title>
## <summary>
##   The theorem <a href="pm2.21">pm2.21</a> written as an inference.
## </summary>
thm (pm2.21i () (1 (-. ph)) (-> ph ps)
     1 (-. ps) a1i a3i)

## <title> Contradiction Implies Anything </title>
## <summary>
##   The theorem <a href="pm2.21">pm2.21</a> written as a deduction.
## </summary>
thm (pm2.21d () (1 (-> ph (-. ps))) (-> ph (-> ps ch))
     1 ps ch pm2.21 syl)

## <title> Contradiction Implies Anything </title>
thm (pm2.24 () () (-> ph (-> (-. ph) ps))
     ph ps pm2.21 com12)

## <title> Contradiction Implies Anything </title>
## <summary>
##   The theorem <a href="pm2.24">pm2.24</a> written as an inference.
## </summary>
thm (pm2.24i () (1 ph) (-> (-. ph) ps)
     1 ph ps pm2.24 ax-mp)

## <title> Contradiction Implies Anything </title>
## <summary>
##   The theorem <a href="pm2.24">pm2.24</a> written as a deduction.
## </summary>
## <title> Contradiction Implies Anything </title>
thm (pm2.24d () (1 (-> ph ps)) (-> ph (-> (-. ps) ch))
     1 ps ch pm2.24 syl)

## <title> Contradiction Implies Anything </title>
## <summary>
##   The theorem <a href="pm2.24">pm2.24</a> written as an inference.
## </summary>
thm (pm2.24ii () (1 ph 2 (-. ph)) ps
     1 2 ps pm2.21i ax-mp)

thm (himp2i () (1 (-> (-> ph ps) ch)) (-> (-. ph) ch)
     ph ps pm2.21 1 syl)

thm (himp2 () () (-> (-> (-> ph ps) ch) (-> (-. ph) ch))
     ph ps pm2.21 ch imim1i)

thm (a3dup () () (-> (-> (-. (-. ph)) (-. (-. ps))) (-> ph ps))
     (-. ph) (-. ps) ax-3 ps ph ax-3 syl)

thm (dn () () (-> (-. (-. ph)) ph)
     (-> ps ps) ph a3dup himp1i com12 hid)

thm (dnr () () (-> ph (-. (-. ph)))
     (-. ph) dn a3i)

thm (dni () (1 (-. (-. ph))) ph
     1 ph dn ax-mp)

thm (dnri () (1 ph) (-. (-. ph))
     1 ph dnr ax-mp)

thm (dnd () (1 (-> ph (-. (-. ps)))) (-> ph ps)
     1 ps dn syl)

thm (dnrd () (1 (-> ph ps)) (-> ph (-. (-. ps)))
     1 ps dnr syl)

## <title> Contraposition </title>
thm (con1 () () (-> (-> (-. ph) ps) (-> (-. ps) ph))
     ps dnr (-. ph) imim2i ph (-. ps) ax-3 syl)

## <title> Contraposition </title>
thm (con2 () () (-> (-> ph (-. ps)) (-> ps (-. ph)))
     ph dn (-. ps) imim1i (-. ph) ps ax-3 syl)

## <title> Contraposition </title>
thm (con3 () () (-> (-> ph ps) (-> (-. ps) (-. ph)))
     ph dn ps imim1i (-. ph) ps con1 syl)

## <title> Contraposition </title>
thm (con1i () (1 (-> (-. ph) ps)) (-> (-. ps) ph)
     1 ph ps con1 ax-mp)

## <title> Contraposition </title>
## <table>
##   (-> <r> ph (-. <g> ps))
##   (-> <g> ps (-. <r> ph))
## </table>
thm (con2i () (1 (-> ph (-. ps))) (-> ps (-. ph))
     1 ph ps con2 ax-mp)

## <title> Contraposition </title>
## <table>
##   (-> <r>     ph  <g>     ps )
##   (-> <g> (-. ps) <r> (-. ph))
## </table>
thm (con3i () (1 (-> ph ps)) (-> (-. ps) (-. ph))
     1 ph ps con3 ax-mp)

# a.k.a. con1d
## <title> Contraposition </title>
thm (con1d () (1 (-> ph (-> (-. ps) ch))) (-> ph (-> (-. ch) ps))
     1 ps ch con1 syl)

## <title> Contraposition </title>
thm (con2d () (1 (-> ph (-> ps (-. ch)))) (-> ph (-> ch (-. ps)))
     1 ps ch con2 syl)

## <title> Contraposition </title>
thm (con3d () (1 (-> ph (-> ps ch))) (-> ph (-> (-. ch) (-. ps)))
     1 ps ch con3 syl)

thm (nimp1 () () (-> (-. (-> ph ps)) ph)
     ph ps pm2.21 con1i)

thm (nimp2 () () (-> (-. (-> ph ps)) (-. ps))
     ps ph ax-1 con3i)

# aka mth8
thm (nimp () () (-> ph (-> (-. ps) (-. (-> ph ps))))
     ph ps pm2.27 con3d)

# a.k.a. npipip
## <title> Proof by contradiction </title>
## <summary>
##   Also called the Law of <a href="http://en.wikipedia.org/wiki/Christopher_Clavius">Clavius</a>.
##   Metamath seems to have a fairly short but tricky proof of pm2.18 that
##   doesn't detour through dn, nimp, con1, et. al.; but we need those
##   anyway and pm2.18 is proven more straightforwardly once we have nimp.
## </summary>
thm (pm2.18 () () (-> (-> (-. ph) ph) ph)
     (-. ph) ph nimp pm2.43i a3i)

## <title> Proof by contradiction </title>
thm (pm2.18_mm () () (-> (-> (-. ph) ph) ph)
     ph (-. (-> (-. ph) ph)) pm2.21 a2i a3d pm2.43i)

thm (nimp1i () (1 (-. (-> ph ps))) ph
     1 ph ps nimp1 ax-mp)

thm (nimp2i () (1 (-. (-> ph ps))) (-. ps)
     1 ph ps nimp2 ax-mp)

thm (nimpi () (1 ph 2 (-. ps)) (-. (-> ph ps))
     2 1 ph ps nimp ax-mp ax-mp)

thm (nimpd () (1 (-> ph ps) 2 (-> ph (-. ch))) (-> ph (-. (-> ps ch)))
     2 1 ps ch nimp syl mpd)

## <title> Simplification </title>
## <summary>
##   This is the same as <a href="pm3.26">pm3.26</a>, but uses the primitive
##   connectives → and ¬ instead of conjunction. This is exactly the same as
##   <a href="pm3.26im">pm3.26im</a>
## </summary>
thm (preand1 () () (-> (-. (-> ph (-. ps))) ph)
     ph (-. ps) nimp1)
	 
## <title> Simplification </title>
## <summary>
##   This is the same as <a href="pm3.27">pm3.27</a>, but uses the primitive
##   connectives → and ¬ instead of conjunction. This is exactly the same as
##   <a href="pm3.27im">pm3.27im</a>
## </summary>
thm (preand2 () () (-> (-. (-> ph (-. ps))) ps)
     ph (-. ps) nimp2 ps dn syl)

## <title> Join antecedents </title>
## <summary>
##   This is the same as <a href="pm3.2im">pm3.2im</a>, but uses the primitive
##   connectives → and ¬ instead of conjunction. This is exactly the same as
##   <a href="pm3.2im">pm3.2im</a>
## </summary>
thm (preand () () (-> ph (-> ps (-. (-> ph (-. ps)))))
     ph (-. ps) nimp ps dnr syl5)

## <title> Simplification </title>
thm (preand1i () (1 (-. (-> ph (-. ps)))) ph
     1 ph ps preand1 ax-mp)

## <title> Simplification </title>
thm (preand2i () (1 (-. (-> ph (-. ps)))) ps
     1 ph ps preand2 ax-mp)

## <title> Join premises </title>
thm (preandi () (1 ph 2 ps) (-. (-> ph (-. ps)))
     2 1 ph ps preand ax-mp ax-mp)

## <title> Join the consequents of two premises </title>
thm (jc () (1 (-> ph ps) 2 (-> ph ch)) (-> ph (-. (-> ps (-. ch))))
     2 1 ps ch preand syl mpd)


## <title> Definition of AND </title>
## <summary>
##   Define conjunction, logical AND.
##   This theorem writes the definition of AND without using the biconditional. The
##   theorem <a href="df-an">df-an</a> rewrites this definition in a more familiar
##   form.
## </summary>
defthm (df-and wff (/\ ph ps) () ()
          (-. (-> (-> (/\ ph ps) (-. (-> ph (-. ps))))
                  (-. (-> (-. (-> ph (-. ps))) (/\ ph ps)))))
     (-. (-> ph (-. ps))) id
     (-. (-> ph (-. ps))) id
     preandi)

## <title> Definition of AND Implication </title>
thm (df-and-1 () () (-> (/\ ph ps) (-. (-> ph (-. ps))))
     ph ps df-and preand1i)
	 
## <title> Definition of AND Implication </title>
thm (df-and-2 () () (-> (-. (-> ph (-. ps))) (/\ ph ps))
     ph ps df-and preand2i)
	 
## <title> Definition of AND Implication </title>
thm (df-and-1i () (1 (/\ ph ps)) (-. (-> ph (-. ps)))
     1 ph ps df-and-1 ax-mp)
	 
## <title> Definition of AND Implication </title>
thm (df-and-2i () (1 (-. (-> ph (-. ps)))) (/\ ph ps)
     1 ph ps df-and-2 ax-mp)
	 
## <title> Definition of AND Deduction </title>
thm (df-and-1d () (1 (-> ph (/\ ps ch))) (-> ph (-. (-> ps (-. ch))))
     1 ps ch df-and-1 syl)
	 
## <title> Definition of AND Deduction </title>
thm (df-and-2d () (1 (-> ph (-. (-> ps (-. ch))))) (-> ph (/\ ps ch))
     1 ps ch df-and-2 syl)
	 
## <title> Eliminate Conjunct </title>
thm (and1 () () (-> (/\ ph ps) ph)
     ph ps df-and-1 ph ps preand1 syl)
	 
## <title> Eliminate Conjunct </title>
thm (and2 () () (-> (/\ ph ps) ps)
     ph ps df-and-1 ph ps preand2 syl)

## <title> Join consequents </title>
thm (and () () (-> ph (-> ps (/\ ph ps)))
     ph ps preand ph ps df-and-2 syl6)

## <title> Eliminate Conjunct </title>
thm (and1i () (1 (/\ ph ps)) ph
     1 ph ps and1 ax-mp)

## <title> Eliminate Conjunct </title>
thm (and2i () (1 (/\ ph ps)) ps
     1 ph ps and2 ax-mp)

## <title> Conjunction from premises </title>
## <table>
##       ph ] ]
##          [ [ ps
##   (/\ ph ] [ ps)
## </table>
thm (pm3.2i () (1 ph 2 ps) (/\ ph ps)
     2 1 ph ps and ax-mp ax-mp)
	 
## <title> Eliminate Conjunct </title>
thm (and1d () (1 (-> ph (/\ ps ch))) (-> ph ps)
     1 ps ch and1 syl)
	 
## <title> Eliminate Conjunct </title>
thm (and2d () (1 (-> ph (/\ ps ch))) (-> ph ch)
     1 ps ch and2 syl)
	 
## <title> Join consequents </title>
thm (andd () (1 (-> ph ps) 2 (-> ph ch)) (-> ph (/\ ps ch))
     2 1 ps ch and syl mpd)

## <title> Definition of Biconditional </title>
## <summary>
##      This is our first definition, which introduces and defines the
##      biconditional connective {{{<->}}}.  We define a wff of the form
##      #(<-> ph ps)# as an abbreviation for
##      #(-. (-> (-> ph ps) (-. (-> ps ph))))#.
##
##      Unlike most traditional developments, we have chosen not to have a
##      separate symbol such as "Df." to mean "is defined as."  Instead, we will
##      later use the biconditional connective for this purpose (<a href="df-or">df-or</a> is its
##      first use), as it allows us to use logic to manipulate definitions
##      directly.  This greatly simplifies many proofs since it eliminates the
##      need for a separate mechanism for introducing and eliminating
##      definitions.  Of course, we cannot use this mechanism to define the
##      biconditional itself, since it hasn't been introduced yet.  Instead, we
##      use a more general form of definition, described as follows.
##
##      In its most general form, a definition is simply an assertion that
##      introduces a new symbol that is eliminable and does not strengthen the existing
##      language.  The latter requirement means that the set of provable
##      statements not containing the new symbol (or new combination) should
##      remain exactly the same after the definition is introduced.  Our
##      definition of the biconditional may look unusual compared to most
##      definitions, but it strictly satisfies these requirements.
##
##      See <a href="dfbi1">dfbi1</a>, <a href="dfbi1">dfbi2</a>, and <a href="dfbi3">dfbi3</a> for theorems suggesting typical
##      textbook definitions of <->, showing that our definition has the
##      properties we expect.  Theorem <a href="dfbi">dfbi</a> shows this definition rewritten
##      in an abbreviated form after conjunction is introduced.
## </summary>
defthm (def-bi wff (<-> ph ps) () ()
     (/\ (-> (<-> ph ps) (/\ (-> ph ps) (-> ps ph)))
         (-> (/\ (-> ph ps) (-> ps ph)) (<-> ph ps)))

    (/\ (-> ph ps) (-> ps ph)) id
    (/\ (-> ph ps) (-> ps ph)) id
    pm3.2i)

## <title> Biconditional Implies Two Conditionals </title>
thm (def-bi-1 () () (-> (<-> ph ps) (/\ (-> ph ps) (-> ps ph)))
     ph ps def-bi and1i)

## <title> Two Conditionals Implies Biconditional </title>
thm (def-bi-2 () () (-> (/\ (-> ph ps) (-> ps ph)) (<-> ph ps))
     ph ps def-bi and2i)

## <title> Peirce's axiom </title>
## <summary>
##   <a href="http://en.wikipedia.org/wiki/Charles_Sanders_Peirce">Peirce</a>'s
##   axiom.  This odd-looking theorem is the "difference" between
##   an intuitionistic system of propositional calculus and a classical system
##   and is not accepted by intuitionists.  When Peirce's axiom is added to an
##   intuitionistic system, the system becomes equivalent to our classical
##   system [[ax-1]] through [[ax-3]].  A curious fact about this
##   theorem is that it requires [[ax-3]] for its proof even though the
##   result has no negation connectives in it.
## </summary>
thm (peirce () () (-> (-> (-> ph ps) ph) ph)
     ph ps ph himp2 ph pm2.18 syl)

## <title> Lukasiewicz's Inversion Axiom </title>
## <summary>
##   The Inversion Axiom of the infinite-valued sentential logic (L-infinity)
##   of <a href="http://en.wikipedia.org/wiki/Jan_%C5%81ukasiewicz">Lukasiewicz</a>.
##   Using [[dfor2]], we can see that this essentially expresses
##   "disjunction commutes."
## </summary>
thm (looinv () () (-> (-> (-> ph ps) ps) (-> (-> ps ph) ph))
     (-> ph ps) ps ph imim1 ph ps peirce syl6)

## <title> Double Negative </title>
thm (notnot2 () () (-> (-. (-. ph)) ph)
     ph dn)

## <title> Double Negative </title>
thm (notnotri () (1 (-. (-. ph))) ph
     1 dni)

## <title> Double Negative </title>
thm (notnot1 () () (-> ph (-. (-. ph)))
     ph dnr)

## <title> Double Negative </title>
thm (notnoti () (1 ph) (-. (-. ph))
     1 dnri)

## <title> Reductio ad absurdum </title>
thm (pm2.01 () () (-> (-> ph (-. ph)) (-. ph))
     ph id
     ph id
     jc con2i)

## <title> Reductio ad absurdum </title>
## <summary>
##   The theorem <a href="pm2.01">pm2.01</a> written as an deduction.
## </summary>
thm (pm2.01d () (1 (-> ph (-> ps (-. ps)))) (-> ph (-. ps))
     1 ps pm2.01 syl)

thm (pm2.5 () () (-> (-. (-> ph ps)) (-> (-. ph) ps))
     ph ps nimp1 ps pm2.24d)

thm (pm2.51 () () (-> (-. (-> ph ps)) (-> ph (-. ps)))
     ph ps nimp2 ph a1d)

thm (pm2.52 () () (-> (-. (-> ph ps)) (-> (-. ph) (-. ps)))
     ph ps nimp2 (-. ph) a1d)

thm (pm2.521 () () (-> (-. (-> ph ps)) (-> ps ph))
     ph ps nimp1 ps a1d)

## <title> Modus Tollens </title>
## <table>
##          [    [   [ (-. [ ps)
##  (->     [ ph ]   [     [ ps)
##      (-. [ ph ] ) ]     ]
## </table>
thm (mto () (1 (-. ps) 2 (-> ph ps)) (-. ph)
     1 2 con3i ax-mp)

## <title> Modus Tollens </title>
## <table>
##                  [    [  [ (-. [ ch)
##   (-> ph (->     [ ps ]  [     [ ch))
##   (-> ph     (-. [ ps ]  ]     ]   ))
## </table>
thm (mtoi () (1 (-. ch) 2 (-> ph (-> ps ch))) (-> ph (-. ps))
     1 2 con3d mpi)

## <title> Modus Tollens </title>
thm (mtod () (1 (-> ph (-. ch)) 2 (-> ph (-> ps ch))) (-> ph (-. ps))
     1 2 con3d mpd)

## <title> Modus Tollens </title>
thm (mt2 () (1 ps 2 (-> ph (-. ps))) (-. ph)
     1 dnri 2 mto)

## <title> Modus Tollens </title>
thm (mt2i () (1 ch 2 (-> ph (-> ps (-. ch)))) (-> ph (-. ps))
     1 dnri 2 mtoi)

## <title> Modus Tollens </title>
thm (mt2d () (1 (-> ph ch) 2 (-> ph (-> ps (-. ch)))) (-> ph (-. ps))
     1 dnrd 2 mtod)

## <title> Modus Tollens </title>
thm (mt3 () (1 (-. ps) 2 (-> (-. ph) ps)) ph
     1 2 con1i ax-mp)

## <title> Modus Tollens </title>
thm (mt3i () (1 (-. ch) 2 (-> ph (-> (-. ps) ch))) (-> ph ps)
     1 2 con1d mpi)

## <title> Modus Tollens </title>
thm (mt3d () (1 (-> ph (-. ch)) 2 (-> ph (-> (-. ps) ch))) (-> ph ps)
     1 2 con1d mpd)

## <title> Modus Tollens </title>
thm (mt4d () (1 (-> ph ps) 2 (-> ph (-> (-. ch) (-. ps)))) (-> ph ch)
     1 2 a3d mpd)

## <title> Negated Syllogism </title>
thm (nsyl () (1 (-> ph (-. ps)) 2 (-> ch ps)) (-> ph (-. ch))
     1 2 con3i syl)

## <title> Negated Syllogism </title>
thm (nsyld () (1 (-> ph (-> ps (-. ch))) 2 (-> ph (-> ta ch)))
      (-> ph (-> ps (-. ta)))
     1 2 con3d syld)

## <title> Negated Syllogism </title>
thm (nsyl2 () (1 (-> ph (-. ps)) 2 (-> (-. ch) ps)) (-> ph ch)
     1 2 con1i syl)

## <title> Negated Syllogism </title>
thm (nsyl3 () (1 (-> ph (-. ps)) 2 (-> ch ps)) (-> ch (-. ph))
     2 1 con2i syl)

## <title> Negated Syllogism </title>
thm (nsyl4 () (1 (-> ph ps) 2 (-> (-. ph) ch)) (-> (-. ch) ps)
     2 con1i 1 syl)

## <title> Negated Syllogism </title>
thm (nsyl4t () () (-> (-> ph ps) (-> (-> (-. ph) ch) (-> (-. ch) ps)))
     ph ch con1 (-. ch) ph ps imim1 syl com12)

## <title> Negated Syllogism </title>
thm (nsyli () (1 (-> ph (-> ps ch)) 2 (-> th (-. ch))) (-> ph (-> th (-. ps)))
     1 con3d 2 syl5)

## <title> Join antecedents </title>
## <summary>
##   This is the same as <a href="pm3.2">pm3.2</a>, but uses the primitive
##   connectives → and ¬ instead of conjunction.
## </summary>
thm (pm3.2im () () (-> ph (-> ps (-. (-> ph (-. ps)))))
     ph ps preand)

thm (mth8 () () (-> ph (-> (-. ps) (-. (-> ph ps))))
     ph ps nimp)

# a.k.a cases
## <title> Proof by cases </title>
thm (pm2.61 () () (-> (-> ph ps) (-> (-> (-. ph) ps) ps))
     ph ps ps nsyl4t ps pm2.18 syl6)

## <title> Proof by cases </title>
thm (cases () () (-> (-> ph ps) (-> (-> (-. ph) ps) ps))
     ph ps pm2.61)

## <title> Proof by cases </title>
thm (casesi () (1 (-> ph ps) 2 (-> (-. ph) ps)) ps
     2 1 ph ps cases ax-mp ax-mp)

## <title> Proof by cases </title>
## <table>
##   (->     ph  [ ps)
##   (-> (-. ph) [ ps)
##               [ ps
## </table>
thm (pm2.61i () (1 (-> ph ps) 2 (-> (-. ph) ps)) ps
     1 2 casesi)

## <title> Proof by cases </title>
thm (casesd () (1 (-> ph (-> ps ch)) 2 (-> ph (-> (-. ps) ch))) (-> ph ch)
     2 1 ps ch cases syl mpd)

## <title> Proof by cases </title>
thm (pm2.61d () (1 (-> ph (-> ps ch)) 2 (-> ph (-> (-. ps) ch))) (-> ph ch)
     1 2 casesd)

## <title> Eliminate an antecedent </title>
thm (pm2.61d1 () (1 (-> ph (-> ps ch)) 2 (-> (-. ps) ch)) (-> ph ch)
     1 2 ph a1i casesd)

## <title> Eliminate an antecedent </title>
thm (pm2.61d2 () (1 (-> ph (-> (-. ps) ch)) 2 (-> ps ch)) (-> ph ch)
     2 ph a1i 1 casesd)

## <title> Proof by contradiction </title>
thm (pm2.18i () (1 (-> (-. ph) ph)) ph
     1 ph pm2.18 ax-mp)

## <title> Eliminate an antecedent </title>
thm (pm2.61ii () (1 (-> (-. ph) (-> (-. ps) ch)) 2 (-> ph ch) 3 (-> ps ch)) ch
     3 con3i 2 con3i 1 syl mpd pm2.18i)

## <title> Eliminate an antecedent </title>
thm (pm2.61nii () (1 (-> ph (-> ps ch)) 2 (-> (-. ph) ch) 3 (-> (-. ps) ch))
       ch
     3 con1i 2 con1i 1 syl mpd pm2.18i)

## <title> Eliminate an antecedent </title>
thm (pm2.61iii () (1 (-> (-. ph) (-> (-. ps) (-> (-. ch) th)))
                  2 (-> ph th) 3 (-> ps th) 4 (-> ch th)) th
     4 con3i 3 con3i 2 con3i 1 syl mpd mpd pm2.18i)

thm (pm2.6 () () (-> (-> (-. ph) ps) (-> (-> ph ps) ps))
     ph ps pm2.61 com12)

## <title> Proof by contradiction </title>
thm (pm2.65 () () (-> (-> ph ps) (-> (-> ph (-. ps)) (-. ph)))
     ph ps (-. ph) imim1 ph ps con2 syl5 ph pm2.01 syl6)

## <title> Proof by contradiction </title>
thm (pm2.65i () (1 (-> ph ps) 2 (-> ph (-. ps))) (-. ph)
     2 1 ph ps pm2.65 ax-mp ax-mp)

## <title> Proof by contradiction </title>
thm (pm2.65d () (1 (-> ph (-> ps ch)) 2 (-> ph (-> ps (-. ch))))
      (-> ph (-. ps))
    2 1 ps ch pm2.65 syl mpd)

## <title> Join the antecedents of two premises </title>
thm (ja () (1 (-> (-. ph) ch) 2 (-> ps ch)) (-> (-> ph ps) ch)
     1 con1i 2 con3i nimpd a3i)

## <title> Simplification </title>
## <summary>
##   This is the same as <a href="pm3.26">pm3.26</a>, but uses the primitive
##   connectives → and ¬ instead of conjunction.
## </summary>
thm (pm3.26im () () (-> (-. (-> ph (-. ps))) ph)
     ph ps preand1)

## <title> Simplification </title>
## <summary>
##   This is the same as <a href="pm3.27">pm3.276</a>, but uses the primitive
##   connectives → and ¬ instead of conjunction.
## </summary>
thm (pm3.27im () () (-> (-. (-> ph (-. ps))) ps)
     ph ps preand2)

## <title> Importation theorem </title>
## <summary>
##   This is the same as the <a href="imp">import theorem</a>, but uses the primitive
##   connectives → and ¬ instead of conjunction.
## </summary>
thm (impt () () (-> (-> ph (-> ps ch)) (-> (-. (-> ph (-. ps))) ch))
     ph ps preand2 ch imim1i ph imim2i
       ph ps preand1
     syl5 pm2.43d)

## <title> Syllogism </title>
thm (syldx () (1 (-> ph (-> ps ch))) (-> (-> ch th) (-> ph (-> ps th)))
     1 th imim1d a2i himp1i)

## <title> Exportation theorem </title>
## <summary>
##   This is the same as the <a href="exp">export theorem</a>, but uses the primitive
##   connectives → and ¬ instead of conjunction.
## </summary>
thm (expt () () (-> (-> (-. (-> ph (-. ps))) ch) (-> ph (-> ps ch)))
     ph ps preand ch syldx)

## <title> Importation Inference </title>
thm (impi () (1 (-> ph (-> ps ch))) (-> (-. (-> ph (-. ps))) ch)
     1 ph ps ch impt ax-mp)

## <title> Exportation Inference </title>
thm (expi () (1 (-> (-. (-> ph (-. ps))) ch)) (-> ph (-> ps ch))
     1 ph ps ch expt ax-mp)

## <title> Bicondition Justification </title>
## <summary>
##   Theorem used to justify the <a href="df-bi">definition of biconditional</a>.  
## </summary>
thm (bijust () () (-. (-> (-> ph ph) (-. (-> ph ph))))
     ph id
     ph id
     preandi)

## <title> Alternative Definition of Biconditional </title>
## <summary>
##   See <a href="def-bi">def-bi</a> for more information.
## </summary>
thm (df-bi () () 
      (-. (-> (-> (<-> ph ps) (-. (-> (-> ph ps) (-. (-> ps ph))))) (-. (-> (-. (-> (-> ph ps) (-. (-> ps ph)))) (<-> ph ps)))))
    ph ps def-bi-1 df-and-1d
    (-> ph ps) (-> ps ph) df-and-2 ph ps def-bi-2 syl
    preandi
)

## <title> Infer Left to Right </title>
## <suggest> right('Infer', '→') </suggest>
thm (bi1 () () (-> (<-> ph ps) (-> ph ps))
     ph ps def-bi-1 and1d)

## <title> Infer Right to Left </title>
## <suggest> right('Infer', '←') </suggest>
thm (bi2 () () (-> (<-> ph ps) (-> ps ph))
     ph ps def-bi-1 and2d)

## <title> Bicondition from two conditionals </title>
thm (bi3 () () (-> (-> ph ps) (-> (-> ps ph) (<-> ph ps)))
     (-> ph ps) (-> ps ph) and
        ph ps def-bi-2
      syl6)

# a.k.a. bi1i?
## <title> Biconditional Implies Conditional </title>
thm (biimpi () (1 (<-> ph ps)) (-> ph ps)
     1 ph ps bi1 ax-mp)

## <title> Biconditional Implies Conditional </title>
## <table>
##   ((<-> <r> ph <g> ps)) (-> <g> ps <r> ph))
## </table>
thm (biimpri () (1 (<-> ph ps)) (-> ps ph)
     1 ph ps bi2 ax-mp)

## <title> Biconditional Implies Conditional </title>
thm (biimpd () (1 (-> ph (<-> ps ch))) (-> ph (-> ps ch))
     1 ps ch bi1 syl)

## <title> Biconditional Implies Conditional </title>
thm (biimprd () (1 (-> ph (<-> ps ch))) (-> ph (-> ch ps))
     1 ps ch bi2 syl)

# Getting a bit decadent here... just use biimpd com12!
## <title> Biconditional Implies Conditional </title>
thm (biimpcd () (1 (-> ph (<-> ps ch))) (-> ps (-> ph ch))
     1 biimpd com12)

## <title> Biconditional Implies Conditional </title>
thm (biimprcd () (1 (-> ph (<-> ps ch))) (-> ch (-> ph ps))
     1 biimprd com12)

## <title> Biconditional Implies Two Conditionals </title>
thm (def-bi-1i () (1 (<-> ph ps)) (/\ (-> ph ps) (-> ps ph))
     1 ph ps def-bi-1 ax-mp)

## <title> Two Conditionals Implies Biconditional </title>
thm (def-bi-2i () (1 (/\ (-> ph ps) (-> ps ph))) (<-> ph ps)
     1 ph ps def-bi-2 ax-mp)

# a.k.a. biconsi
## <title> Bicondition from two conditionals </title>
## <table>
##   (-> <r> ph <g> ps)
##   (-> <g> ps <r> ph)
##   (<-> <r> ph <g> ps)
## </table>
thm (impbii () (1 (-> ph ps) 2 (-> ps ph)) (<-> ph ps)
     1 2 pm3.2i def-bi-2i)

## <title> Alternative Definition of Biconditional </title>
## <summary
##   See <a href="def-bi">def-bi</a> for more information. This is the same as
##   See <a href="dfbi2">dfbi2</a>.
## </summary>
thm (def-bi' () () (<-> (<-> ph ps) (/\ (-> ph ps) (-> ps ph)))
     ph ps def-bi def-bi-2i)
	 
## <title> Definition of AND </title>
## <summary> Define conjunction, logical AND.
##   This theorem is based on an earlier <a href="df-and">definition of AND</a> which
##   did not use the biconditional. This theorem writes the definition of AND in a more
##   familiar form using the biconditional.
## </summary>
thm (df-an () () (<-> (/\ ph ps) (-. (-> ph (-. ps))))
     ph ps df-and-1
     ph ps df-and-2
     impbii
)

## <title> Transitive Property </title>
## <table>
##   (<-> ph ]      [ ps ] ] )
##           [ (<-> [ ps ] [ ch)
##   (<-> ph ]      [    [ [ ch)
## </table>
thm (bitri () (1 (<-> ph ps) 2 (<-> ps ch)) (<-> ph ch)
     1 biimpi 2 biimpi syl
     2 biimpri 1 biimpri syl
     impbii)

## <title> Bicondition Definition from primitive connectives </title>
thm (dfbi1 () () (<-> (<-> ph ps) (-. (-> (-> ph ps) (-. (-> ps ph)))))
     ph ps def-bi'
       (-> ph ps) (-> ps ph) df-an
     bitri)

# There's no point in having this theorem if we're not going to prove it as
# described in prop.ghi.
#thm (dfbi1gb () () (<-> (<-> ph ps) (-. (-> (-> ph ps) (-. (-> ps ph)))))
#     # No way! See the notes at http://us.metamath.org/mpegif/dfbi1gb.html
#     ph ps dfbi1)

## <title> Commute Antecedents </title>
thm (bi2.04 () () (<-> (-> ph (-> ps ch)) (-> ps (-> ph ch)))
     ph ps ch pm2.04
     ps ph ch pm2.04
     impbii)

## <title> Double Negative </title>
thm (notnot () () (<-> ph (-. (-. ph)))
     ph dnr
     ph dn
     impbii)

## <title> Double Negative </title>
thm (notnotr () () (<-> (-. (-. ph)) ph)
     ph dn
     ph dnr
     impbii
)

## <title> Proof by contradiction </title>
thm (pm4.8 () () (<-> (-> ph (-. ph)) (-. ph))
     ph pm2.01
     (-. ph) ph ax-1
     impbii)

## <title> Proof by contradiction </title>
thm (pm4.81 () () (<-> (-> (-. ph) ph) ph)
     ph pm2.18
     ph (-. ph) ax-1
     impbii)

## <title> Contraposition </title>
## <summary> Bidirectional version of <a href="con1">con1</a>. </summary>
thm (con1b () () (<-> (-> (-. ph) ps) (-> (-. ps) ph))
     ph ps con1
     ps ph con1
     impbii)

## <title> Contraposition </title>
## <summary> Bidirectional version of <a href="con2">con2</a>. </summary>
thm (con2b () () (<-> (-> ph (-. ps)) (-> ps (-. ph)))
     ph ps con2
     ps ph con2
     impbii)
	 
## <title> Contrapositive </title>
## <suggest> right('Equivalence', '←') </suggest>
thm (con34b () () (<-> (-> ph ps) (-> (-. ps) (-. ph)))
     ph ps con3
     ps ph ax-3
     impbii)

## <title> Absorb Antecedent </title>
thm (pm5.4 () () (<-> (-> ph (-> ph ps)) (-> ph ps))
     ph ps pm2.43
     (-> ph ps) ph ax-1
     impbii)

## <title> Distributive Property </title>
## <suggest> right('Distribute', 'L') left('Distribute', '-L') </suggest>
thm (imdi () () (<-> (-> ph (-> ps ch)) (-> (-> ph ps) (-> ph ch)))
     ph ps ch ax-2
     ph ps ch pm2.86
     impbii)

## <title> Commutative Property </title>
thm (bicomi () (1 (<-> ph ps)) (<-> ps ph)
     1 biimpri
     1 biimpi
     impbii)

## <title> Distributive Property </title>
thm (pm5.41 () () (<-> (-> (-> ph ps) (-> ph ch)) (-> ph (-> ps ch)))
     ph ps ch imdi bicomi)

## <title> Identity </title>
thm (biid () () (<-> ph ph)
     ph id
     ph id
     impbii)

# Decadent...
## <title> Biconditional Identity <title>
thm (biidd () () (-> ph (<-> ps ps))
     ps biid ph a1i)

## <title> Transitive Property </title>
thm (bitr2i () (1 (<-> ph ps) 2 (<-> ps ch)) (<-> ch ph)
     1 2 bitri bicomi)

## <title> Transitive Property </title>
## <table>
##   (<-> ps ] [ ph ]   )
##   (<-> ps ] [    [ ch)
##   (<->    [ [ ph [ ch)
## </table>
thm (bitr3i () (1 (<-> ps ph) 2 (<-> ps ch)) (<-> ph ch)
     1 bicomi 2 bitri)

## <title> Transitive Property </title>
thm (bitr4i () (1 (<-> ph ps) 2 (<-> ch ps)) (<-> ph ch)
     1 2 bicomi bitri)
	 
## <title> Transitive Property </title>
thm (3bitri () (1 (<-> ph ps) 2 (<-> ps ch) 3 (<-> ch th)) (<-> ph th)
     1 2 3 bitri bitri)
	 
## <title> Transitive Property </title>
thm (3bitrri () (1 (<-> ph ps) 2 (<-> ps ch) 3 (<-> ch th)) (<-> th ph)
     1 2 bitri 3 bitr2i)
	 
## <title> Transitive Property </title>
thm (3bitr2i () (1 (<-> ph ps) 2 (<-> ch ps) 3 (<-> ch th)) (<-> ph th)
     1 2 bicomi 3 3bitri)
	 
## <title> Transitive Property </title>
thm (3bitr2ri () (1 (<-> ph ps) 2 (<-> ch ps) 3 (<-> ch th)) (<-> th ph)
     1 2 3 3bitr2i bicomi)

# This is getting boring...
## <title> Transitive Property </title>
thm (3bitr3i () (1 (<-> ph ps) 2 (<-> ph ch) 3 (<-> ps th)) (<-> ch th)
     2 bicomi 1 3 3bitri)
	 
## <title> Transitive Property </title>
thm (3bitr3ri () (1 (<-> ph ps) 2 (<-> ph ch) 3 (<-> ps th)) (<-> th ch)
     1 2 3 3bitr3i bicomi)
	 
## <title> Transitive Property </title>
thm (3bitr4i () (1 (<-> ph ps) 2 (<-> ch ph) 3 (<-> th ps)) (<-> ch th)
     2 1 3 bicomi 3bitri)
	 
## <title> Transitive Property </title>
thm (3bitr4ri () (1 (<-> ph ps) 2 (<-> ch ph) 3 (<-> th ps)) (<-> th ch)
     1 2 3 3bitr4i bicomi)

# Ok, some constructors

## <title> Equivalence over Implication </title>
## <table>
##   (<->        [ ph ]   [        [ ps)
##   (<-> (-> ch [ ph ] ) [ (-> ch [ ps))
## </table>
thm (imbi2i () (1 (<-> ph ps)) (<-> (-> ch ph) (-> ch ps))
     1 biimpi ch imim2i
     1 biimpri ch imim2i
     impbii)

## <title> Equivalence over Implication </title>
## <table>
##   (<->     ph ]     ]     [ ps ] )
##   (<-> (-> ph ] ch) ] (-> [ ps ] ch))
## </table>
thm (imbi1i () (1 (<-> ph ps)) (<-> (-> ph ch) (-> ps ch))
     1 biimpri ch imim1i
     1 biimpi ch imim1i
     impbii)

## <title> Negation Both Sides </title>
## <table>
##   (<->     [ ph ]       [ ps ] )
##   (<-> (-. [ ph ] ) (-. [ ps ] ))
## </table>
thm (notbii () (1 (<-> ph ps)) (<-> (-. ph) (-. ps))
     1 biimpri con3i
     1 biimpi con3i
     impbii)

## <title> Join two equivalences to form equivalent implication </title>
thm (imbi12i () (1 (<-> ph ps) 2 (<-> ch th)) (<-> (-> ph ch) (-> ps th))
     1 ch imbi1i
     2 ps imbi2i
     bitri)

## <title> Modus Ponens </title>
## <table>
##      ph ] ]    ]
## (<-> ph ] [ ps ] )
##         [ [ ps ]
## </table>
thm (mpbi () (1 ph 2 (<-> ph ps)) ps
     1 2 biimpi ax-mp)

## <title> Modus Ponens </title>
## <table>
##         [ [ ps ]
## (<-> ph ] [ ps ] )
##      ph ] ]    ]
## </table>
thm (mpbir () (1 ps 2 (<-> ph ps)) ph
     1 2 biimpri ax-mp)

## <title> Modus Tollens </title>
## <table>
##       (-. [ ph ] ) ]     ]
##  (<->     [ ph ]   [     [ ps)
##           [    [   [ (-. [ ps)
## </table>
thm (mtbi () (1 (-. ph) 2 (<-> ph ps)) (-. ps)
     1 2 notbii mpbi)

## <title> Modus Tollens </title>
## <table>
##                 [ [ (-. [ ps)
##   (<->    [ ph  ] [     [ ps)
##       (-. [ ph) ] ]     ]
## </table>
thm (mtbir () (1 (-. ps) 2 (<-> ph ps)) (-. ph)
     1 2 notbii mpbir)

## <title> Modus Ponens </title>
## <table>
##               [ ps ]
##   (-> ph (<-> [ ps ] ch))
##   (-> ph      [    [ ch))
## </table>
thm (mpbii () (1 ps 2 (-> ph (<-> ps ch))) (-> ph ch)
     1 2 biimpd mpi)

## <title> Modus Ponens </title>
thm (mpbiri () (1 ch 2 (-> ph (<-> ps ch))) (-> ph ps)
     1 2 biimprd mpi)

## <title> Modus Ponens </title>
thm (mpbid () (1 (-> ph ps) 2 (-> ph (<-> ps ch))) (-> ph ch)
     1 2 biimpd mpd)

## <title> Modus Ponens </title>
thm (mpbird () (1 (-> ph ch) 2 (-> ph (<-> ps ch))) (-> ph ps)
     1 2 biimprd mpd)

## <title> Theorem as antecedent </title>
## <table>
##               [ ph ]
##   (<-> ps (-> [ ph ] ps))
## </table>
thm (a1bi () (1 ph) (<-> ps (-> ph ps))
     ps ph ax-1
     1 ph ps pm2.27 ax-mp
     impbii)

## <title> Syllogism </title>
## <table>
##   (-> ph [      ps ] ]    ] )
##          [ (<-> ps ] [ ch ] )
##   (-> ph [         [ [ ch ] )
## </table>
thm (sylib () (1 (-> ph ps) 2 (<-> ps ch)) (-> ph ch)
     1 2 biimpi syl)

## <title> Syllogism </title>
## <table>
##   (<-> ph [     ps ] ]    ] )
##           [ (-> ps ] [ ch ] )
##   ( -> ph [        [ [ ch ] )
## </table>
thm (sylbi () (1 (<-> ph ps) 2 (-> ps ch)) (-> ph ch)
     1 biimpi 2 syl)

## <title> Syllogism </title>
thm (sylibr () (1 (-> ph ps) 2 (<-> ch ps)) (-> ph ch)
     1 2 biimpri syl)

## <title> Syllogism </title>
thm (sylbir () (1 (<-> ps ph) 2 (-> ps ch)) (-> ph ch)
     1 biimpri 2 syl)

## <title> Syllogism </title>
thm (sylibd () (1 (-> ph (-> ps ch)) 2 (-> ph (<-> ch th))) (-> ph (-> ps th))
     1 2 biimpd syld)

## <title> Syllogism </title>
thm (sylbid () (1 (-> ph (<-> ps ch)) 2 (-> ph (-> ch th))) (-> ph (-> ps th))
     1 biimpd 2 syld)

## <title> Syllogism </title>
thm (sylibrd () (1 (-> ph (-> ps ch)) 2 (-> ph (<-> th ch))) (-> ph (-> ps th))
     1 2 biimprd syld)

## <title> Syllogism </title>
thm (sylbird () (1 (-> ph (<-> ch ps)) 2 (-> ph (-> ch th))) (-> ph (-> ps th))
     1 biimprd 2 syld)

## <title> Syllogism </title>
thm (syl5ib () (HIMP (-> ph (-> ps ch)) HEQ (<-> th ps)) (-> ph (-> th ch))
     HIMP
     HEQ ch imbi1i ph imbi2i biimpri
     ax-mp
)

## <title> Syllogism </title>
thm (syl5ibr () (HIMP (-> ph (-> ps ch)) HEQ (<-> ps th)) (-> ph (-> th ch))
     HIMP
     HEQ bicomi
     syl5ib
)

## <title> Syllogism </title>
thm (syl5bi () (HEQ (-> ph (<-> ps ch)) HIMP (-> th ps)) (-> ph (-> th ch))
     HIMP ph a1i
     HEQ biimpd
     syld
)

## <title> Syllogism </title>
thm (syl5cbi () (HEQ (-> ph (<-> ps ch)) HIMP (-> th ps)) (-> th (-> ph ch))
     HEQ HIMP syl5bi
     com12
)

## <title> Syllogism </title>
thm (syl5bir () (HEQ (-> ph (<-> ps ch)) HIMP (-> th ch)) (-> ph (-> th ps))
     HIMP ph a1i
     HEQ biimprd
     syld
)

## <title> Syllogism </title>
thm (syl5cbir () (HEQ (-> ph (<-> ps ch)) HIMP (-> th ch)) (-> th (-> ph ps))
     HEQ HIMP syl5bir
     com12
)

## <title> Syllogism </title>
thm (syl6ib () (HIMP (-> ph (-> ps ch)) HEQ (<-> ch th)) (-> ph (-> ps th))
     HIMP
     HEQ biimpi ph a1i
     syld
)

## <title> Syllogism </title>
thm (syl6ibr () (HIMP (-> ph (-> ps ch)) HEQ (<-> th ch)) (-> ph (-> ps th))
     HIMP HEQ bicomi syl6ib
)

## <title> Syllogism </title>
thm (syl6bi () (HEQ (-> ph (<-> ps ch)) HIMP (-> ch th)) (-> ph (-> ps th))
     HEQ biimpd
     HIMP ph a1i
     syld
)

## <title> Syllogism </title>
thm (syl6bir () (HEQ (-> ph (<-> ch ps)) HIMP (-> ch th)) (-> ph (-> ps th))
     HEQ biimprd
     HIMP ph a1i
     syld
)

## <title> Syllogism </title>
thm (syl7ib () (HIMP (-> ph (-> ps (-> ch th))) HEQ (<-> ta ch)) (-> ph (-> ps (-> ta th)))
     HIMP
     HEQ biimpi
     syl7
)

## <title> Syllogism </title>
thm (syl8ib () (HIMP (-> ph (-> ps (-> ch th))) HEQ (<-> th ta)) (-> ph (-> ps (-> ch ta)))
     HIMP
     HEQ biimpi
     syl8
)

## <title> Syllogism </title>
thm (3imtr3i () (1 (-> ph ps) 2 (<-> ph ch) 3 (<-> ps th)) (-> ch th)
     2 1 sylbir
     3 sylib
)

## <title> Syllogism </title>
thm (3imtr4i () (1 (-> ph ps) 2 (<-> ch ph) 3 (<-> th ps)) (-> ch th)
     2 1 sylbi
     3 sylibr
)


## <title> Contraposition </title>
thm (con1bii () (1 (<-> (-. ph) ps)) (<-> (-. ps) ph)
     1 biimpi
     con1i
     1 biimpri
     con2i
     impbii
)

## <title> Contraposition </title>
thm (con2bii () (1 (<-> ph (-. ps))) (<-> ps (-. ph))
     1 biimpi
     con2i
     1 biimpri
     con1i
     impbii
)

## <title> Definition of OR </title>
## <summary>
##      Define disjunction (logical 'or').  This is our first use of the
##      biconditional connective in a definition; we use it in place of the
##      traditional "<=def=>", which means the same thing, except that we can
##      manipulate the biconditional connective directly in proofs rather than
##      having to rely on an informal definition substitution rule.  Note that
##      if we mechanically substitute #(-> (-. ph) ps)# for #(\/ ph ps)#,
##      we end up with an instance of previously proved <a href="biid">identity theorem</a>.  This
##      is the justification for the definition, along with the fact that it
##      introduces a new symbol \/.
## </summary>
defthm (df-or wff (\/ ph ps) () () (<-> (\/ ph ps) (-> (-. ph) ps))
     (-> (-. ph) ps) biid
)

## <title> Alternative Definition of OR </title>
thm (pm4.64 () () (<-> (-> (-. ph) ps) (\/ ph ps))
     ph ps df-or
     bicomi
)

## <title> Infer Disjunction </title>
thm (pm2.54 () () (-> (-> (-. ph) ps) (\/ ph ps))
     ph ps df-or
     biimpri
)

## <title> Alternative Definition of AND </title>
thm (pm4.63 () () (<-> (-. (-> ph (-. ps))) (/\ ph ps))
     ph ps df-an
     bicomi
)

## <title> Alternative Definition of OR Lemma </title>
thm (dfor2-lemma () () (<-> (-> (-. ph) ps) (-> (-> ph ps) ps))
  ph ps pm2.6

  ph ps pm2.21
  ps imim1i
  impbii
)

## <title> Alternative Definition of OR </title
## <summary> Logical 'or' expressed in terms of implication only. </summary> 
thm (dfor2 () () (<-> (\/ ph ps) (-> (-> ph ps) ps))
  ph ps df-or
  ph ps dfor2-lemma
  bitri
)

## <title> Infer implication from disjunction </title>
thm (ori () (1 (\/ ph ps)) (-> (-. ph) ps)
  1
  ph ps df-or
  biimpi
  ax-mp
)

## <title> Infer implication from disjunction </title>
thm (orri () (1 (-> (-. ph) ps)) (\/ ph ps)
  1
  ph ps df-or
  biimpri
  ax-mp
)

## <title> Deduce implication from disjunction </title>
thm (ord () (1 (-> ph (\/ ps ch))) (-> ph (-> (-. ps) ch))
  1
  ps ch df-or
  biimpi
  syl
)

## <title> Deduce implication from disjunction </title>
thm (orrd () (1 (-> ph (-> (-. ps) ch))) (-> ph (\/ ps ch))
  1
  ps ch df-or
  biimpri
  syl
)

## <title> OR and → Equivalance </title>
## <suggest> right('Equivalence', '∨') </suggest>
thm (imor () () (<-> (-> ph ps) (\/ (-. ph) ps))
  ph notnot
  ps imbi1i

  (-. ph) ps df-or
  bicomi

  bitri
)

# Not really sure why we want this in addition to imor
## <title> OR and → Equivalance Negated </title>
thm (pm4.62 () () (<-> (-> ph (-. ps)) (\/ (-. ph) (-. ps)))
  ph (-. ps) imor
)

# Likewise, this one is a trivial corollary of pm4.64
## <title> OR and → Equivalance Negated </title>
thm (pm4.66 () () (<-> (-> (-. ph) (-. ps)) (\/ ph (-. ps)))
  ph (-. ps) pm4.64
)

## <title> AND and → Equivalance </title>
## <suggest> right('Equivalence', '∧') </suggest>
thm (iman () () (<-> (-> ph ps) (-. (/\ ph (-. ps))))
  ps notnot
  ph imbi2i

  ph (-. ps) df-an
  con2bii

  bitri
)

## <title> Conjunction in terms of implication </title>
thm (annim () () (<-> (/\ ph (-. ps)) (-. (-> ph ps)))
  ph ps iman
  con2bii
)

## <title> Conjunction in terms of implication </title>
thm (pm4.61 () () (<-> (-. (-> ph ps)) (/\ ph (-. ps)))
  ph ps annim
  bicomi
)

## <title> Conjunction in terms of implication negated </title>
thm (pm4.65 () () (<-> (-. (-> (-. ph) ps)) (/\ (-. ph) (-. ps)))
  (-. ph) ps pm4.61
)

## <title> Conjunction in terms of implication negated </title>
thm (pm4.67 () () (<-> (-. (-> (-. ph) (-. ps))) (/\ (-. ph) ps))
  (-. ph) ps pm4.63
)

## <title> Implication in terms of conjunction </title>
thm (imnan () () (<-> (-> ph (-. ps)) (-. (/\ ph ps)))
  ph ps df-an
  con2bii
)

## <title> Disjunction is Idempotent </title>
## <suggest> right('Simplify', '∨') </suggest>
thm (oridm () () (<-> (\/ ph ph) ph)
  ph ph df-or
  ph pm4.81
  bitri
)

## <title> Disjunction is Idempotent </title>
thm (pm4.25 () () (<-> ph (\/ ph ph))
  ph oridm
  bicomi
)

## <title> Disjunction is Idempotent </title>
thm (pm1.2 () () (-> (\/ ph ph) ph)
  ph oridm
  biimpi
)

## <title> Commutative Property of OR </title>
## <table>
##   (<-> (\/ <r> ph <g> ps) (\/ <g> ps <r> ph))
## </table>
thm (orcom () () (<-> (\/ ph ps) (\/ ps ph))
  ph ps df-or

  ph ps con1b
  bitri

  ps ph df-or
  bicomi
  bitri
)

## <title> Commutative Property of OR </title>
thm (pm1.4 () () (-> (\/ ph ps) (\/ ps ph))
  ph ps orcom
  biimpi
)

## <title> Unidirectional definition of OR </title>
thm (pm2.62 () () (-> (\/ ph ps) (-> (-> ph ps) ps))
  ph ps dfor2
  biimpi
)

## <title> Unidirectional definition of OR </title>
thm (pm2.621 () () (-> (-> ph ps) (-> (\/ ph ps) ps))
  ph ps pm2.62
  com12
)

## <title> Unidirectional definition of OR </title>
thm (pm2.68 () () (-> (-> (-> ph ps) ps) (\/ ph ps))
  ph ps dfor2
  biimpri
)

## <title> Denial of a Disjunct </title>
## <summary> Elimination of disjunction by denying a disjunct. <.summary>
thm (orel1 () () (-> (-. ph) (-> (\/ ph ps) ps))
  ph ps df-or
  biimpi
  com12
)

## <title> Denial of a Disjunct </title>
## <summary> Elimination of disjunction by denying a disjunct. <.summary>
thm (orel2 () () (-> (-. ph) (-> (\/ ps ph) ps))
  ph ps orel1
  ps ph orcom
  syl5ib
)

thm (pm2.25 () () (\/ ph (-> (\/ ph ps) ps))
  ph ps orel1
  orri
)

thm (pm2.53 () () (-> (\/ ph ps) (-> (-. ph) ps))
  ph ps df-or
  biimpi
)

## <title> Equivalence over Disjunction </title>
## <table>
##   (<->        [ ph ]   [        [ ps)
##   (<-> (\/ ch [ ph ] ) [ (\/ ch [ ps))
## </table>
thm (orbi2i () (HEQ (<-> ph ps)) (<-> (\/ ch ph) (\/ ch ps))
  ch ph df-or

  HEQ
  (-. ch) imbi2i
  bitri

  ch ps df-or
  bicomi
  bitri
)

## <title> Equivalence over Disjunction </title>
## <table>
##   (<->     ph ]     ]     [ ps ] )
##   (<-> (\/ ph ] ch) ] (\/ [ ps ] ch))
## </table>
thm (orbi1i () (HEQ (<-> ph ps)) (<-> (\/ ph ch) (\/ ps ch))
  ph ch orcom

  HEQ
  ch orbi2i
  bitri

  ch ps orcom
  bitri
)

tvar (wff p0 p1 q0 q1)

## <title> Infer the disjunction of two equivalences </title>
thm (orbi12i () (1 (<-> p0 p1) 2 (<-> q0 q1)) (<-> (\/ p0 q0) (\/ p1 q1))
  1 q0 orbi1i
  2 p1 orbi2i
  bitri
)

## <title>  Rearrangement of disjuncts </title>
thm (or12 () () (<-> (\/ ph (\/ ps ch)) (\/ ps (\/ ph ch)))
  ps ch df-or
  ph orbi2i

  ph (-> (-. ps) ch) df-or
  bitri

  (-. ph) (-. ps) ch bi2.04
  bitri

  ps (-> (-. ph) ch) df-or
  bicomi
  bitri

  ph ch df-or
  ps orbi2i
  bicomi
  bitri
)

## <title>  Rearrangement of disjuncts </title>
thm (pm1.5 () () (-> (\/ ph (\/ ps ch)) (\/ ps (\/ ph ch)))
  ph ps ch or12
  biimpi
)

## <title> Associative Property of OR </title>
## <suggest> right('Associate', 'R') left('Associate', 'L') </suggest>
thm (orass () () (<-> (\/ (\/ ph ps) ch) (\/ ph (\/ ps ch)))
  (\/ ph ps) ch orcom

  ch ph ps or12
  bitri

  ch ps orcom
  ph orbi2i
  bitri
)

## <title> Associatative Property of OR </title>
thm (pm2.31 () () (-> (\/ ph (\/ ps ch)) (\/ (\/ ph ps) ch))
  ph ps ch orass
  biimpri
)

## <title> Associatative Property of OR </title>
thm (pm2.32 () () (-> (\/ (\/ ph ps) ch) (\/ ph (\/ ps ch)))
  ph ps ch orass
  biimpi
)

## <title> Rearrangement of disjuncts </title>
thm (or23 () () (<-> (\/ (\/ ph ps) ch) (\/ (\/ ph ch) ps))
  ph ps orcom
  ch orbi1i

  ps ph ch orass
  bitri

  ps (\/ ph ch) orcom
  bitri
)

## <title> Rearrangement of disjuncts </title>
thm (or4 () () (<-> (\/ (\/ ph ps) (\/ ch th)) (\/ (\/ ph ch) (\/ ps th)))
  ph ps (\/ ch th) orass

  ps ch th or12
  ph orbi2i
  bitri

  ph ch (\/ ps th) orass
  bicomi
  bitri
)

## <title> Rearrangement of disjuncts </title>
thm (or42 () () (<-> (\/ (\/ ph ps) (\/ ch th)) (\/ (\/ ph ch) (\/ th ps)))
  ph ps ch th or4
  ps th orcom
  (\/ ph ch) orbi2i
  bitri
)

## <title> Distribution of disjunction over disjunction </title>
thm (orordi () () (<-> (\/ ph (\/ ps ch)) (\/ (\/ ph ps) (\/ ph ch)))
  ph oridm
  (\/ ps ch) orbi1i
  ph ph ps ch or4
  bitr3i
)

## <title> Introduction of a disjunct </title>
thm (olc () () (-> ph (\/ ps ph))
  ph (-. ps) ax-1
  orrd
)

## <title> Introduction of a disjunct </title>
thm (orc () () (-> ph (\/ ph ps))
  ph ps pm2.24
  orrd
)

## <title> Introduction of a disjunct </title>
thm (olci () (hyp ph) (\/ ps ph)
  hyp
  ph ps olc
  ax-mp
)

## <title> Introduction of a disjunct </title>
thm (orci () (hyp ph) (\/ ph ps)
  hyp
  ph ps orc
  ax-mp
)

## <title> Introduction of a disjunct </title>
thm (orcd () (hyp (-> ph ps)) (-> ph (\/ ps ch))
  hyp
  ps ch orc
  syl
)

## <title> Introduction of a disjunct </title>
thm (olcd () (hyp (-> ph ps)) (-> ph (\/ ch ps))
  hyp
  ps ch olc
  syl
)

## <title> Eliminate a Disjunct </title>
thm (orcs () (hyp (-> (\/ ph ps) ch)) (-> ph ch)
  ph ps orc
  hyp
  syl
)

## <title> Eliminate a Disjunct </title>
thm (olcs () (hyp (-> (\/ ph ps) ch)) (-> ps ch)
  ps ph olc
  hyp
  syl
)

## <title> Disjunction is Idempotent </title>
thm (pm2.07 () () (-> ph (\/ ph ph))
  ph ph olc
)

#  Distribution of disjunction over disjunction. 
## <title> Distribution of disjunction over disjunction </title>
thm (orordir () () (<-> (\/ (\/ ph ps) ch) (\/ (\/ ph ch) (\/ ps ch))) ch oridm (\/ ph ps) orbi2i ph ps ch ch or4 bitr3i)

#  Theorem *2.45 of [bib/WhiteheadRussell] p. 106. 
## <title> Eliminate a Disjunct </title>
thm (pm2.45 () () (-> (-. (\/ ph ps)) (-. ph)) ph ps orc con3i)

#  Theorem *2.46 of [bib/WhiteheadRussell] p. 106. 
## <title> Eliminate a Disjunct </title>
thm (pm2.46 () () (-> (-. (\/ ph ps)) (-. ps)) ps ph olc con3i)

#  Theorem *2.47 of [bib/WhiteheadRussell] p. 107. 
thm (pm2.47 () () (-> (-. (\/ ph ps)) (\/ (-. ph) ps)) ph ps pm2.45 ps orcd)

#  Theorem *2.48 of [bib/WhiteheadRussell] p. 107. 
thm (pm2.48 () () (-> (-. (\/ ph ps)) (\/ ph (-. ps))) ph ps pm2.46 ph olcd)

#  Theorem *2.49 of [bib/WhiteheadRussell] p. 107. 
thm (pm2.49 () () (-> (-. (\/ ph ps)) (\/ (-. ph) (-. ps))) ph ps pm2.46 (-. ph) olcd)

#  Theorem *2.67 of [bib/WhiteheadRussell] p. 107. 
## <title> Eliminate a Disjunct </title>
thm (pm2.67 () () (-> (-> (\/ ph ps) ps) (-> ph ps)) ph ps orc ps imim1i)

#  Join antecedents with conjunction.  Theorem *3.2 of [bib/WhiteheadRussell]
#      p. 111. 
## <title> Join antecedents with conjunction </title>
thm (pm3.2 () () (-> ph (-> ps (/\ ph ps))) ph ps df-an biimpri expi)

#  Join antecedents with conjunction.  Theorem *3.21 of
#      [bib/WhiteheadRussell] p. 111. 
## <title> Join antecedents with conjunction </title>
thm (pm3.21 () () (-> ph (-> ps (/\ ps ph))) ps ph pm3.2 com12)

#  Theorem *3.37 (Transp) of [bib/WhiteheadRussell] p. 112. 
thm (pm3.37 () () (-> (-> (/\ ph ps) ch) (-> (/\ ph (-. ch)) (-. ps))) ps ph pm3.21 ch imim1d com12 ph ch iman syl6ib con2d)

## <title> Nested conjunction of antecedents </title>
thm (pm3.43i () () (-> (-> ph ps) (-> (-> ph ch) (-> ph (/\ ps ch)))) ps ch pm3.2 ph imim3i)

## <title> Join two implications </title>
## <table>
##   (-> ph     ps ] ] ) 
##   (-> ph        ] [ ch)
##   (-> ph (/\ ps ] [ ch))
## </table>
thm (jca () (jca.1 (-> ph ps) jca.2 (-> ph ch)) (-> ph (/\ ps ch)) jca.1 jca.2 jc ps ch df-an sylibr)

#  Join three consequents.  (Contributed by Jeff Hankins, 1-Aug-2009.) 
## <title> Join three implications </title>
thm (jca31 () (jca31.1 (-> ph ps) jca31.2 (-> ph ch) jca31.3 (-> ph th)) (-> ph (/\ (/\ ps ch) th)) jca31.1 jca31.2 jca jca31.3 jca)

#  Join three consequents.  (Contributed by FL, 1-Aug-2009.) 
## <title> Join three implications </title>
thm (jca32 () (jca31.1 (-> ph ps) jca31.2 (-> ph ch) jca31.3 (-> ph th)) (-> ph (/\ ps (/\ ch th))) jca31.1 jca31.2 jca31.3 jca jca)

## <title> Replace implication with conjunction </title>
thm (jcai () (jcai.1 (-> ph ps) jcai.2 (-> ph (-> ps ch))) (-> ph (/\ ps ch)) jcai.1 jcai.1 jcai.2 mpd jca)

#  Inference conjoining a theorem to the left of a consequent. 
## <title> Add theorem to the left of a consequent </title>
thm (jctl () (jctl.1 ps) (-> ph (/\ ps ph)) jctl.1 ph a1i ph id jca)

#  Inference conjoining a theorem to the right of a consequent. 
## <title> Add theorem to the right of a consequent </title> 
thm (jctr () (jctr.1 ps) (-> ph (/\ ph ps)) ph id jctr.1 ph a1i jca)

## <title> Add theorem to the left of a consequent </title>
thm (jctil () (jctil.1 (-> ph ps) jctil.2 ch) (-> ph (/\ ch ps)) jctil.2 ph a1i jctil.1 jca)

## <title> Add theorem to the right of a consequent </title>
thm (jctir () (jctir.1 (-> ph ps) jctir.2 ch) (-> ph (/\ ps ch)) jctir.1 jctir.2 ph a1i jca)

## <title> Add antecedent </title>
thm (ancl () () (-> (-> ph ps) (-> ph (/\ ph ps))) ph ps pm3.2 a2i)

## <title> Add antecedent </title>
thm (ancr () () (-> (-> ph ps) (-> ph (/\ ps ph))) ph ps pm3.21 a2i)

#  Deduction conjoining antecedent to left of consequent. 
## <title> Add Antecedent </title>
## <table>
##   (-> ph [        [ ps)
##   (-> ph [ (/\ ph [ ps))
## </table>
thm (ancli () (ancli.1 (-> ph ps)) (-> ph (/\ ph ps)) ph id ancli.1 jca)

#  Deduction conjoining antecedent to right of consequent. 
## <title> Add Antecedent </title>
## <table>
##   (-> ph     [ ps ] )
##   (-> ph (/\ [ ps ] ph))
## </table>
thm (ancri () (ancri.1 (-> ph ps)) (-> ph (/\ ps ph)) ancri.1 ph id jca)

#  Deduction conjoining antecedent to left of consequent in nested
#        implication. 
## <title> Add Antecedent </title>
thm (ancld () (ancld.1 (-> ph (-> ps ch))) (-> ph (-> ps (/\ ps ch))) ancld.1 ps ch ancl syl)

#  Deduction conjoining antecedent to right of consequent in nested
#        implication. 
## <title> Add Antecedent </title>
thm (ancrd () (ancrd.1 (-> ph (-> ps ch))) (-> ph (-> ps (/\ ch ps))) ancrd.1 ps ch ancr syl)

#  Conjoin antecedent to left of consequent in nested implication. 
## <title> Add Antecedent </title>
thm (anc2l () () (-> (-> ph (-> ps ch)) (-> ph (-> ps (/\ ph ch)))) ph ch pm3.2 ps imim2d a2i)

#  Conjoin antecedent to right of consequent in nested implication. 
## <title> Add Antecedent </title>
thm (anc2r () () (-> (-> ph (-> ps ch)) (-> ph (-> ps (/\ ch ph)))) ph ch pm3.21 ps imim2d a2i)

#  Deduction conjoining antecedent to left of consequent in nested
#        implication. 
## <title> Add Antecedent </title>
thm (anc2li () (anc2li.1 (-> ph (-> ps ch))) (-> ph (-> ps (/\ ph ch))) anc2li.1 ph ps ch anc2l ax-mp)

#  Deduction conjoining antecedent to right of consequent in nested
#        implication. 
## <title> Add Antecedent </title>
thm (anc2ri () (anc2ri.1 (-> ph (-> ps ch))) (-> ph (-> ps (/\ ch ph))) anc2ri.1 ph ps ch anc2r ax-mp)

#  Conjunction in terms of disjunction (DeMorgan's law).  Theorem *4.5 of
#      [bib/WhiteheadRussell] p. 120.
## <title> DeMorgan's law </title>
## <summary>
##   <a href="http://en.wikipedia.org/wiki/Augustus_De_Morgan">De Morgan</a>'s law
##   describing conjunction in terms of disjunction. For an alternative form see 
##   <a href="oran">oran</a>.
## </summary>
thm (anor () () (<-> (/\ ph ps) (-. (\/ (-. ph) (-. ps)))) ph ps df-an ph ps pm4.62 notbii bitri)

#  Negated conjunction in terms of disjunction (DeMorgan's law).  Theorem
#      *4.51 of [bib/WhiteheadRussell] p. 120.
## <title> DeMorgan's law </title>
## <summary>
##   <a href="http://en.wikipedia.org/wiki/Augustus_De_Morgan">De Morgan</a>'s law
##   describing conjunction in terms of disjunction. For the non-negated form see 
##   <a href="anor">anor</a>.
## </summary>
thm (ianor () () (<-> (-. (/\ ph ps)) (\/ (-. ph) (-. ps))) ph ps anor notbii (\/ (-. ph) (-. ps)) notnot bitr4i)

#  Negated disjunction in terms of conjunction (DeMorgan's law).  Compare
#      Theorem *4.56 of [bib/WhiteheadRussell] p. 120. 
## <title> DeMorgan's law </title>
## <summary>
##   <a href="http://en.wikipedia.org/wiki/Augustus_De_Morgan">De Morgan</a>'s law
##   describing disjunction in terms of conjunction. For the non-negated form see 
##   <a href="oran">oran</a>.
## </summary>
thm (ioran () () (<-> (-. (\/ ph ps)) (/\ (-. ph) (-. ps))) ph notnot ps notnot orbi12i notbii (-. ph) (-. ps) anor bitr4i)

#  Theorem *4.52 of [bib/WhiteheadRussell] p. 120. 
## <title> Collary of DeMorgan's law </title>
thm (pm4.52 () () (<-> (/\ ph (-. ps)) (-. (\/ (-. ph) ps))) ph (-. ps) anor ps notnot (-. ph) orbi2i notbii bitr4i)

#  Theorem *4.53 of [bib/WhiteheadRussell] p. 120. 
## <title> Collary of DeMorgan's law </title>
thm (pm4.53 () () (<-> (-. (/\ ph (-. ps))) (\/ (-. ph) ps)) ph ps pm4.52 con2bii bicomi)

#  Theorem *4.54 of [bib/WhiteheadRussell] p. 120. 
## <title> Collary of DeMorgan's law </title>
thm (pm4.54 () () (<-> (/\ (-. ph) ps) (-. (\/ ph (-. ps)))) (-. ph) ps anor ph notnot (-. ps) orbi1i notbii bitr4i)

#  Theorem *4.55 of [bib/WhiteheadRussell] p. 120. 
## <title> Collary of DeMorgan's law </title>
thm (pm4.55 () () (<-> (-. (/\ (-. ph) ps)) (\/ ph (-. ps))) ph ps pm4.54 con2bii bicomi)

#  Theorem *4.56 of [bib/WhiteheadRussell] p. 120. 
## <title> Collary of DeMorgan's law </title>
thm (pm4.56 () () (<-> (/\ (-. ph) (-. ps)) (-. (\/ ph ps))) ph ps ioran bicomi)

#  Disjunction in terms of conjunction (DeMorgan's law).  Compare Theorem
#      *4.57 of [bib/WhiteheadRussell] p. 120. 
## <title> DeMorgan's law </title>
## <summary>
##   <a href="http://en.wikipedia.org/wiki/Augustus_De_Morgan">De Morgan</a>'s law
##   describing disjunction in terms of conjunction. For an alternative form see 
##   <a href="anor">anor</a>.
## </summary>
thm (oran () () (<-> (\/ ph ps) (-. (/\ (-. ph) (-. ps)))) (\/ ph ps) notnot ph ps ioran notbii bitri)

#  Theorem *4.57 of [bib/WhiteheadRussell] p. 120. 
## <title> Collary of DeMorgan's law </title>
thm (pm4.57 () () (<-> (-. (/\ (-. ph) (-. ps))) (\/ ph ps)) ph ps oran bicomi)

#  Theorem *3.1 of [bib/WhiteheadRussell] p. 111. 
## <title> Collary of DeMorgan's law </title>
thm (pm3.1 () () (-> (/\ ph ps) (-. (\/ (-. ph) (-. ps)))) ph ps anor biimpi)

#  Theorem *3.11 of [bib/WhiteheadRussell] p. 111. 
## <title> Collary of DeMorgan's law </title>
thm (pm3.11 () () (-> (-. (\/ (-. ph) (-. ps))) (/\ ph ps)) ph ps anor biimpri)

#  Theorem *3.12 of [bib/WhiteheadRussell] p. 111. 
## <title> Both are true or one is false </title>
thm (pm3.12 () () (\/ (\/ (-. ph) (-. ps)) (/\ ph ps)) ph ps pm3.11 orri)

#  Theorem *3.13 of [bib/WhiteheadRussell] p. 111. 
## <title> If both are not true then one is false </title> 
thm (pm3.13 () () (-> (-. (/\ ph ps)) (\/ (-. ph) (-. ps))) ph ps pm3.11 con1i)

#  Theorem *3.14 of [bib/WhiteheadRussell] p. 111. 
## <title> If one is false, then both are not true </title> 
thm (pm3.14 () () (-> (\/ (-. ph) (-. ps)) (-. (/\ ph ps))) ph ps pm3.1 con2i)

#  Elimination of a conjunct.  Theorem *3.26 (Simp) of [bib/WhiteheadRussell]
#      p. 112. 
## <title> 'Remove Right Side of AND' </title>
## <suggest> right('Remove', 'L') </suggest>
thm (pm3.26 () () (-> (/\ ph ps) ph) ph ps df-an ph ps pm3.26im sylbi)

#  Inference eliminating a conjunct.
## <title> 'Remove Right Side of AND' </title>
thm (pm3.26i () (pm3.26i.1 (/\ ph ps)) ph pm3.26i.1 ph ps pm3.26 ax-mp)

#  Deduction eliminating a conjunct.
## <title> 'Remove Right Side of AND' </title>
thm (pm3.26d () (pm3.26d.1 (-> ph (/\ ps ch))) (-> ph ps) pm3.26d.1 ps ch pm3.26 syl)

#  Deduction eliminating a conjunct. 
## <title> 'Remove Right Side of AND' </title>
thm (pm3.26bi () (pm3.26bi.1 (<-> ph (/\ ps ch))) (-> ph ps) pm3.26bi.1 biimpi pm3.26d)

#  Elimination of a conjunct.  Theorem *3.27 (Simp) of [bib/WhiteheadRussell]
#      p. 112. 
## <title> Remove Left Side of AND </title>
thm (pm3.27 () () (-> (/\ ph ps) ps) ph ps df-an ph ps pm3.27im sylbi)

#  Inference eliminating a conjunct. 
## <title> Remove Left Side of AND </title>
thm (pm3.27i () (pm3.27i.1 (/\ ph ps)) ps pm3.27i.1 ph ps pm3.27 ax-mp)

#  Deduction eliminating a conjunct. 
## <title> Remove Left Side of AND </title>
thm (pm3.27d () (pm3.27d.1 (-> ph (/\ ps ch))) (-> ph ch) pm3.27d.1 ps ch pm3.27 syl)

#  Deduction eliminating a conjunct. 
## <title> Remove Left Side of AND </title>
thm (pm3.27bi () (pm3.27bi.1 (<-> ph (/\ ps ch))) (-> ph ch) pm3.27bi.1 biimpi pm3.27d)

#  Theorem *3.41 of [bib/WhiteheadRussell] p. 113. 
## <title> 'Add to Antecedent' </title>
thm (pm3.41 () () (-> (-> ph ch) (-> (/\ ph ps) ch)) ph ps pm3.26 ch imim1i)

#  Theorem *3.42 of [bib/WhiteheadRussell] p. 113. 
## <title> 'Add to Antecedent' </title>
thm (pm3.42 () () (-> (-> ps ch) (-> (/\ ph ps) ch)) ph ps pm3.27 ch imim1i)

#  Conjoin antecedent to left of consequent.  Theorem *4.7 of
#      [bib/WhiteheadRussell] p. 120. 
## <title> 'Add Antecedent as consequent' </title>
thm (anclb () () (<-> (-> ph ps) (-> ph (/\ ph ps))) ph ps ancl ph ps pm3.27 ph imim2i impbii)

#  Conjoin antecedent to right of consequent. 
## <title> 'Add Antecedent as consequent' </title>
thm (ancrb () () (<-> (-> ph ps) (-> ph (/\ ps ph))) ph ps ancr ps ph pm3.26 ph imim2i impbii)

#  Conjunction implies implication.  Theorem *3.4 of [bib/WhiteheadRussell]
#      p. 113. 
## <title> Conjunction implies implication </title>
thm (pm3.4 () () (-> (/\ ph ps) (-> ph ps)) ph ps pm3.27 ph a1d)

#  Conjunction with implication.  Compare Theorem *4.45 of
#      [bib/WhiteheadRussell] p. 119. 
## <title> Conjunction with implication </title>
thm (pm4.45im () () (<-> ph (/\ ph (-> ps ph))) ph ps ax-1 ancli ph (-> ps ph) pm3.26 impbii)

#  Conjoin antecedents and consequents of two premises. 
## <title> Join antecedents and consequents </title>
thm (anim12i () (anim12i.1 (-> ph ps) anim12i.2 (-> ch th)) (-> (/\ ph ch) (/\ ps th)) ph ch pm3.26 anim12i.1 syl ph ch pm3.27 anim12i.2 syl jca)

#  Introduce conjunct to both sides of an implication.
## <title> Introduce conjunct to both sides </title> 
thm (anim1i () (anim1i.1 (-> ph ps)) (-> (/\ ph ch) (/\ ps ch)) anim1i.1 ch id anim12i)

#  Introduce conjunct to both sides of an implication.
## <title> Introduce conjunct to both sides </title> 
thm (anim2i () (anim1i.1 (-> ph ps)) (-> (/\ ch ph) (/\ ch ps)) ch id anim1i.1 anim12i)

#  Disjoin antecedents and consequents of two premises. 
## <title> Join antecedents and consequents </title>
thm (orim12i () (orim12i.1 (-> ph ps) orim12i.2 (-> ch th)) (-> (\/ ph ch) (\/ ps th)) orim12i.1 con3i orim12i.2 con3i anim12i con3i ph ch oran ps th oran 3imtr4i)

#  Introduce disjunct to both sides of an implication.
## <title> Introduce disjunct to both sides </title> 
thm (orim1i () (orim1i.1 (-> ph ps)) (-> (\/ ph ch) (\/ ps ch)) orim1i.1 ch id orim12i)

#  Introduce disjunct to both sides of an implication.
## <title> Introduce disjunct to both sides </title> 
thm (orim2i () (orim1i.1 (-> ph ps)) (-> (\/ ch ph) (\/ ch ps)) ch id orim1i.1 orim12i)

#  Theorem *2.3 of [bib/WhiteheadRussell] p. 104. 
thm (pm2.3 () () (-> (\/ ph (\/ ps ch)) (\/ ph (\/ ch ps))) ps ch pm1.4 ph orim2i)

#  Disjunction of antecedents.  Compare Theorem *3.44 of
#      [bib/WhiteheadRussell] p. 113. 
## <title> Disjunction of antecedents </title>
thm (jao () () (-> (-> ph ps) (-> (-> ch ps) (-> (\/ ph ch) ps))) ph ps con3 (-. ps) (-. ph) (-. ch) pm3.43i ps (/\ (-. ph) (-. ch)) con1 syl6 ph ch oran syl7ib ch ps con3 syl5 syl)

#  Inference disjoining the antecedents of two implications. 
## <title> Join two implications </title>
## <table>
##   (->     ph ] ]    ]   ps)
##   (->        [ [ ch ]   ps)
##   (-> (\/ ph ] [ ch ] ) ps)
## </table>
thm (jaoi () (jaoi.1 (-> ph ps) jaoi.2 (-> ch ps)) (-> (\/ ph ch) ps) jaoi.1 jaoi.2 ph ps ch jao mp2)

#  Theorem *2.41 of [bib/WhiteheadRussell] p. 106. 
## <title> Remove Repeated Disjunct </title>
thm (pm2.41 () () (-> (\/ ps (\/ ph ps)) (\/ ph ps)) ps ph olc (\/ ph ps) id jaoi)

#  Theorem *2.42 of [bib/WhiteheadRussell] p. 106. 
## <title> Remove Disjunct </title>
thm (pm2.42 () () (-> (\/ (-. ph) (-> ph ps)) (-> ph ps)) ph ps pm2.21 (-> ph ps) id jaoi)

#  Theorem *2.4 of [bib/WhiteheadRussell] p. 106. 
## <title> Remove Repeated Disjunct </title>
thm (pm2.4 () () (-> (\/ ph (\/ ph ps)) (\/ ph ps)) ph ps orc (\/ ph ps) id jaoi)

#  Theorem *4.44 of [bib/WhiteheadRussell] p. 119. 
## <title> Extra Conjunct </title>
## <suggest> left('Simplify', '∨') </suggest>
thm (pm4.44 () () (<-> ph (\/ ph (/\ ph ps))) ph (/\ ph ps) orc ph id ph ps pm3.26 jaoi impbii)

#  Theorem *5.63 of [bib/WhiteheadRussell] p. 125. 
thm (pm5.63 () () (<-> (\/ ph ps) (\/ ph (/\ (-. ph) ps))) ph ps pm2.53 ancld orrd ph ps pm2.24 (-. ph) ps pm3.4 jaoi orrd impbii)

#  Import-export theorem.  Part of Theorem *4.87 of [bib/WhiteheadRussell]
#      p. 122. 
## <title> Import-Export Theorem </title>
## <suggest> left('Equivalence', '∧→') right('Equivalence', '→→') </suggest>
thm (impexp () () (<-> (-> (/\ ph ps) ch) (-> ph (-> ps ch))) ph ps df-an ch imbi1i ph ps ch expt ph ps ch impt impbii bitri)

#  Theorem *3.3 (Exp) of [bib/WhiteheadRussell] p. 112. 
## <title> Export Theorem Collary </title>
thm (pm3.3 () () (-> (-> (/\ ph ps) ch) (-> ph (-> ps ch))) ph ps ch impexp biimpi)

#  Theorem *3.31 (Imp) of [bib/WhiteheadRussell] p. 112. 
## <title> Import Theorem </title>
thm (pm3.31 () () (-> (-> ph (-> ps ch)) (-> (/\ ph ps) ch)) ph ps ch impexp biimpri)

#  Importation inference.  (The proof was shortened by Eric Schmidt,
#        22-Dec-2006.) 
## <title> Import Theorem </title>
thm (imp () (imp.1 (-> ph (-> ps ch))) (-> (/\ ph ps) ch) imp.1 ph ps ch impexp mpbir)

#  Importation inference with commuted antecedents. 
## <title> Import & Commute </title>
thm (impcom () (imp.1 (-> ph (-> ps ch))) (-> (/\ ps ph) ch) imp.1 com12 imp)

#  Theorem *4.14 of [bib/WhiteheadRussell] p. 117. 
thm (pm4.14 () () (<-> (-> (/\ ph ps) ch) (-> (/\ ph (-. ch)) (-. ps))) ph ps ch impexp ph ps ch bi2.04 bitri ph ch iman ps imbi2i ps (/\ ph (-. ch)) con2b 3bitri)

#  Theorem *4.15 of [bib/WhiteheadRussell] p. 117. 
thm (pm4.15 () () (<-> (-> (/\ ph ps) (-. ch)) (-> (/\ ps ch) (-. ph))) ph ps (-. ch) impexp ps ch imnan ph imbi2i ph (/\ ps ch) con2b 3bitri)

#  Theorem *4.78 of [bib/WhiteheadRussell] p. 121. 
## <title> Distributive Property </title>
## <suggest> right('Distribute', '-R') </suggest>
thm (pm4.78 () () (<-> (\/ (-> ph ps) (-> ph ch)) (-> ph (\/ ps ch))) ph (-. ps) (-> ph ch) impexp ph ps annim (-> ph ch) imbi1i (-. ps) ph ch bi2.04 ph imbi2i ph (-> (-. ps) ch) pm5.4 bitri 3bitr3i (-> ph ps) (-> ph ch) df-or ps ch df-or ph imbi2i 3bitr4i)

#  Theorem *4.79 of [bib/WhiteheadRussell] p. 121. 
## <title> Distributive Property </title>
## <suggest> right('Distribute', '-L') </suggest>
thm (pm4.79 () () (<-> (\/ (-> ps ph) (-> ch ph)) (-> (/\ ps ch) ph)) (-. ph) (-. ps) (-. ch) pm4.78 ps ch ianor (-. ph) imbi2i bitr4i ps ph con34b ch ph con34b orbi12i (/\ ps ch) ph con34b 3bitr4i)

#  Theorem *4.87 of [bib/WhiteheadRussell] p. 122.  (The proof was shortened by
#      Eric Schmidt, 26-Oct-2006.) 
## <title> Import-Export Theorem </title>
thm (pm4.87 () () (/\ (/\ (<-> (-> (/\ ph ps) ch) (-> ph (-> ps ch))) (<-> (-> ph (-> ps ch)) (-> ps (-> ph ch)))) (<-> (-> ps (-> ph ch)) (-> (/\ ps ph) ch))) ph ps ch impexp ph ps ch bi2.04 pm3.2i ps ph ch impexp bicomi pm3.2i)

#  Theorem *3.33 (Syll) of [bib/WhiteheadRussell] p. 112. 
## <title> Syllogism </title>
thm (pm3.33 () () (-> (/\ (-> ph ps) (-> ps ch)) (-> ph ch)) ph ps ch imim1 imp)

#  Theorem *3.34 (Syll) of [bib/WhiteheadRussell] p. 112. 
## <title> Syllogism </title>
thm (pm3.34 () () (-> (/\ (-> ps ch) (-> ph ps)) (-> ph ch)) ps ch ph imim2 imp)

#  Conjunctive detachment.  Theorem *3.35 of [bib/WhiteheadRussell] p. 112. 
## <title> Conjunctive detachment </title>
## <suggest> right('Simplify', '→') </suggest>
thm (pm3.35 () () (-> (/\ ph (-> ph ps)) ps) ph ps pm2.27 imp)

#  Theorem *5.31 of [bib/WhiteheadRussell] p. 125. 
thm (pm5.31 () () (-> (/\ ch (-> ph ps)) (-> ph (/\ ps ch))) ch ps pm3.21 ph imim2d imp)

## <title> Import Deduction </title>
thm (imp3a () (imp3.1 (-> ph (-> ps (-> ch th)))) (-> ph (-> (/\ ps ch) th)) imp3.1 ps ch th impexp sylibr)

## <title> Import Inference </title>
thm (imp31 () (imp3.1 (-> ph (-> ps (-> ch th)))) (-> (/\ (/\ ph ps) ch) th) imp3.1 imp imp)

## <title> Import Inference </title>
thm (imp32 () (imp3.1 (-> ph (-> ps (-> ch th)))) (-> (/\ ph (/\ ps ch)) th) imp3.1 imp3a imp)

## <title> Import Inference </title>
thm (imp4a () (imp4.1 (-> ph (-> ps (-> ch (-> th ta))))) (-> ph (-> ps (-> (/\ ch th) ta))) imp4.1 ch th ta impexp syl6ibr)

## <title> Import Inference </title>
thm (imp4b () (imp4.1 (-> ph (-> ps (-> ch (-> th ta))))) (-> (/\ ph ps) (-> (/\ ch th) ta)) imp4.1 imp4a imp)

## <title> Import Inference </title>
thm (imp4c () (imp4.1 (-> ph (-> ps (-> ch (-> th ta))))) (-> ph (-> (/\ (/\ ps ch) th) ta)) imp4.1 imp3a imp3a)

## <title> Import Inference </title>
thm (imp4d () (imp4.1 (-> ph (-> ps (-> ch (-> th ta))))) (-> ph (-> (/\ ps (/\ ch th)) ta)) imp4.1 imp4a imp3a)

## <title> Import Inference </title>
thm (imp41 () (imp4.1 (-> ph (-> ps (-> ch (-> th ta))))) (-> (/\ (/\ (/\ ph ps) ch) th) ta) imp4.1 imp imp31)

## <title> Import Inference </title>
thm (imp42 () (imp4.1 (-> ph (-> ps (-> ch (-> th ta))))) (-> (/\ (/\ ph (/\ ps ch)) th) ta) imp4.1 imp32 imp)

## <title> Import Inference </title>
thm (imp43 () (imp4.1 (-> ph (-> ps (-> ch (-> th ta))))) (-> (/\ (/\ ph ps) (/\ ch th)) ta) imp4.1 imp4b imp)

## <title> Import Inference </title>
thm (imp44 () (imp4.1 (-> ph (-> ps (-> ch (-> th ta))))) (-> (/\ ph (/\ (/\ ps ch) th)) ta) imp4.1 imp4c imp)

## <title> Import Inference </title>
thm (imp45 () (imp4.1 (-> ph (-> ps (-> ch (-> th ta))))) (-> (/\ ph (/\ ps (/\ ch th))) ta) imp4.1 imp4d imp)

## <title> Export Inference </title>
thm (ex () (exp.1 (-> (/\ ph ps) ch)) (-> ph (-> ps ch)) exp.1 ph ps ch impexp mpbi)

## <title> Export & Commute </title>
thm (expcom () (exp.1 (-> (/\ ph ps) ch)) (-> ps (-> ph ch)) exp.1 ex com12)

## <title> Export & Import </title>
thm (expimpd () (expimpd.1 (-> (/\ ph ps) (-> ch th))) (-> ph (-> (/\ ps ch) th)) expimpd.1 ex imp3a)

## <title> Export Deduction </title>
thm (exp3a () (exp3a.1 (-> ph (-> (/\ ps ch) th))) (-> ph (-> ps (-> ch th))) exp3a.1 ps ch th impexp sylib)

## <title> Export & Import </title>
thm (expdimp () (exp3a.1 (-> ph (-> (/\ ps ch) th))) (-> (/\ ph ps) (-> ch th)) exp3a.1 exp3a imp)

## <title> Export Inference </title>
thm (exp31 () (exp31.1 (-> (/\ (/\ ph ps) ch) th)) (-> ph (-> ps (-> ch th))) exp31.1 ex ex)

## <title> Export Inference </title>
thm (exp32 () (exp32.1 (-> (/\ ph (/\ ps ch)) th)) (-> ph (-> ps (-> ch th))) exp32.1 ex exp3a)

## <title> Export Inference </title>
thm (exp4a () (exp4a.1 (-> ph (-> ps (-> (/\ ch th) ta)))) (-> ph (-> ps (-> ch (-> th ta)))) exp4a.1 ch th ta impexp syl6ib)

## <title> Export Inference </title>
thm (exp4b () (exp4b.1 (-> (/\ ph ps) (-> (/\ ch th) ta))) (-> ph (-> ps (-> ch (-> th ta)))) exp4b.1 exp3a ex)

## <title> Export Inference </title>
thm (exp4c () (exp4c.1 (-> ph (-> (/\ (/\ ps ch) th) ta))) (-> ph (-> ps (-> ch (-> th ta)))) exp4c.1 exp3a exp3a)

## <title> Export Inference </title>
thm (exp4d () (exp4d.1 (-> ph (-> (/\ ps (/\ ch th)) ta))) (-> ph (-> ps (-> ch (-> th ta)))) exp4d.1 exp3a exp4a)

## <title> Export Inference </title>
thm (exp41 () (exp41.1 (-> (/\ (/\ (/\ ph ps) ch) th) ta)) (-> ph (-> ps (-> ch (-> th ta)))) exp41.1 ex exp31)

## <title> Export Inference </title>
thm (exp42 () (exp42.1 (-> (/\ (/\ ph (/\ ps ch)) th) ta)) (-> ph (-> ps (-> ch (-> th ta)))) exp42.1 exp31 exp3a)

## <title> Export Inference </title>
thm (exp43 () (exp43.1 (-> (/\ (/\ ph ps) (/\ ch th)) ta)) (-> ph (-> ps (-> ch (-> th ta)))) exp43.1 ex exp4b)

## <title> Export Inference </title>
thm (exp44 () (exp44.1 (-> (/\ ph (/\ (/\ ps ch) th)) ta)) (-> ph (-> ps (-> ch (-> th ta)))) exp44.1 exp32 exp3a)

## <title> Export Inference </title>
thm (exp45 () (exp45.1 (-> (/\ ph (/\ ps (/\ ch th))) ta)) (-> ph (-> ps (-> ch (-> th ta)))) exp45.1 exp32 exp4a)

#  Importation with conjunction in consequent. 
## <title> Import Inference </title>
thm (impac () (impac.1 (-> ph (-> ps ch))) (-> (/\ ph ps) (/\ ch ps)) impac.1 ancrd imp)

## <title> Add Conjunct </title>
## <table>
##   (->        [ ph  [ ps)
##   (-> (/\ ch [ ph) [ ps)
## </table>
thm (adantl () (adantl.1 (-> ph ps)) (-> (/\ ch ph) ps) adantl.1 ch a1i imp)

## <title> Add Conjunct </title>
## <table>
##   (->     ph ] [    [   [ ps)
##   (-> (/\ ph ] [ ch ] ) [ ps)
## </table>
thm (adantr () (adantr.1 (-> ph ps)) (-> (/\ ph ch) ps) adantr.1 ch a1d imp)

#  Deduction adding a conjunct to the left of an antecedent. 
## <title> Add Conjunct </title>
thm (adantld () (adantld.1 (-> ph (-> ps ch))) (-> ph (-> (/\ th ps) ch)) adantld.1 th a1d imp3a)

#  Deduction adding a conjunct to the right of an antecedent. 
## <title> Add Conjunct </title>
thm (adantrd () (adantrd.1 (-> ph (-> ps ch))) (-> ph (-> (/\ ps th) ch)) adantrd.1 ps th pm3.26 syl5)

#  Deduction adding a conjunct to antecedent. 
## <title> Add Conjunct </title>
thm (adantll () (adant2.1 (-> (/\ ph ps) ch)) (-> (/\ (/\ th ph) ps) ch) adant2.1 ex th adantl imp)

#  Deduction adding a conjunct to antecedent. 
## <title> Add Conjunct </title>
thm (adantlr () (adant2.1 (-> (/\ ph ps) ch)) (-> (/\ (/\ ph th) ps) ch) adant2.1 ex th adantr imp)

#  Deduction adding a conjunct to antecedent. 
## <title> Add Conjunct </title>
thm (adantrl () (adant2.1 (-> (/\ ph ps) ch)) (-> (/\ ph (/\ th ps)) ch) adant2.1 ex th adantld imp)

#  Deduction adding a conjunct to antecedent. 
## <title> Add Conjunct </title>
thm (adantrr () (adant2.1 (-> (/\ ph ps) ch)) (-> (/\ ph (/\ ps th)) ch) adant2.1 ex th adantrd imp)

#  Deduction adding a conjunct to antecedent. 
## <title> Add Conjunct </title>
thm (adantlll () (adantl2.1 (-> (/\ (/\ ph ps) ch) th)) (-> (/\ (/\ (/\ ta ph) ps) ch) th) adantl2.1 exp31 ta a1i imp41)

#  Deduction adding a conjunct to antecedent. 
## <title> Add Conjunct </title>
thm (adantllr () (adantl2.1 (-> (/\ (/\ ph ps) ch) th)) (-> (/\ (/\ (/\ ph ta) ps) ch) th) adantl2.1 exp31 ta a1d imp41)

#  Deduction adding a conjunct to antecedent. 
## <title> Add Conjunct </title>
thm (adantlrl () (adantl2.1 (-> (/\ (/\ ph ps) ch) th)) (-> (/\ (/\ ph (/\ ta ps)) ch) th) adantl2.1 exp31 ta a1d imp42)

#  Deduction adding a conjunct to antecedent. 
## <title> Add Conjunct </title>
thm (adantlrr () (adantl2.1 (-> (/\ (/\ ph ps) ch) th)) (-> (/\ (/\ ph (/\ ps ta)) ch) th) adantl2.1 exp31 ta a1dd imp42)

#  Deduction adding a conjunct to antecedent. 
## <title> Add Conjunct </title>
thm (adantrll () (adantr2.1 (-> (/\ ph (/\ ps ch)) th)) (-> (/\ ph (/\ (/\ ta ps) ch)) th) adantr2.1 exp32 ta a1d imp44)

#  Deduction adding a conjunct to antecedent. 
## <title> Add Conjunct </title>
thm (adantrlr () (adantr2.1 (-> (/\ ph (/\ ps ch)) th)) (-> (/\ ph (/\ (/\ ps ta) ch)) th) adantr2.1 exp32 ta a1dd imp44)

#  Deduction adding a conjunct to antecedent. 
## <title> Add Conjunct </title>
thm (adantrrl () (adantr2.1 (-> (/\ ph (/\ ps ch)) th)) (-> (/\ ph (/\ ps (/\ ta ch))) th) adantr2.1 exp32 ta a1dd imp45)

#  Deduction adding a conjunct to antecedent. 
## <title> Add Conjunct </title>
thm (adantrrr () (adantr2.1 (-> (/\ ph (/\ ps ch)) th)) (-> (/\ ph (/\ ps (/\ ch ta))) th) adantr2.1 ta a1d exp32 imp45)

#  Deduction adding conjuncts to antecedent. 
## <title> Add Conjuncts </title>
thm (ad2antrr () (ad2ant.1 (-> ph ps)) (-> (/\ (/\ ph ch) th) ps) ad2ant.1 ch adantr th adantr)

#  Deduction adding conjuncts to antecedent. 
## <title> Add Conjuncts </title>
thm (ad2antlr () (ad2ant.1 (-> ph ps)) (-> (/\ (/\ ch ph) th) ps) ad2ant.1 ch adantl th adantr)

#  Deduction adding conjuncts to antecedent. 
## <title> Add Conjuncts </title>
thm (ad2antrl () (ad2ant.1 (-> ph ps)) (-> (/\ ch (/\ ph th)) ps) ad2ant.1 th adantr ch adantl)

#  Deduction adding conjuncts to antecedent. 
## <title> Add Conjuncts </title>
thm (ad2antll () (ad2ant.1 (-> ph ps)) (-> (/\ ch (/\ th ph)) ps) ad2ant.1 th adantl ch adantl)

#  Deduction adding two conjuncts to antecedent. 
## <title> Add Conjuncts </title>
thm (ad2ant2l () (ad2ant2.1 (-> (/\ ph ps) ch)) (-> (/\ (/\ th ph) (/\ ta ps)) ch) ad2ant2.1 ta adantrl th adantll)

#  Deduction adding two conjuncts to antecedent. 
## <title> Add Conjuncts </title>
thm (ad2ant2r () (ad2ant2.1 (-> (/\ ph ps) ch)) (-> (/\ (/\ ph th) (/\ ps ta)) ch) ad2ant2.1 ta adantrr th adantlr)

#  Deduction adding two conjuncts to antecedent. 
## <title> Add Conjuncts </title>
thm (ad2ant2lr () (ad2ant2.1 (-> (/\ ph ps) ch)) (-> (/\ (/\ th ph) (/\ ps ta)) ch) ad2ant2.1 ta adantrr th adantll)

#  Deduction adding two conjuncts to antecedent. 
## <title> Add Conjuncts </title>
thm (ad2ant2rl () (ad2ant2.1 (-> (/\ ph ps) ch)) (-> (/\ (/\ ph th) (/\ ta ps)) ch) ad2ant2.1 ta adantrl th adantlr)

## <title> Simplify: Remove two conjuncts </title>
thm (simpll () () (-> (/\ (/\ ph ps) ch) ph) ph id ps ch ad2antrr)

## <title> Simplify: Remove two conjuncts </title>
thm (simplr () () (-> (/\ (/\ ph ps) ch) ps) ps id ph ch ad2antlr)

## <title> Simplify: Remove two conjuncts </title>
thm (simprl () () (-> (/\ ph (/\ ps ch)) ps) ps id ph ch ad2antrl)

## <title> Simplify: Remove two conjuncts </title>
thm (simprr () () (-> (/\ ph (/\ ps ch)) ch) ch id ph ps ad2antll)

## <title> Simplify: Remove three conjuncts </title>
thm (simplll () () (-> (/\ (/\ (/\ ph ps) ch) th) ph) ph ps pm3.26 ch th ad2antrr)

## <title> Simplify: Remove three conjuncts </title>
thm (simpllr () () (-> (/\ (/\ (/\ ph ps) ch) th) ps) ph ps pm3.27 ch th ad2antrr)

## <title> Simplify: Remove three conjuncts </title>
thm (simplrl () () (-> (/\ (/\ ph (/\ ps ch)) th) ps) ps ch pm3.26 ph th ad2antlr)

## <title> Simplify: Remove three conjuncts </title>
thm (simplrr () () (-> (/\ (/\ ph (/\ ps ch)) th) ch) ps ch pm3.27 ph th ad2antlr)

## <title> Simplify: Remove three conjuncts </title>
thm (simprll () () (-> (/\ ph (/\ (/\ ps ch) th)) ps) ps ch pm3.26 ph th ad2antrl)

## <title> Simplify: Remove three conjuncts </title>
thm (simprlr () () (-> (/\ ph (/\ (/\ ps ch) th)) ch) ps ch pm3.27 ph th ad2antrl)

## <title> Simplify: Remove three conjuncts </title>
thm (simprrl () () (-> (/\ ph (/\ ps (/\ ch th))) ch) ch th pm3.26 ph ps ad2antll)

## <title> Simplify: Remove three conjuncts </title>
thm (simprrr () () (-> (/\ ph (/\ ps (/\ ch th))) th) ch th pm3.27 ph ps ad2antll)

## <title> Inference from logical equivalence </title>
thm (biimpa () (biimpa.1 (-> ph (<-> ps ch))) (-> (/\ ph ps) ch) biimpa.1 biimpd imp)

## <title> Inference from logical equivalence </title>
thm (biimpar () (biimpa.1 (-> ph (<-> ps ch))) (-> (/\ ph ch) ps) biimpa.1 biimprd imp)

## <title> Inference from logical equivalence </title>
thm (biimpac () (biimpa.1 (-> ph (<-> ps ch))) (-> (/\ ps ph) ch) biimpa.1 biimpcd imp)

## <title> Inference from logical equivalence </title>
thm (biimparc () (biimpa.1 (-> ph (<-> ps ch))) (-> (/\ ch ph) ps) biimpa.1 biimprcd imp)

## <title> Deduction eliminating a conjunct </title>
thm (pm3.26bda () (pm3.26bda.1 (-> ph (<-> ps (/\ ch th)))) (-> (/\ ph ps) ch) pm3.26bda.1 biimpa pm3.26d)

## <title> Deduction eliminating a conjunct </title>
thm (pm3.27bda () (pm3.26bda.1 (-> ph (<-> ps (/\ ch th)))) (-> (/\ ph ps) th) pm3.26bda.1 biimpa pm3.27d)

#  Disjunction of antecedents.  Compare Theorem *4.77 of
#      [bib/WhiteheadRussell] p. 121. 
## <title> Distributive Property </title>
## <suggest> left('Distribute', '→') right('Distribute', '∧') </suggest>
thm (jaob () () (<-> (-> (\/ ph ch) ps) (/\ (-> ph ps) (-> ch ps))) ph ch orc ps imim1i ch ph olc ps imim1i jca ph ps ch jao imp impbii)

#  Theorem *4.77 of [bib/WhiteheadRussell] p. 121. 
## <title> Distributive Property </title>
## <suggest> right('Distribute', '∧') left('Distribute', '→') </suggest>
thm (pm4.77 () () (<-> (/\ (-> ps ph) (-> ch ph)) (-> (\/ ps ch) ph)) ps ch ph jaob bicomi)

## <title> Join Antecedents </title>
thm (jaod () (jaod.1 (-> ph (-> ps ch)) jaod.2 (-> ph (-> th ch))) (-> ph (-> (\/ ps th) ch)) ps ch th jao jaod.1 jaod.2 sylc)

## <title> Join Antecedents </title>
thm (jaoian () (jaoian.1 (-> (/\ ph ps) ch) jaoian.2 (-> (/\ th ps) ch)) (-> (/\ (\/ ph th) ps) ch) jaoian.1 ex jaoian.2 ex jaoi imp)

#  Deduction disjoining the antecedents of two implications. 
## <title> Join Antecedents </title>
thm (jaodan () (jaodan.1 (-> (/\ ph ps) ch) jaodan.2 (-> (/\ ph th) ch)) (-> (/\ ph (\/ ps th)) ch) jaodan.1 ex jaodan.2 ex jaod imp)

#  Inference conjoining and disjoining the antecedents of two
#        implications. 
thm (jaao () (jaao.1 (-> ph (-> ps ch)) jaao.2 (-> th (-> ta ch))) (-> (/\ ph th) (-> (\/ ps ta) ch)) jaao.1 th adantr jaao.2 ph adantl jaod)

#  Inference disjoining and conjoining the antecedents of two
#        implications.  (Contributed by Stefan Allan, 1-Nov-2008.) 
## <title> Join Antecedents </title>
thm (jaoa () (jaao.1 (-> ph (-> ps ch)) jaao.2 (-> th (-> ta ch))) (-> (\/ ph th) (-> (/\ ps ta) ch)) jaao.1 ta adantrd jaao.2 ps adantld jaoi)

#  Theorem *2.63 of [bib/WhiteheadRussell] p. 107. 
thm (pm2.63 () () (-> (\/ ph ps) (-> (\/ (-. ph) ps) ps)) ph ps pm2.53 (\/ ph ps) ps idd jaod)

#  Theorem *2.64 of [bib/WhiteheadRussell] p. 107. 
thm (pm2.64 () () (-> (\/ ph ps) (-> (\/ ph (-. ps)) ph)) ph (\/ ph ps) ax-1 ps ph orel2 jaoi com12)

#  Theorem *3.44 of [bib/WhiteheadRussell] p. 113. 
thm (pm3.44 () () (-> (/\ (-> ps ph) (-> ch ph)) (-> (\/ ps ch) ph)) ps ch ph jaob biimpri)

#  Theorem *4.43 of [bib/WhiteheadRussell] p. 119. 
## <title> Excluded Middle </title>
## <suggest> left('Simplify', '∧') </suggest>
thm (pm4.43 () () (<-> ph (/\ (\/ ph ps) (\/ ph (-. ps)))) ph ps orc ph (-. ps) orc jca ph ps pm2.64 imp impbii)

## <title> Conjunction is Idempotent </title>
## <suggest> right('Simplify', '∧') </suggest>
thm (anidm () () (<-> (/\ ph ph) ph) ph ph pm3.26 ph ph pm3.2 pm2.43i impbii)

#  Theorem *4.24 of [bib/WhiteheadRussell] p. 117. 
## <title> Conjunction is Idempotent </title>
thm (pm4.24 () () (<-> ph (/\ ph ph)) ph anidm bicomi)

## <title> Conjunction is Idempotent </title>
## <table>
##   (-> (/\ <r> ph [ <r> ph ) ps)
##              (-> [ <r> ph   ps)
## </table>
thm (anidms () (anidms.1 (-> (/\ ph ph) ps)) (-> ph ps) anidms.1 ex pm2.43i)

## <title> Conjunction is Idempotent </title>
thm (anidmdbi () () (<-> (-> ph (/\ ps ps)) (-> ph ps)) ps anidm ph imbi2i)

## <title> Commute Conjunction </title>
## <suggest> right('Commute', '∧') </suggest>
thm (ancom () () (<-> (/\ ph ps) (/\ ps ph)) ph ps pm3.27 ph ps pm3.26 jca ps ph pm3.27 ps ph pm3.26 jca impbii)

#  Commutation of conjuncts in consequent.  (Contributed by Jeff Hankins,
#        14-Aug-2009.)  
## <title> Commute Conjunction </title>
thm (ancomd () (ancomd.1 (-> ph (/\ ps ch))) (-> ph (/\ ch ps)) ancomd.1 ps ch ancom sylib)

#  Inference commuting conjunction in antecedent.  //Notational convention//:
#        We sometimes suffix with "s" the label of an inference that manipulates
#        an antecedent, leaving the consequent unchanged.  The "s" means that the
#        inference eliminates the need for a syllogism ([[syl]]) -type inference
#        in a proof. 
## <title> Commute Conjunction </title>
thm (ancoms () (ancoms.1 (-> (/\ ph ps) ch)) (-> (/\ ps ph) ch) ps ph ancom ancoms.1 sylbi)

#  Deduction commuting conjunction in antecedent. 
## <title> Commute Conjunction </title>
thm (ancomsd () (ancomsd.1 (-> ph (-> (/\ ps ch) th))) (-> ph (-> (/\ ch ps) th)) ancomsd.1 ch ps ancom syl5ib)

#  Theorem *3.22 of [bib/WhiteheadRussell] p. 111. 
## <title> Commute Conjunction </title>
thm (pm3.22 () () (-> (/\ ph ps) (/\ ps ph)) ph ps ancom biimpi)

#  Associative law for conjunction.  Theorem *4.32 of [bib/WhiteheadRussell]
#      p. 118. 
## <title> Associative Property </title>
## <suggest> right('Associate', 'R') left('Associate', 'L') </suggest>
thm (anass () () (<-> (/\ (/\ ph ps) ch) (/\ ph (/\ ps ch))) ph ps (-. ch) impexp ps ch imnan ph imbi2i bitri notbii (/\ ph ps) ch df-an ph (/\ ps ch) df-an 3bitr4i)

#  Associative law for conjunction applied to antecedent (eliminates
#        syllogism). 
## <title> Associative Property </title>
thm (anasss () (anasss.1 (-> (/\ (/\ ph ps) ch) th)) (-> (/\ ph (/\ ps ch)) th) anasss.1 exp31 imp32)

#  Associative law for conjunction applied to antecedent (eliminates
#        syllogism). 
## <title> Associative Property </title>
thm (anassrs () (anassrs.1 (-> (/\ ph (/\ ps ch)) th)) (-> (/\ (/\ ph ps) ch) th) anassrs.1 exp32 imp31)

#  Distribution of implication with conjunction. 
## <title> Distributive Property </title>
thm (imdistan () () (<-> (-> ph (-> ps ch)) (-> (/\ ph ps) (/\ ph ch))) ph ps ch anc2l imp3a ph ch pm3.27 (/\ ph ps) imim2i exp3a impbii)

#  Distribution of implication with conjunction. 
## <title> Distributive Property </title>
thm (imdistani () (imdistani.1 (-> ph (-> ps ch))) (-> (/\ ph ps) (/\ ph ch)) imdistani.1 anc2li imp)

#  Distribution of implication with conjunction. 
## <title> Distributive Property </title>
thm (imdistanri () (imdistanri.1 (-> ph (-> ps ch))) (-> (/\ ps ph) (/\ ch ph)) imdistanri.1 com12 impac)

#  Distribution of implication with conjunction (deduction rule). 
## <title> Distributive Property </title>
thm (imdistand () (imdistand.1 (-> ph (-> ps (-> ch th)))) (-> ph (-> (/\ ps ch) (/\ ps th))) imdistand.1 ps ch th imdistan sylib)

#  Theorem *5.3 of [bib/WhiteheadRussell] p. 125. 
## <title> Distributive Property </title>
thm (pm5.3 () () (<-> (-> (/\ ph ps) ch) (-> (/\ ph ps) (/\ ph ch))) ph ps ch pm3.3 imdistand ph ch pm3.27 (/\ ph ps) imim2i impbii)

#  Theorem *5.61 of [bib/WhiteheadRussell] p. 125. 
## <title> Eliminate Disjoint </title>
thm (pm5.61 () () (<-> (/\ (\/ ph ps) (-. ps)) (/\ ph (-. ps))) ps ph orel2 imdistanri ph ps orc (-. ps) anim1i impbii)

## <title> Syllogism </title> 
thm (sylan () (sylan.1 (-> (/\ ph ps) ch) sylan.2 (-> th ph)) (-> (/\ th ps) ch) sylan.2 sylan.1 ex syl imp)

## <title> Syllogism </title> 
thm (sylanb () (sylan.1 (-> (/\ ph ps) ch) sylanb.2 (<-> th ph)) (-> (/\ th ps) ch) sylan.1 sylanb.2 biimpi sylan)

## <title> Syllogism </title> 
thm (sylanbr () (sylan.1 (-> (/\ ph ps) ch) sylanbr.2 (<-> ph th)) (-> (/\ th ps) ch) sylan.1 sylanbr.2 biimpri sylan)

## <title> Syllogism </title> 
thm (sylan2 () (sylan.1 (-> (/\ ph ps) ch) sylan2.2 (-> th ps)) (-> (/\ ph th) ch) sylan.1 ex sylan2.2 syl5 imp)

## <title> Syllogism </title> 
thm (sylan2b () (sylan.1 (-> (/\ ph ps) ch) sylan2b.2 (<-> th ps)) (-> (/\ ph th) ch) sylan.1 sylan2b.2 biimpi sylan2)

## <title> Syllogism </title> 
thm (sylan2br () (sylan.1 (-> (/\ ph ps) ch) sylan2br.2 (<-> ps th)) (-> (/\ ph th) ch) sylan.1 sylan2br.2 biimpri sylan2)

## <title> Double Syllogism </title> 
thm (syl2an () (sylan.1 (-> (/\ ph ps) ch) syl2an.2 (-> th ph) syl2an.3 (-> ta ps)) (-> (/\ th ta) ch) sylan.1 syl2an.2 sylan syl2an.3 sylan2)

## <title> Double Syllogism </title> 
thm (syl2anb () (sylan.1 (-> (/\ ph ps) ch) syl2anb.2 (<-> th ph) syl2anb.3 (<-> ta ps)) (-> (/\ th ta) ch) sylan.1 syl2anb.2 sylanb syl2anb.3 sylan2b)

## <title> Double Syllogism </title> 
thm (syl2anbr () (sylan.1 (-> (/\ ph ps) ch) syl2anbr.2 (<-> ph th) syl2anbr.3 (<-> ps ta)) (-> (/\ th ta) ch) sylan.1 syl2anbr.2 sylanbr syl2anbr.3 sylan2br)

## <title> Syllogism </title> 
thm (syland () (syland.1 (-> ph (-> (/\ ps ch) th)) syland.2 (-> ph (-> ta ps))) (-> ph (-> (/\ ta ch) th)) syland.2 syland.1 exp3a syld imp3a)

## <title> Syllogism </title> 
thm (sylan2d () (sylan2d.1 (-> ph (-> (/\ ps ch) th)) sylan2d.2 (-> ph (-> ta ch))) (-> ph (-> (/\ ps ta) th)) sylan2d.1 ancomsd sylan2d.2 syland ancomsd)

## <title> Syllogism </title> 
thm (syl2and () (syl2and.1 (-> ph (-> (/\ ps ch) th)) syl2and.2 (-> ph (-> ta ps)) syl2and.3 (-> ph (-> et ch))) (-> ph (-> (/\ ta et) th)) syl2and.1 syl2and.3 sylan2d syl2and.2 syland)

## <title> Syllogism </title> 
thm (sylanl1 () (sylanl1.1 (-> (/\ (/\ ph ps) ch) th) sylanl1.2 (-> ta ph)) (-> (/\ (/\ ta ps) ch) th) sylanl1.1 sylanl1.2 ps anim1i sylan)

## <title> Syllogism </title> 
thm (sylanl2 () (sylanl2.1 (-> (/\ (/\ ph ps) ch) th) sylanl2.2 (-> ta ps)) (-> (/\ (/\ ph ta) ch) th) sylanl2.1 sylanl2.2 ph anim2i sylan)

## <title> Syllogism </title> 
thm (sylanr1 () (sylanr1.1 (-> (/\ ph (/\ ps ch)) th) sylanr1.2 (-> ta ps)) (-> (/\ ph (/\ ta ch)) th) sylanr1.1 sylanr1.2 ch anim1i sylan2)

## <title> Syllogism </title> 
thm (sylanr2 () (sylanr2.1 (-> (/\ ph (/\ ps ch)) th) sylanr2.2 (-> ta ch)) (-> (/\ ph (/\ ps ta)) th) sylanr2.1 sylanr2.2 ps anim2i sylan2)

## <title> Syllogism </title> 
thm (sylani () (sylani.1 (-> ph (-> (/\ ps ch) th)) sylani.2 (-> ta ps)) (-> ph (-> (/\ ta ch) th)) sylani.1 sylani.2 ph a1i syland)

## <title> Syllogism </title> 
thm (sylan2i () (sylan2i.1 (-> ph (-> (/\ ps ch) th)) sylan2i.2 (-> ta ch)) (-> ph (-> (/\ ps ta) th)) sylan2i.1 sylan2i.2 ph a1i sylan2d)

## <title> Syllogism </title> 
thm (syl2ani () (syl2ani.1 (-> ph (-> (/\ ps ch) th)) syl2ani.2 (-> ta ps) syl2ani.3 (-> et ch)) (-> ph (-> (/\ ta et) th)) syl2ani.1 syl2ani.3 sylan2i syl2ani.2 sylani)

#  A syllogism deduction with conjoined antecents. 
## <title> Syllogism </title> 
thm (syldan () (syldan.1 (-> (/\ ph ps) ch) syldan.2 (-> (/\ ph ch) th)) (-> (/\ ph ps) th) syldan.1 ex syldan.2 ex syld imp)

#  Nested syllogism inference conjoining dissimilar antecedents. 
## <title> Syllogism </title> 
thm (sylan9 () (sylan9.1 (-> ph (-> ps ch)) sylan9.2 (-> th (-> ch ta))) (-> (/\ ph th) (-> ps ta)) sylan9.1 th adantr sylan9.2 ph adantl syld)

#  Nested syllogism inference conjoining dissimilar antecedents. 
## <title> Syllogism </title> 
thm (sylan9r () (sylan9r.1 (-> ph (-> ps ch)) sylan9r.2 (-> th (-> ch ta))) (-> (/\ th ph) (-> ps ta)) sylan9r.1 sylan9r.2 syl9r imp)

#  Modus ponens conjoining dissimilar antecedents. 
## <title> Modus Ponens </title> 
thm (mpan9 () (mpan9.1 (-> ph ps) mpan9.2 (-> ch (-> ps th))) (-> (/\ ph ch) th) mpan9.1 ch adantr mpan9.2 ph adantl mpd)

#  A syllogism inference combined with contraction. 
## <title> Syllogism & Contraction </title> 
thm (sylanc () (sylanc.1 (-> (/\ ph ps) ch) sylanc.2 (-> th ph) sylanc.3 (-> th ps)) (-> th ch) sylanc.1 ex sylanc.2 sylanc.3 sylc)

## <title> Syllogism </title> 
thm (sylancl () (sylancl.1 (-> (/\ ph ps) ch) sylancl.2 (-> th ph) sylancl.3 ps) (-> th ch) sylancl.1 sylancl.2 sylancl.3 th a1i sylanc)

## <title> Syllogism </title> 
thm (sylancr () (sylancr.1 (-> (/\ ph ps) ch) sylancr.2 ph sylancr.3 (-> th ps)) (-> th ch) sylancr.1 sylancr.2 th a1i sylancr.3 sylanc)

## <title> Syllogism & Contraction </title>
thm (syl2anc () (syl2anc.1 (-> (/\ (/\ ph ps) (/\ ch th)) ta) syl2anc.2 (-> et ph) syl2anc.3 (-> et ps) syl2anc.4 (-> et ch) syl2anc.5 (-> et th)) (-> et ta) syl2anc.1 syl2anc.2 syl2anc.3 jca syl2anc.4 syl2anc.5 jca sylanc)

## <title> Syllogism & Contraction </title>
thm (sylancb () (sylancb.1 (-> (/\ ph ps) ch) sylancb.2 (<-> th ph) sylancb.3 (<-> th ps)) (-> th ch) sylancb.1 sylancb.2 sylancb.3 syl2anb anidms)

## <title> Syllogism & Contraction </title>
thm (sylancbr () (sylancbr.1 (-> (/\ ph ps) ch) sylancbr.2 (<-> ph th) sylancbr.3 (<-> ps th)) (-> th ch) sylancbr.1 sylancbr.2 sylancbr.3 syl2anbr anidms)

## <title> Syllogism & Commute </title>
thm (sylancom () (sylancom.1 (-> (/\ ph ps) ch) sylancom.2 (-> (/\ ch ps) th)) (-> (/\ ph ps) th) sylancom.2 sylancom.1 ph ps pm3.27 sylanc)

## <title> Eliminate Antecedent by Cases </title>
thm (pm2.61ian () (pm2.61ian.1 (-> (/\ ph ps) ch) pm2.61ian.2 (-> (/\ (-. ph) ps) ch)) (-> ps ch) pm2.61ian.1 ex pm2.61ian.2 ex pm2.61i)

## <title> Eliminate Antecedent by Cases </title>
thm (pm2.61dan () (pm2.61dan.1 (-> (/\ ph ps) ch) pm2.61dan.2 (-> (/\ ph (-. ps)) ch)) (-> ph ch) pm2.61dan.1 ex pm2.61dan.2 ex pm2.61d)

## <title> Proof by contradiction </title>  
thm (condan () (condan.1 (-> (/\ ph (-. ps)) ch) condan.2 (-> (/\ ph (-. ps)) (-. ch))) (-> ph ps) condan.1 ex condan.2 ex pm2.65d ps notnot2 syl)

## <title> Introduce conjunct as antecedent </title>
## <suggest> left('Simplify', '→') </suggest>
thm (abai () () (<-> (/\ ph ps) (/\ ph (-> ph ps))) ph ps pm3.26 ph ps pm3.4 jca ph (-> ph ps) pm3.26 ph ps pm3.35 jca impbii)

## <title> Add conjunct to both sides </title>
## <summary> Introduce a left conjunct to both sides of a logical equivalence. </summary>
## <table>
##   (<->        [ ph ]   [        [ ps)
##   (<-> (/\ ch [ ph ] ) [ (/\ ch [ ps))
## </table>
thm (anbi2i () (bi.aa (<-> ph ps)) (<-> (/\ ch ph) (/\ ch ps)) bi.aa biimpi ch anim2i bi.aa biimpri ch anim2i impbii)

## <title> Add conjunct to both sides </title>
## <summary> Introduce a right conjunct to both sides of a logical equivalence. </summary>
## <table>
##   (<->     ph ]     ]     [ ps ] )
##   (<-> (/\ ph ] ch) ] (/\ [ ps ] ch))
## </table>
thm (anbi1i () (bi.aa (<-> ph ps)) (<-> (/\ ph ch) (/\ ps ch)) ph ch ancom bi.aa ch anbi2i ch ps ancom 3bitri)

## <title> Conjoin both sides of two equivalences </title>
## <table>
##   (<->     ph ] ]    ]       [ ps ]    ] )
##   (<->        [ [ ch ]       [    [ th ] )
##   (<-> (/\ ph ] [ ch ] ) (/\ [ ps [ th ] ))
## </table>
thm (anbi12i () (anbi12.1 (<-> ph ps) anbi12.2 (<-> ch th)) (<-> (/\ ph ch) (/\ ps th)) anbi12.1 ch anbi1i anbi12.2 ps anbi2i bitri)

#  Theorem *5.53 of [bib/WhiteheadRussell] p. 125. 
thm (pm5.53 () () (<-> (-> (\/ (\/ ph ps) ch) th) (/\ (/\ (-> ph th) (-> ps th)) (-> ch th))) (\/ ph ps) ch th jaob ph ps th jaob (-> ch th) anbi1i bitri)

## <title> Rearrangement conjunction </title> 
thm (an12 () () (<-> (/\ ph (/\ ps ch)) (/\ ps (/\ ph ch))) ph ps ancom ch anbi1i ph ps ch anass ps ph ch anass 3bitr3i)

## <title> Rearrangement conjunction </title> 
thm (an23 () () (<-> (/\ (/\ ph ps) ch) (/\ (/\ ph ch) ps)) ps ch ancom ph anbi2i ph ps ch anass ph ch ps anass 3bitr4i)

## <title> Rearrangement conjunction </title> 
thm (an1s () (an1s.1 (-> (/\ ph (/\ ps ch)) th)) (-> (/\ ps (/\ ph ch)) th) ps ph ch an12 an1s.1 sylbi)

## <title> Rearrangement conjunction </title> 
thm (ancom2s () (an1s.1 (-> (/\ ph (/\ ps ch)) th)) (-> (/\ ph (/\ ch ps)) th) an1s.1 exp32 com23 imp32)

#  Deduction rearranging conjuncts. 
## <title> Rearrangement conjunction </title> 
thm (ancom13s () (an1s.1 (-> (/\ ph (/\ ps ch)) th)) (-> (/\ ch (/\ ps ph)) th) an1s.1 exp32 com13 imp32)

#  Deduction rearranging conjuncts. 
## <title> Rearrangement conjunction </title> 
thm (an1rs () (an1rs.1 (-> (/\ (/\ ph ps) ch) th)) (-> (/\ (/\ ph ch) ps) th) ph ch ps an23 an1rs.1 sylbi)

#  Inference commuting a nested conjunction in antecedent. 
## <title> Rearrangement conjunction </title> 
thm (ancom1s () (an1rs.1 (-> (/\ (/\ ph ps) ch) th)) (-> (/\ (/\ ps ph) ch) th) an1rs.1 exp31 com12 imp31)

#  Deduction rearranging conjuncts. 
## <title> Rearrangement conjunction </title> 
thm (ancom31s () (an1rs.1 (-> (/\ (/\ ph ps) ch) th)) (-> (/\ (/\ ch ps) ph) th) an1rs.1 exp31 com13 imp31)

## <title> Absorb conjunct </title> 
thm (anabs1 () () (<-> (/\ (/\ ph ps) ph) (/\ ph ps)) (/\ ph ps) ph pm3.26 ph ps pm3.26 ancli impbii)

## <title> Absorb conjunct </title> 
thm (anabs5 () () (<-> (/\ ph (/\ ph ps)) (/\ ph ps)) (/\ ph ps) ph ancom ph ps anabs1 bitr3i)

## <title> Absorb conjunct </title> 
thm (anabs7 () () (<-> (/\ ps (/\ ph ps)) (/\ ph ps)) ps (/\ ph ps) pm3.27 ph ps pm3.27 ancri impbii)

## <title> Absorb conjunct </title> 
thm (anabsi5 () (anabsi5.1 (-> ph (-> (/\ ph ps) ch))) (-> (/\ ph ps) ch) anabsi5.1 ps adantr pm2.43i)

## <title> Absorb conjunct </title> 
thm (anabsi6 () (anabsi6.1 (-> ph (-> (/\ ps ph) ch))) (-> (/\ ph ps) ch) anabsi6.1 ancomsd anabsi5)

## <title> Absorb antecedent into conjunction </title> 
thm (anabsi7 () (anabsi7.1 (-> ps (-> (/\ ph ps) ch))) (-> (/\ ph ps) ch) anabsi7.1 exp3a pm2.43b imp)

## <title> Absorb antecedent into conjunction </title> 
thm (anabsi8 () (anabsi8.1 (-> ps (-> (/\ ps ph) ch))) (-> (/\ ph ps) ch) anabsi8.1 anabsi5 ancoms)

## <title> Absorb antecedent into conjunction </title> 
thm (anabss1 () (anabss1.1 (-> (/\ (/\ ph ps) ph) ch)) (-> (/\ ph ps) ch) anabss1.1 ps adantrr anidms)

## <title> Absorb antecedent into conjunction </title> 
thm (anabss3 () (anabss3.1 (-> (/\ (/\ ph ps) ps) ch)) (-> (/\ ph ps) ch) anabss3.1 ph adantrl anidms)

## <title> Absorb antecedent into conjunction </title> 
thm (anabss4 () (anabss4.1 (-> (/\ (/\ ps ph) ps) ch)) (-> (/\ ph ps) ch) anabss4.1 anabss1 ancoms)

## <title> Absorb antecedent into conjunction </title> 
thm (anabss5 () (anabss5.1 (-> (/\ ph (/\ ph ps)) ch)) (-> (/\ ph ps) ch) anabss5.1 ps adantlr anidms)

## <title> Absorb antecedent into conjunction </title> 
thm (anabss7 () (anabss7.1 (-> (/\ ps (/\ ph ps)) ch)) (-> (/\ ph ps) ch) anabss7.1 ex anabsi7)

## <title> Absorb antecedent into conjunction </title> 
thm (anabsan () (anabsan.1 (-> (/\ (/\ ph ph) ps) ch)) (-> (/\ ph ps) ch) anabsan.1 an1rs anabss1)

## <title> Absorb antecedent into conjunction </title> 
thm (anabsan2 () (anabsan2.1 (-> (/\ ph (/\ ps ps)) ch)) (-> (/\ ph ps) ch) anabsan2.1 anassrs anabss3)

## <title> Rearrange Conjunction </title> 
thm (an4 () () (<-> (/\ (/\ ph ps) (/\ ch th)) (/\ (/\ ph ch) (/\ ps th))) ps ch th an12 ph anbi2i ph ps (/\ ch th) anass ph ch (/\ ps th) anass 3bitr4i)

## <title> Rearrange Conjunction </title> 
thm (an42 () () (<-> (/\ (/\ ph ps) (/\ ch th)) (/\ (/\ ph ch) (/\ th ps))) ph ps ch th an4 ps th ancom (/\ ph ch) anbi2i bitri)

## <title> Rearrange Conjunction </title> 
thm (an4s () (an4s.1 (-> (/\ (/\ ph ps) (/\ ch th)) ta)) (-> (/\ (/\ ph ch) (/\ ps th)) ta) ph ch ps th an4 an4s.1 sylbi)

## <title> Rearrange Conjunction </title> 
thm (an42s () (an41r3s.1 (-> (/\ (/\ ph ps) (/\ ch th)) ta)) (-> (/\ (/\ ph ch) (/\ th ps)) ta) ph ps ch th an42 an41r3s.1 sylbir)

#  Distribution of conjunction over conjunction. 
## <title> Distributive Property </title> 
thm (anandi () () (<-> (/\ ph (/\ ps ch)) (/\ (/\ ph ps) (/\ ph ch))) ph anidm (/\ ps ch) anbi1i ph ph ps ch an4 bitr3i)

#  Distribution of conjunction over conjunction. 
## <title> Distributive Property </title> 
thm (anandir () () (<-> (/\ (/\ ph ps) ch) (/\ (/\ ph ch) (/\ ps ch))) ch anidm (/\ ph ps) anbi2i ph ps ch ch an4 bitr3i)

#  Inference that undistributes conjunction in the antecedent. 
## <title> Distributive Property </title> 
thm (anandis () (anandis.1 (-> (/\ (/\ ph ps) (/\ ph ch)) ta)) (-> (/\ ph (/\ ps ch)) ta) anandis.1 an4s anabsan)

#  Inference that undistributes conjunction in the antecedent. 
## <title> Distributive Property </title> 
thm (anandirs () (anandirs.1 (-> (/\ (/\ ph ch) (/\ ps ch)) ta)) (-> (/\ (/\ ph ps) ch) ta) anandirs.1 an4s anabsan2)

#  A theorem similar to the standard definition of the biconditional.
#      Definition of [bib/Margaris] p. 49. 
## <title> Definition of biconditional </title>
## <summary>
##   See <a href="def-bi">def-bi</a> for more information.
## </summary>
## <suggest> left('Simplify', '↔') </suggest>
thm (dfbi2 () () (<-> (<-> ph ps) (/\ (-> ph ps) (-> ps ph))) ph ps dfbi1 (-> ph ps) (-> ps ph) df-an bitr4i)

## <title> Definition of biconditional </title>
## <summary>
##      Definition [[df-bi]] rewritten in an abbreviated form to help intuitive
##      understanding of that definition.  Note that it is a conjunction of
##      two implications; one which asserts properties that follow from the
##      biconditional and one which asserts properties that imply the
##      biconditional. 
## </summary>
thm (dfbi () () (/\ (-> (<-> ph ps) (/\ (-> ph ps) (-> ps ph))) (-> (/\ (-> ph ps) (-> ps ph)) (<-> ph ps))) ph ps dfbi2 biimpi ph ps dfbi2 biimpri pm3.2i)

#  Deduce an equivalence from two implications. 
## <title> Deduce Biconditional from two conditionals </title>
## <table>
##   (-> ph (->  [ <r> ps <g> ch ] ))
##   (-> ph (->  [ <g> ch <r> ps ] ))
##   (-> ph (<-> [ <r> ps <g> ch ] ))
## </table>
thm (impbid () (impbid.1 (-> ph (-> ps ch)) impbid.2 (-> ph (-> ch ps))) (-> ph (<-> ps ch)) impbid.1 impbid.2 jca ps ch dfbi2 sylibr)

## <title> Infer Biconditional from two conditionals </title>
thm (impbid1 () (impbid1.1 (-> ph (-> ps ch)) impbid1.2 (-> ch ps)) (-> ph (<-> ps ch)) impbid1.1 impbid1.2 ph a1i impbid)

## <title> Infer Biconditional from two conditionals </title>
thm (impbid2 () (impbid2.1 (-> ps ch) impbid2.2 (-> ph (-> ch ps))) (-> ph (<-> ps ch)) impbid2.1 ph a1i impbid2.2 impbid)

#  Deduce an equivalence from two implications. 
## <title> Deduce Biconditional from two conditionals </title>
thm (impbida () (impbida.1 (-> (/\ ph ps) ch) impbida.2 (-> (/\ ph ch) ps)) (-> ph (<-> ps ch)) impbida.1 ex impbida.2 ex impbid)

#  Commutative law for equivalence.  Theorem *4.21 of [bib/WhiteheadRussell]
#      p. 117. 
## <title> Commutative Biconditional </title>
thm (bicom () () (<-> (<-> ph ps) (<-> ps ph)) (-> ph ps) (-> ps ph) ancom ph ps dfbi2 ps ph dfbi2 3bitr4i)

#  Commute two sides of a biconditional in a deduction. 
## <title> Commutative Biconditional </title>
thm (bicomd () (bicomd.1 (-> ph (<-> ps ch))) (-> ph (<-> ch ps)) bicomd.1 ps ch bicom sylib)

#  Contraposition.  Theorem *4.11 of [bib/WhiteheadRussell] p. 117. 
## <title> Negate Both Sides </title>
## <suggest> left('Simplify', '¬') right('Add', '¬') </suggest>
thm (notbi () () (<-> (<-> ph ps) (<-> (-. ph) (-. ps))) ph ps con34b ps ph con34b anbi12i ph ps dfbi2 (-. ps) (-. ph) dfbi2 3bitr4i (-. ps) (-. ph) bicom bitri)

## <title> Contraposition </title>
thm (con4bii () (con4bii.1 (<-> (-. ph) (-. ps))) (<-> ph ps) con4bii.1 ph ps notbi mpbir)

## <title> Contraposition </title>
thm (con4bid () (con4bid.1 (-> ph (<-> (-. ps) (-. ch)))) (-> ph (<-> ps ch)) con4bid.1 ps ch notbi sylibr)

#  Contraposition.  Theorem *4.12 of [bib/WhiteheadRussell] p. 117. 
## <title> Contraposition </title>
thm (con2bi () () (<-> (<-> ph (-. ps)) (<-> ps (-. ph))) ph ps con2b ps ph con1b anbi12i ph (-. ps) dfbi2 ps (-. ph) dfbi2 3bitr4i)

## <title> Contraposition </title>
thm (con2bid () (con2bid.1 (-> ph (<-> ps (-. ch)))) (-> ph (<-> ch (-. ps))) con2bid.1 ch ps con2bi sylibr)

## <title> Contraposition </title>
thm (con1bid () (con1bid.1 (-> ph (<-> (-. ps) ch))) (-> ph (<-> (-. ch) ps)) con1bid.1 bicomd con2bid bicomd)

#  Deduction form of [[bitri]]. 
## <title> Transitive Property </title>
thm (bitrd () (bitrd.1 (-> ph (<-> ps ch)) bitrd.2 (-> ph (<-> ch th))) (-> ph (<-> ps th)) bitrd.1 biimpd bitrd.2 sylibd bitrd.2 biimprd bitrd.1 sylibrd impbid)

#  Deduction form of [[bitr2i]]. 
## <title> Transitive Property </title>
thm (bitr2d () (bitr2d.1 (-> ph (<-> ps ch)) bitr2d.2 (-> ph (<-> ch th))) (-> ph (<-> th ps)) bitr2d.1 bitr2d.2 bitrd bicomd)

#  Deduction form of [[bitr3i]]. 
## <title> Transitive Property </title>
thm (bitr3d () (bitr3d.1 (-> ph (<-> ps ch)) bitr3d.2 (-> ph (<-> ps th))) (-> ph (<-> ch th)) bitr3d.1 bicomd bitr3d.2 bitrd)

#  Deduction form of [[bitr4i]]. 
## <title> Transitive Property </title>
thm (bitr4d () (bitr4d.1 (-> ph (<-> ps ch)) bitr4d.2 (-> ph (<-> th ch))) (-> ph (<-> ps th)) bitr4d.1 bitr4d.2 bicomd bitrd)

#  A syllogism inference from two biconditionals. 
## <title> Syllogism </title>
thm (syl5bb () (syl5bb.1 (-> ph (<-> ps ch)) syl5bb.2 (<-> th ps)) (-> ph (<-> th ch)) syl5bb.2 ph a1i syl5bb.1 bitrd)

#  A syllogism inference from two biconditionals. 
## <title> Syllogism </title>
thm (syl5rbb () (syl5rbb.1 (-> ph (<-> ps ch)) syl5rbb.2 (<-> th ps)) (-> ph (<-> ch th)) syl5rbb.1 syl5rbb.2 syl5bb bicomd)

#  A syllogism inference from two biconditionals. 
## <title> Syllogism </title>
thm (syl5bbr () (syl5bbr.1 (-> ph (<-> ps ch)) syl5bbr.2 (<-> ps th)) (-> ph (<-> th ch)) syl5bbr.1 syl5bbr.2 bicomi syl5bb)

#  A syllogism inference from two biconditionals. 
## <title> Syllogism </title>
thm (syl5rbbr () (syl5rbbr.1 (-> ph (<-> ps ch)) syl5rbbr.2 (<-> ps th)) (-> ph (<-> ch th)) syl5rbbr.1 syl5rbbr.2 bicomi syl5rbb)

#  A syllogism inference from two biconditionals. 
## <title> Syllogism </title>
thm (syl6bb () (syl6bb.1 (-> ph (<-> ps ch)) syl6bb.2 (<-> ch th)) (-> ph (<-> ps th)) syl6bb.1 syl6bb.2 ph a1i bitrd)

#  A syllogism inference from two biconditionals. 
## <title> Syllogism </title>
thm (syl6rbb () (syl6rbb.1 (-> ph (<-> ps ch)) syl6rbb.2 (<-> ch th)) (-> ph (<-> th ps)) syl6rbb.1 syl6rbb.2 syl6bb bicomd)

#  A syllogism inference from two biconditionals. 
## <title> Syllogism </title>
thm (syl6bbr () (syl6bbr.1 (-> ph (<-> ps ch)) syl6bbr.2 (<-> th ch)) (-> ph (<-> ps th)) syl6bbr.1 syl6bbr.2 bicomi syl6bb)

#  A syllogism inference from two biconditionals. 
## <title> Syllogism </title>
thm (syl6rbbr () (syl6rbbr.1 (-> ph (<-> ps ch)) syl6rbbr.2 (<-> th ch)) (-> ph (<-> th ps)) syl6rbbr.1 syl6rbbr.2 bicomi syl6rbb)

#  Nested syllogism inference conjoining dissimilar antecedents. 
## <title> Syllogism </title>
thm (sylan9bb () (sylan9bb.1 (-> ph (<-> ps ch)) sylan9bb.2 (-> th (<-> ch ta))) (-> (/\ ph th) (<-> ps ta)) sylan9bb.1 th adantr sylan9bb.2 ph adantl bitrd)

#  Nested syllogism inference conjoining dissimilar antecedents. 
## <title> Syllogism </title>
thm (sylan9bbr () (sylan9bbr.1 (-> ph (<-> ps ch)) sylan9bbr.2 (-> th (<-> ch ta))) (-> (/\ th ph) (<-> ps ta)) sylan9bbr.1 sylan9bbr.2 sylan9bb ancoms)

#  More general version of [[3imtr3i]].  Useful for converting
#        conditional definitions in a formula. 
## <title> Syllogism </title>
thm (3imtr3d () (3imtr3d.1 (-> ph (-> ps ch)) 3imtr3d.2 (-> ph (<-> ps th)) 3imtr3d.3 (-> ph (<-> ch ta))) (-> ph (-> th ta)) 3imtr3d.2 3imtr3d.1 3imtr3d.3 sylibd sylbird)

#  More general version of [[3imtr4i]].  Useful for converting
#        conditional definitions in a formula. 
## <title> Syllogism </title>
thm (3imtr4d () (3imtr4d.1 (-> ph (-> ps ch)) 3imtr4d.2 (-> ph (<-> th ps)) 3imtr4d.3 (-> ph (<-> ta ch))) (-> ph (-> th ta)) 3imtr4d.2 3imtr4d.1 3imtr4d.3 sylibrd sylbid)

#  Deduction from transitivity of biconditional. 
## <title> Transitive Property </title>
thm (3bitrd () (3bitrd.1 (-> ph (<-> ps ch)) 3bitrd.2 (-> ph (<-> ch th)) 3bitrd.3 (-> ph (<-> th ta))) (-> ph (<-> ps ta)) 3bitrd.1 3bitrd.2 bitrd 3bitrd.3 bitrd)

#  Deduction from transitivity of biconditional. 
## <title> Transitive Property </title>
thm (3bitrrd () (3bitrd.1 (-> ph (<-> ps ch)) 3bitrd.2 (-> ph (<-> ch th)) 3bitrd.3 (-> ph (<-> th ta))) (-> ph (<-> ta ps)) 3bitrd.3 3bitrd.1 3bitrd.2 bitr2d bitr3d)

#  Deduction from transitivity of biconditional. 
## <title> Transitive Property </title>
thm (3bitr2d () (3bitr2d.1 (-> ph (<-> ps ch)) 3bitr2d.2 (-> ph (<-> th ch)) 3bitr2d.3 (-> ph (<-> th ta))) (-> ph (<-> ps ta)) 3bitr2d.1 3bitr2d.2 bitr4d 3bitr2d.3 bitrd)

#  Deduction from transitivity of biconditional. 
## <title> Transitive Property </title>
thm (3bitr2rd () (3bitr2d.1 (-> ph (<-> ps ch)) 3bitr2d.2 (-> ph (<-> th ch)) 3bitr2d.3 (-> ph (<-> th ta))) (-> ph (<-> ta ps)) 3bitr2d.1 3bitr2d.2 bitr4d 3bitr2d.3 bitr2d)

#  Deduction from transitivity of biconditional.  Useful for converting
#        conditional definitions in a formula. 
## <title> Transitive Property </title>
thm (3bitr3d () (3bitr3d.1 (-> ph (<-> ps ch)) 3bitr3d.2 (-> ph (<-> ps th)) 3bitr3d.3 (-> ph (<-> ch ta))) (-> ph (<-> th ta)) 3bitr3d.2 3bitr3d.1 bitr3d 3bitr3d.3 bitrd)

#  Deduction from transitivity of biconditional. 
## <title> Transitive Property </title>
thm (3bitr3rd () (3bitr3d.1 (-> ph (<-> ps ch)) 3bitr3d.2 (-> ph (<-> ps th)) 3bitr3d.3 (-> ph (<-> ch ta))) (-> ph (<-> ta th)) 3bitr3d.3 3bitr3d.1 3bitr3d.2 bitr3d bitr3d)

#  Deduction from transitivity of biconditional.  Useful for converting
#        conditional definitions in a formula. 
## <title> Transitive Property </title>
thm (3bitr4d () (3bitr4d.1 (-> ph (<-> ps ch)) 3bitr4d.2 (-> ph (<-> th ps)) 3bitr4d.3 (-> ph (<-> ta ch))) (-> ph (<-> th ta)) 3bitr4d.2 3bitr4d.1 3bitr4d.3 bitr4d bitrd)

#  Deduction from transitivity of biconditional. 
## <title> Transitive Property </title>
thm (3bitr4rd () (3bitr4d.1 (-> ph (<-> ps ch)) 3bitr4d.2 (-> ph (<-> th ps)) 3bitr4d.3 (-> ph (<-> ta ch))) (-> ph (<-> ta th)) 3bitr4d.3 3bitr4d.1 bitr4d 3bitr4d.2 bitr4d)

#  More general version of [[3imtr3i]].  Useful for converting
#        definitions in a formula. 
## <title> Syllogism </title>
thm (3imtr3g () (3imtr3g.1 (-> ph (-> ps ch)) 3imtr3g.2 (<-> ps th) 3imtr3g.3 (<-> ch ta)) (-> ph (-> th ta)) 3imtr3g.1 imp 3imtr3g.2 ph anbi2i 3imtr3g.3 3imtr3i ex)

#  More general version of [[3imtr4i]].  Useful for converting
#        definitions in a formula. 
## <title> Syllogism </title>
thm (3imtr4g () (3imtr4g.1 (-> ph (-> ps ch)) 3imtr4g.2 (<-> th ps) 3imtr4g.3 (<-> ta ch)) (-> ph (-> th ta)) 3imtr4g.1 3imtr4g.2 bicomi 3imtr4g.3 bicomi 3imtr3g)

#  More general version of [[3bitr3i]].  Useful for converting
#        definitions in a formula. 
## <title> Transitive Property </title>
thm (3bitr3g () (3bitr3g.1 (-> ph (<-> ps ch)) 3bitr3g.2 (<-> ps th) 3bitr3g.3 (<-> ch ta)) (-> ph (<-> th ta)) 3bitr3g.1 3bitr3g.2 syl5bbr 3bitr3g.3 syl6bb)

#  More general version of [[3bitr4i]].  Useful for converting
#        definitions in a formula. 
## <title> Transitive Property </title>
thm (3bitr4g () (3bitr4g.1 (-> ph (<-> ps ch)) 3bitr4g.2 (<-> th ps) 3bitr4g.3 (<-> ta ch)) (-> ph (<-> th ta)) 3bitr4g.1 3bitr4g.2 syl5bb 3bitr4g.3 syl6bbr)

#  Theorem *3.47 of [bib/WhiteheadRussell] p. 113.  
## <title> Praeclarum Theorema </title>
## <suggest> right('Infer', '→') </suggest>
## <summary>
##   This was proved by Leibniz, and it evidently pleased him enough to call it 
##   'praeclarum theorema' (splendid theorem). 
## </summary>
thm (prth () () (-> (/\ (-> ph ps) (-> ch th)) (-> (/\ ph ch) (/\ ps th))) ps th pm3.2 ch imim2d ph imim2i com23 imp4b)

#  Theorem *3.48 of [bib/WhiteheadRussell] p. 114. 
thm (pm3.48 () () (-> (/\ (-> ph ps) (-> ch th)) (-> (\/ ph ch) (\/ ps th))) (-> ph ps) (-> ch th) pm3.26 con3d (-> ph ps) (-> ch th) pm3.27 imim12d ph ch df-or ps th df-or 3imtr4g)

#  Conjoin antecedents and consequents in a deduction. 
## <title> Join antecedents and consequents </title>
thm (anim12d () (anim12d.1 (-> ph (-> ps ch)) anim12d.2 (-> ph (-> th ta))) (-> ph (-> (/\ ps th) (/\ ch ta))) ps ch th ta prth anim12d.1 anim12d.2 sylanc)

#  Conjoin antecedents and consequents in a deduction. 
## <title> Join antecedents and consequents </title>
thm (anim12ii () (anim12ii.1 (-> ph (-> ps ch)) anim12ii.2 (-> th (-> ps ta))) (-> (/\ ph th) (-> ps (/\ ch ta))) anim12ii.1 com12 anim12ii.2 com12 anim12d com12)

#  Add a conjunct to right of antecedent and consequent in a deduction. 
## <title> Add a conjunct to antecedent and consequent </title>
thm (anim1d () (anim1d.1 (-> ph (-> ps ch))) (-> ph (-> (/\ ps th) (/\ ch th))) anim1d.1 ph th idd anim12d)

#  Add a conjunct to left of antecedent and consequent in a deduction. 
## <title> Add a conjunct to antecedent and consequent </title>
thm (anim2d () (anim1d.1 (-> ph (-> ps ch))) (-> ph (-> (/\ th ps) (/\ th ch))) ph th idd anim1d.1 anim12d)

#  Theorem *3.45 (Fact) of [bib/WhiteheadRussell] p. 113. 
thm (pm3.45 () () (-> (-> ph ps) (-> (/\ ph ch) (/\ ps ch))) (-> ph ps) id ch anim1d)

#  Deduction joining nested implications to form implication of
#        conjunctions. 
## <title> Join nested implications </title>
thm (im2anan9 () (im2an9.1 (-> ph (-> ps ch)) im2an9.2 (-> th (-> ta et))) (-> (/\ ph th) (-> (/\ ps ta) (/\ ch et))) im2an9.1 th adantr im2an9.2 ph adantl anim12d)

#  Deduction joining nested implications to form implication of
#        conjunctions. 
## <title> Join nested implications </title>
thm (im2anan9r () (im2an9.1 (-> ph (-> ps ch)) im2an9.2 (-> th (-> ta et))) (-> (/\ th ph) (-> (/\ ps ta) (/\ ch et))) im2an9.1 th adantl im2an9.2 ph adantr anim12d)

#  Disjoin antecedents and consequents in a deduction. 
## <title> Join antecedents and consequents </title>
thm (orim12d () (orim12d.1 (-> ph (-> ps ch)) orim12d.2 (-> ph (-> th ta))) (-> ph (-> (\/ ps th) (\/ ch ta))) ps ch th ta pm3.48 orim12d.1 orim12d.2 sylanc)

#  Disjoin antecedents and consequents in a deduction. 
## <title> Add disjunct to antecedent and consequent </title>
thm (orim1d () (orim1d.1 (-> ph (-> ps ch))) (-> ph (-> (\/ ps th) (\/ ch th))) orim1d.1 ph th idd orim12d)

#  Disjoin antecedents and consequents in a deduction. 
## <title> Add disjunct to antecedent and consequent </title>
thm (orim2d () (orim1d.1 (-> ph (-> ps ch))) (-> ph (-> (\/ th ps) (\/ th ch))) ph th idd orim1d.1 orim12d)

#  Axiom *1.6 (Sum) of [bib/WhiteheadRussell] p. 97. 
## <title> Add disjunct to antecedent and consequent </title>
thm (orim2 () () (-> (-> ps ch) (-> (\/ ph ps) (\/ ph ch))) (-> ps ch) id ph orim2d)

#  Theorem *2.38 of [bib/WhiteheadRussell] p. 105. 
## <title> Add disjunct to antecedent and consequent </title>
thm (pm2.38 () () (-> (-> ps ch) (-> (\/ ps ph) (\/ ch ph))) (-> ps ch) id ph orim1d)

#  Theorem *2.36 of [bib/WhiteheadRussell] p. 105. 
## <title> Add disjunct to antecedent and consequent </title>
thm (pm2.36 () () (-> (-> ps ch) (-> (\/ ph ps) (\/ ch ph))) ps ch ph pm2.38 ph ps pm1.4 syl5)

#  Theorem *2.37 of [bib/WhiteheadRussell] p. 105. 
## <title> Add disjunct to antecedent and consequent </title>
thm (pm2.37 () () (-> (-> ps ch) (-> (\/ ps ph) (\/ ph ch))) ps ch ph pm2.38 ch ph pm1.4 syl6)

#  Theorem *2.73 of [bib/WhiteheadRussell] p. 108. 
thm (pm2.73 () () (-> (-> ph ps) (-> (\/ (\/ ph ps) ch) (\/ ps ch))) ph ps pm2.621 ch orim1d)

#  Theorem *2.74 of [bib/WhiteheadRussell] p. 108. 
thm (pm2.74 () () (-> (-> ps ph) (-> (\/ (\/ ph ps) ch) (\/ ph ch))) ps ph orel2 ch orim1d ph ch orc (\/ (\/ ph ps) ch) a1d ja)

#  Theorem *2.75 of [bib/WhiteheadRussell] p. 108. 
thm (pm2.75 () () (-> (\/ ph ps) (-> (\/ ph (-> ps ch)) (\/ ph ch))) ph ch orc (\/ ph (-> ps ch)) a1d ps ch pm2.27 ph orim2d jaoi)

#  Theorem *2.76 of [bib/WhiteheadRussell] p. 108. 
thm (pm2.76 () () (-> (\/ ph (-> ps ch)) (-> (\/ ph ps) (\/ ph ch))) ph ps ch pm2.75 com12)

#  Theorem *2.8 of [bib/WhiteheadRussell] p. 108. 
thm (pm2.8 () () (-> (\/ ps ch) (-> (\/ (-. ch) th) (\/ ps th))) ps th orc (\/ (-. ch) th) a1d ch ps pm2.24 th orim1d jaoi)

#  Theorem *2.81 of [bib/WhiteheadRussell] p. 108. 
thm (pm2.81 () () (-> (-> ps (-> ch th)) (-> (\/ ph ps) (-> (\/ ph ch) (\/ ph th)))) ps (-> ch th) ph orim2 ph ch th pm2.76 syl6)

#  Theorem *2.82 of [bib/WhiteheadRussell] p. 108. 
thm (pm2.82 () () (-> (\/ (\/ ph ps) ch) (-> (\/ (\/ ph (-. ch)) th) (\/ (\/ ph ps) th))) (\/ ph ps) (\/ ph (-. ch)) ax-1 ch ps pm2.24 ph orim2d jaoi th orim1d)

#  Theorem *2.85 of [bib/WhiteheadRussell] p. 108. 
thm (pm2.85 () () (-> (-> (\/ ph ps) (\/ ph ch)) (\/ ph (-> ps ch))) (\/ ph ps) (\/ ph ch) imor ph ps pm2.48 (\/ ph ch) orim1i sylbi ps ch imor ph orbi2i ph (-. ps) ch orordi bitr2i sylib)

## <title> Disjunction of negated premises </title> 
thm (pm3.2ni () (pm3.2ni.1 (-. ph) pm3.2ni.2 (-. ps)) (-. (\/ ph ps)) pm3.2ni.1 pm3.2ni.2 pm3.2i ph ps ioran mpbir)

#  Absorption of redundant internal disjunct.  Compare Theorem *4.45
#      of [bib/WhiteheadRussell] p. 119. 
## <title> Absorb redundant disjunct </title>
thm (orabs () () (<-> ph (/\ (\/ ph ps) ph)) ph ps orc ancri (\/ ph ps) ph pm3.27 impbii)

#  Absorb a disjunct into a conjunct.  (Contributed by Roy F. Longton
#      23-Jun-2005.) 
## <title> Absorb redundant disjunct </title>
thm (oranabs () () (<-> (/\ (\/ ph (-. ps)) ps) (/\ ph ps)) ph (-. ps) pm5.61 ps notnot (\/ ph (-. ps)) anbi2i ps notnot ph anbi2i 3bitr4i)

#  Distribution of implication over biconditional.  Theorem *5.74 of
#      [bib/WhiteheadRussell] p. 126. 
## <title> Distributive Property </title>
thm (pm5.74 () () (<-> (-> ph (<-> ps ch)) (<-> (-> ph ps) (-> ph ch))) ps ch bi1 ph imim3i ps ch bi2 ph imim3i impbid (-> ph ps) (-> ph ch) bi1 pm2.86d (-> ph ps) (-> ph ch) bi2 pm2.86d anim12d ph pm4.24 ps ch dfbi2 3imtr4g impbii)

#  Distribution of implication over biconditional (inference rule). 
## <title> Distributive Property </title>
thm (pm5.74i () (pm5.74i.1 (-> ph (<-> ps ch))) (<-> (-> ph ps) (-> ph ch)) pm5.74i.1 ph ps ch pm5.74 mpbi)

#  Distribution of implication over biconditional (deduction rule). 
## <title> Distributive Property </title>
thm (pm5.74d () (pm5.74d.1 (-> ph (-> ps (<-> ch th)))) (-> ph (<-> (-> ps ch) (-> ps th))) pm5.74d.1 ps ch th pm5.74 sylib)

#  Distribution of implication over biconditional (deduction rule). 
## <title> Distributive Property </title>
thm (pm5.74da () (pm5.74da.1 (-> (/\ ph ps) (<-> ch th))) (-> ph (<-> (-> ps ch) (-> ps th))) pm5.74da.1 ex pm5.74d)

#  Distribution of implication over biconditional (reverse inference
#        rule). 
## <title> Distributive Property </title>
thm (pm5.74ri () (pm5.74ri.1 (<-> (-> ph ps) (-> ph ch))) (-> ph (<-> ps ch)) pm5.74ri.1 ph ps ch pm5.74 mpbir)

#  Distribution of implication over biconditional (deduction rule). 
## <title> Distributive Property </title>
thm (pm5.74rd () (pm5.74rd.1 (-> ph (<-> (-> ps ch) (-> ps th)))) (-> ph (-> ps (<-> ch th))) pm5.74rd.1 ps ch th pm5.74 sylibr)

#  A deduction from a biconditional, related to modus ponens. 
## <title> Modus Ponens </title>
thm (mpbidi () (mpbidi.min (-> th (-> ph ps)) mpbidi.maj (-> ph (<-> ps ch))) (-> th (-> ph ch)) mpbidi.min mpbidi.maj pm5.74i sylib)

#  Implication in terms of implication and biconditional. 
## <title> Implication & Biconditional </title>
## <suggest> left('Simplify', '↔') </suggest>
thm (ibib () () (<-> (-> ph ps) (-> ph (<-> ph ps))) ph ps pm3.4 ph ps pm3.26 ps a1d impbid ex ph ps bi1 com12 impbid pm5.74i)

#  Implication in terms of implication and biconditional. 
## <title> Implication & Biconditional </title>
## <suggest> left('Simplify', '↔') </suggest>
thm (ibibr () () (<-> (-> ph ps) (-> ph (<-> ps ph))) ph ps ibib ph ps bicom ph imbi2i bitri)

## <title> Biconditional to Condition <title>
## <summary>
##    Inference that converts a biconditional implied by one of its arguments,
##    into an implication. 
## </summary>
thm (ibi () (ibi.1 (-> ph (<-> ph ps))) (-> ph ps) ibi.1 biimpd pm2.43i)

## <title> Biconditional to Condition <title>
## <summary>
##    Inference that converts a biconditional implied by one of its arguments,
##    into an implication. 
## </summary>
thm (ibir () (ibir.1 (-> ph (<-> ps ph))) (-> ph ps) ibir.1 bicomd ibi)

## <title> Biconditional to Condition <title>
## <summary>
##    Deduction that converts a biconditional implied by one of its arguments,
##    into an implication. 
## </summary>
thm (ibd () (ibd.1 (-> ph (-> ps (<-> ps ch)))) (-> ph (-> ps ch)) ibd.1 ps ch ibib sylibr)

#  Theorem *5.501 of [bib/WhiteheadRussell] p. 125. 
thm (pm5.501 () () (-> ph (<-> ps (<-> ph ps))) ph ps ibib pm5.74ri)

#  Distributive law for disjunction.  Theorem *4.41 of [bib/WhiteheadRussell]
#      p. 119. 
## <title> Distributive Property </title>
## <suggest> right('Distribute', 'L') left('Distribute', '-L') </suggest>
thm (ordi () () (<-> (\/ ph (/\ ps ch)) (/\ (\/ ph ps) (\/ ph ch))) ps ch pm3.26 ph orim2i ps ch pm3.27 ph orim2i jca ph ps df-or (-. ph) ps ch pm3.43i ph ch df-or ph (/\ ps ch) df-or 3imtr4g sylbi imp impbii)

## <title> Distributive Property </title>
## <suggest> right('Distribute', 'R') left('Distribute', '-R') </suggest>
thm (ordir () () (<-> (\/ (/\ ph ps) ch) (/\ (\/ ph ch) (\/ ps ch))) ch ph ps ordi (/\ ph ps) ch orcom ph ch orcom ps ch orcom anbi12i 3bitr4i)

#  Distributive law for implication over conjunction.  Compare Theorem
#      *4.76 of [bib/WhiteheadRussell] p. 121. 
## <title> Distributive Property </title>
## <suggest> left('Distribute', '-∧') right('Distribute', '→') </suggest>
thm (jcab () () (<-> (-> ph (/\ ps ch)) (/\ (-> ph ps) (-> ph ch))) (-. ph) ps ch ordi ph (/\ ps ch) imor ph ps imor ph ch imor anbi12i 3bitr4i)

#  Theorem *4.76 of [bib/WhiteheadRussell] p. 121.  
## <title> Join antecedents </title>
thm (pm4.76 () () (<-> (/\ (-> ph ps) (-> ph ch)) (-> ph (/\ ps ch))) ph ps ch jcab bicomi)

#  Deduction conjoining the consequents of two implications. 
## <title> Join two implications </title>
thm (jcad () (jcad.1 (-> ph (-> ps ch)) jcad.2 (-> ph (-> ps th))) (-> ph (-> ps (/\ ch th))) jcad.1 imp jcad.2 imp jca ex)

#  Deduction conjoining a theorem to left of consequent in an
#        implication. 
thm (jctild () (jctild.1 (-> ph (-> ps ch)) jctild.2 (-> ph th)) (-> ph (-> ps (/\ th ch))) jctild.2 ps a1d jctild.1 jcad)

#  Deduction conjoining a theorem to right of consequent in an
#        implication. 
thm (jctird () (jctird.1 (-> ph (-> ps ch)) jctird.2 (-> ph th)) (-> ph (-> ps (/\ ch th))) jctird.1 jctird.2 ps a1d jcad)

#  Theorem *3.43 (Comp) of [bib/WhiteheadRussell] p. 113. 
thm (pm3.43 () () (-> (/\ (-> ph ps) (-> ph ch)) (-> ph (/\ ps ch))) ph ps ch jcab biimpri)

#  Distributive law for conjunction.  Theorem *4.4 of [bib/WhiteheadRussell]
#      p. 118. 
## <title> Distributive Property </title>
## <suggest> right('Distribute', 'L') left('Distribute', '-L') </suggest>
thm (andi () () (<-> (/\ ph (\/ ps ch)) (\/ (/\ ph ps) (/\ ph ch))) (-. ph) (-. ps) (-. ch) ordi ps ch ioran (-. ph) orbi2i ph ps ianor ph ch ianor anbi12i 3bitr4i notbii ph (\/ ps ch) anor (/\ ph ps) (/\ ph ch) oran 3bitr4i)

#  Distributive law for conjunction. 
## <title> Distributive Property </title>
## <suggest> right('Distribute', 'R') left('Distribute', '-R') </suggest>
thm (andir () () (<-> (/\ (\/ ph ps) ch) (\/ (/\ ph ch) (/\ ps ch))) ch ph ps andi (\/ ph ps) ch ancom ph ch ancom ps ch ancom orbi12i 3bitr4i)

#  Double distributive law for disjunction. 
## <title> Double Distributive Property </title>
thm (orddi () () (<-> (\/ (/\ ph ps) (/\ ch th)) (/\ (/\ (\/ ph ch) (\/ ph th)) (/\ (\/ ps ch) (\/ ps th)))) ph ps (/\ ch th) ordir ph ch th ordi ps ch th ordi anbi12i bitri)

#  Double distributive law for conjunction. 
## <title> Double Distributive Property </title>
thm (anddi () () (<-> (/\ (\/ ph ps) (\/ ch th)) (\/ (\/ (/\ ph ch) (/\ ph th)) (\/ (/\ ps ch) (/\ ps th)))) ph ps (\/ ch th) andir ph ch th andi ps ch th andi orbi12i bitri)

#  Inference adding a biconditional to the left in an equivalence. 
## <title> Add biconditional to both sides of a equivalence </title>
## <table>
##   (<->        [ ph ]   [        [ ps)
##   (<-> (-> ch [ ph ] ) [ (-> ch [ ps))
## </table>
thm (bibi2i () (bibi.a (<-> ph ps)) (<-> (<-> ch ph) (<-> ch ps)) ch ph dfbi2 bibi.a ch imbi1i (-> ch ph) anbi2i bibi.a ch imbi2i (-> ps ch) anbi1i ch ps dfbi2 bitr4i 3bitri)

#  Inference adding a biconditional to the right in an equivalence. 
## <title> Add biconditional to both sides of a equivalence </title>
## <table>
##   (<->      ph ]     ]      [ ps ] )
##   (<-> (<-> ph ] ch) ] (<-> [ ps ] ch))
## </table>
thm (bibi1i () (bibi.a (<-> ph ps)) (<-> (<-> ph ch) (<-> ps ch)) ph ch bicom bibi.a ch bibi2i ch ps bicom 3bitri)

#  The equivalence of two equivalences. 
## <title> Combine Two equivalences </title>
thm (bibi12i () (bibi.a (<-> ph ps) bibi12.2 (<-> ch th)) (<-> (<-> ph ch) (<-> ps th)) bibi12.2 ph bibi2i bibi.a th bibi1i bitri)

#  Deduction negating both sides of a logical equivalence. 
## <title> Negate Both Sides </title>
thm (notbid () (bid.1 (-> ph (<-> ps ch))) (-> ph (<-> (-. ps) (-. ch))) bid.1 ps ch notbi sylib)

#  Deduction adding an antecedent to both sides of a logical
#        equivalence. 
## <title> Add an antecedent to both sides </title>
thm (imbi2d () (bid.1 (-> ph (<-> ps ch))) (-> ph (<-> (-> th ps) (-> th ch))) bid.1 th a1d pm5.74d)

#  Deduction adding a consequent to both sides of a logical equivalence. 
## <title> Add a consequent to both sides </title>
thm (imbi1d () (bid.1 (-> ph (<-> ps ch))) (-> ph (<-> (-> ps th) (-> ch th))) bid.1 notbid (-. th) imbi2d ps th con34b ch th con34b 3bitr4g)

#  Deduction adding a left disjunct to both sides of a logical
#        equivalence. 
## <title> Add a disjunct to both sides </title>
thm (orbi2d () (bid.1 (-> ph (<-> ps ch))) (-> ph (<-> (\/ th ps) (\/ th ch))) bid.1 (-. th) imbi2d th ps df-or th ch df-or 3bitr4g)

#  Deduction adding a right disjunct to both sides of a logical
#        equivalence. 
## <title> Add a disjunct to both sides </title>
thm (orbi1d () (bid.1 (-> ph (<-> ps ch))) (-> ph (<-> (\/ ps th) (\/ ch th))) bid.1 th orbi2d ps th orcom ch th orcom 3bitr4g)

#  Deduction adding a left conjunct to both sides of a logical
#        equivalence. 
## <title> Add a conjunct to both sides </title>
thm (anbi2d () (bid.1 (-> ph (<-> ps ch))) (-> ph (<-> (/\ th ps) (/\ th ch))) bid.1 biimpd th anim2d bid.1 biimprd th anim2d impbid)

#  Deduction adding a right conjunct to both sides of a logical
#        equivalence. 
## <title> Add a conjunct to both sides </title>
thm (anbi1d () (bid.1 (-> ph (<-> ps ch))) (-> ph (<-> (/\ ps th) (/\ ch th))) bid.1 th anbi2d ps th ancom ch th ancom 3bitr4g)

#  Deduction adding a biconditional to the left in an equivalence. 
## <title> Add a biconditional to both sides </title>
thm (bibi2d () (bid.1 (-> ph (<-> ps ch))) (-> ph (<-> (<-> th ps) (<-> th ch))) bid.1 th imbi2d (-> ps th) anbi1d bid.1 th imbi1d (-> th ch) anbi2d bitrd th ps dfbi2 th ch dfbi2 3bitr4g)

#  Deduction adding a biconditional to the right in an equivalence. 
## <title> Add a biconditional to both sides </title>
thm (bibi1d () (bid.1 (-> ph (<-> ps ch))) (-> ph (<-> (<-> ps th) (<-> ch th))) bid.1 th bibi2d ps th bicom ch th bicom 3bitr4g)

#  Theorem *4.37 of [bib/WhiteheadRussell] p. 118. 
## <title> Add a disjunct to both sides </title>
thm (orbi1 () () (-> (<-> ph ps) (<-> (\/ ph ch) (\/ ps ch))) (<-> ph ps) id ch orbi1d)

#  Theorem *4.36 of [bib/WhiteheadRussell] p. 118. 
## <title> Add a conjunct to both sides </title>
thm (anbi1 () () (-> (<-> ph ps) (<-> (/\ ph ch) (/\ ps ch))) (<-> ph ps) id ch anbi1d)

#  Theorem *4.22 of [bib/WhiteheadRussell] p. 117. 
## <title> Transitive Property </title>
## <suggest> right('Transitive', '↔') </suggest>
thm (bitr () () (-> (/\ (<-> ph ps) (<-> ps ch)) (<-> ph ch)) (<-> ph ps) id ch bibi1d biimpar)

#  Theorem *4.84 of [bib/WhiteheadRussell] p. 122. 
## <title> Add a consequent to both sides </title>
thm (imbi1 () () (-> (<-> ph ps) (<-> (-> ph ch) (-> ps ch))) (<-> ph ps) id ch imbi1d)

#  Theorem *4.85 of [bib/WhiteheadRussell] p. 122. 
## <title> Add an antecedent to both sides </title>
thm (imbi2 () () (-> (<-> ph ps) (<-> (-> ch ph) (-> ch ps))) (<-> ph ps) ch ax-1 pm5.74d)

#  Theorem *4.86 of [bib/WhiteheadRussell] p. 122. 
## <title> Add a biconditional to both sides </title>
thm (bibi1 () () (-> (<-> ph ps) (<-> (<-> ph ch) (<-> ps ch))) (<-> ph ps) id ch bibi1d)

#  Deduction joining two equivalences to form equivalence of
#        implications. 
## <title> Join two equivalences into equivalent implication </title>
thm (imbi12d () (bi12d.1 (-> ph (<-> ps ch)) bi12d.2 (-> ph (<-> th ta))) (-> ph (<-> (-> ps th) (-> ch ta))) bi12d.1 th imbi1d bi12d.2 ch imbi2d bitrd)

#  Deduction joining two equivalences to form equivalence of
#        disjunctions. 
## <title> Join two equivalences into equivalent disjunction </title>
thm (orbi12d () (bi12d.1 (-> ph (<-> ps ch)) bi12d.2 (-> ph (<-> th ta))) (-> ph (<-> (\/ ps th) (\/ ch ta))) bi12d.1 th orbi1d bi12d.2 ch orbi2d bitrd)

#  Deduction joining two equivalences to form equivalence of
#        conjunctions. 
## <title> Join two equivalences into equivalent conjunction </title>
## <table>
##   (-> ph (<->     ps ] ]     ]     ch ] ]    ] ))
##   (-> ph (<->        [ [ th  ]        [ [ ta ] ))
##   (-> ph (<-> (/\ ps ] [ th) ] (/\ ch ] [ ta ] )))
## </table>
thm (anbi12d () (bi12d.1 (-> ph (<-> ps ch)) bi12d.2 (-> ph (<-> th ta))) (-> ph (<-> (/\ ps th) (/\ ch ta))) bi12d.1 th anbi1d bi12d.2 ch anbi2d bitrd)

#  Deduction joining two equivalences to form equivalence of
#        biconditionals. 
## <title> Join two equivalences into equivalent biconditionals </title>
thm (bibi12d () (bi12d.1 (-> ph (<-> ps ch)) bi12d.2 (-> ph (<-> th ta))) (-> ph (<-> (<-> ps th) (<-> ch ta))) bi12d.1 th bibi1d bi12d.2 ch bibi2d bitrd)

#  Theorem *4.39 of [bib/WhiteheadRussell] p. 118. 
## <title> Join equivalences into equivalent disjunction </title>
thm (pm4.39 () () (-> (/\ (<-> ph ch) (<-> ps th)) (<-> (\/ ph ps) (\/ ch th))) (<-> ph ch) (<-> ps th) pm3.26 (<-> ph ch) (<-> ps th) pm3.27 orbi12d)

#  Theorem *4.38 of [bib/WhiteheadRussell] p. 118. 
## <title> Join equivalences into equivalent conjunction </title>
thm (pm4.38 () () (-> (/\ (<-> ph ch) (<-> ps th)) (<-> (/\ ph ps) (/\ ch th))) (<-> ph ch) (<-> ps th) pm3.26 (<-> ph ch) (<-> ps th) pm3.27 anbi12d)

#  Deduction joining two equivalences to form equivalence of
#        conjunctions. 
## <title> Join equivalences into equivalent conjunction </title>
thm (bi2anan9 () (bi2an9.1 (-> ph (<-> ps ch)) bi2an9.2 (-> th (<-> ta et))) (-> (/\ ph th) (<-> (/\ ps ta) (/\ ch et))) bi2an9.1 ta anbi1d bi2an9.2 ch anbi2d sylan9bb)

#  Deduction joining two equivalences to form equivalence of
#        conjunctions. 
## <title> Join equivalences into equivalent conjunction </title>
thm (bi2anan9r () (bi2an9.1 (-> ph (<-> ps ch)) bi2an9.2 (-> th (<-> ta et))) (-> (/\ th ph) (<-> (/\ ps ta) (/\ ch et))) bi2an9.1 bi2an9.2 bi2anan9 ancoms)

#  Deduction joining two biconditionals with different antecedents.
## <title> Join biconditionals </title> 
thm (bi2bian9 () (bi2an9.1 (-> ph (<-> ps ch)) bi2an9.2 (-> th (<-> ta et))) (-> (/\ ph th) (<-> (<-> ps ta) (<-> ch et))) bi2an9.1 th adantr bi2an9.2 ph adantl bibi12d)

#  Implication in terms of biconditional and conjunction.  Theorem *4.71 of
#      [bib/WhiteheadRussell] p. 120. 
## <title> Implication as a biconditional and conjunction </title>
thm (pm4.71 () () (<-> (-> ph ps) (<-> ph (/\ ph ps))) ph ps ancl ph ps pm3.26 impbid1 ph (/\ ph ps) bi1 ph ps pm3.27 syl6 impbii)

#  Implication in terms of biconditional and conjunction.  Theorem *4.71 of
#      [bib/WhiteheadRussell] p. 120 (with conjunct reversed). 
## <title> Implication as a biconditional and conjunction </title>
thm (pm4.71r () () (<-> (-> ph ps) (<-> ph (/\ ps ph))) ph ps pm4.71 ph ps ancom ph bibi2i bitri)

#  Inference converting an implication to a biconditional with conjunction.
#        Inference from Theorem *4.71 of [bib/WhiteheadRussell] p. 120. 
## <title> Implication as a biconditional and conjunction </title>
thm (pm4.71i () (pm4.71i.1 (-> ph ps)) (<-> ph (/\ ph ps)) pm4.71i.1 ph ps pm4.71 mpbi)

#  Inference converting an implication to a biconditional with conjunction.
#        Inference from Theorem *4.71 of [bib/WhiteheadRussell] p. 120 (with
#        conjunct reversed). 
## <title> Implication as a biconditional and conjunction </title>
thm (pm4.71ri () (pm4.71ri.1 (-> ph ps)) (<-> ph (/\ ps ph)) pm4.71ri.1 ph ps pm4.71r mpbi)

#  Deduction converting an implication to a biconditional with conjunction.
#        Deduction from Theorem *4.71 of [bib/WhiteheadRussell] p. 120. 
## <title> Implication as a biconditional and conjunction </title>
thm (pm4.71rd () (pm4.71rd.1 (-> ph (-> ps ch))) (-> ph (<-> ps (/\ ch ps))) pm4.71rd.1 ps ch pm4.71r sylib)

#  Theorem *4.45 of [bib/WhiteheadRussell] p. 119. 
## <title> Implication as a biconditional and conjunction </title>
thm (pm4.45 () () (<-> ph (/\ ph (\/ ph ps))) ph ps orc pm4.71i)

#  Implication in terms of biconditional and disjunction.  Theorem *4.72 of
#      [bib/WhiteheadRussell] p. 121. 
## <title> Implication as a biconditional and conjunction </title>
thm (pm4.72 () () (<-> (-> ph ps) (<-> ps (\/ ph ps))) ps ph olc ph ps pm2.621 impbid2 ps (\/ ph ps) bi2 ph ps pm2.67 syl impbii)

#  Introduction of antecedent as conjunct.  Theorem *4.73 of
#      [bib/WhiteheadRussell] p. 121. 
## <title> Introduce antecedent as conjunct </title>
thm (iba () () (-> ph (<-> ps (/\ ps ph))) ph ps ancrb pm5.74ri)

#  Introduction of antecedent as conjunct. 
## <title> Introduce antecedent as conjunct </title>
thm (ibar () () (-> ph (<-> ps (/\ ph ps))) ph ps anclb pm5.74ri)

#  Distribution of implication over biconditional.  Theorem *5.32 of
#      [bib/WhiteheadRussell] p. 125. 
## <title> Distributive Property </title>
thm (pm5.32 () () (<-> (-> ph (<-> ps ch)) (<-> (/\ ph ps) (/\ ph ch))) ps ch notbi ph imbi2i ph (-. ps) (-. ch) pm5.74 (-> ph (-. ps)) (-> ph (-. ch)) notbi 3bitri ph ps df-an ph ch df-an bibi12i bitr4i)

#  Distribution of implication over biconditional (inference rule). 
## <title> Distributive Property </title>
thm (pm5.32i () (pm5.32i.1 (-> ph (<-> ps ch))) (<-> (/\ ph ps) (/\ ph ch)) pm5.32i.1 ph ps ch pm5.32 mpbi)

#  Distribution of implication over biconditional (inference rule). 
## <title> Distributive Property </title>
thm (pm5.32ri () (pm5.32i.1 (-> ph (<-> ps ch))) (<-> (/\ ps ph) (/\ ch ph)) pm5.32i.1 pm5.32i ps ph ancom ch ph ancom 3bitr4i)

#  Distribution of implication over biconditional (deduction rule). 
## <title> Distributive Property </title>
thm (pm5.32d () (pm5.32d.1 (-> ph (-> ps (<-> ch th)))) (-> ph (<-> (/\ ps ch) (/\ ps th))) pm5.32d.1 ps ch th pm5.32 sylib)

#  Distribution of implication over biconditional (deduction rule). 
## <title> Distributive Property </title>
thm (pm5.32rd () (pm5.32d.1 (-> ph (-> ps (<-> ch th)))) (-> ph (<-> (/\ ch ps) (/\ th ps))) pm5.32d.1 pm5.32d ch ps ancom th ps ancom 3bitr4g)

#  Distribution of implication over biconditional (deduction rule). 
## <title> Distributive Property </title>
thm (pm5.32da () (pm5.32da.1 (-> (/\ ph ps) (<-> ch th))) (-> ph (<-> (/\ ps ch) (/\ ps th))) pm5.32da.1 ex pm5.32d)

#  Theorem *5.33 of [bib/WhiteheadRussell] p. 125. 
thm (pm5.33 () () (<-> (/\ ph (-> ps ch)) (/\ ph (-> (/\ ph ps) ch))) ph ps ibar ch imbi1d pm5.32i)

#  Theorem *5.36 of [bib/WhiteheadRussell] p. 125. 
thm (pm5.36 () () (<-> (/\ ph (<-> ph ps)) (/\ ps (<-> ph ps))) (<-> ph ps) id pm5.32ri)

#  Theorem *5.42 of [bib/WhiteheadRussell] p. 125. 
thm (pm5.42 () () (<-> (-> ph (-> ps ch)) (-> ph (-> ps (/\ ph ch)))) ph ch ibar ps imbi2d pm5.74i)

#  Absorb a hypothesis into the second member of a biconditional.
#        (Contributed by FL, 15-Feb-2007.) 
## <title> Absorb antecedent </title>
thm (bianabs () (bianabs.1 (-> ph (<-> ps (/\ ph ch)))) (-> ph (<-> ps ch)) bianabs.1 ph ch ibar bitr4d)

#  Absorption of disjunction into equivalence. 
## <title> Absorb disjunction </title>
thm (oibabs () () (<-> (-> (\/ ph ps) (<-> ph ps)) (<-> ph ps)) ph ps orc (<-> ph ps) imim1i ibd ps ph olc (<-> ph ps) imim1i ps ph ibibr sylibr impbid (<-> ph ps) (\/ ph ps) ax-1 impbii)

## <title> Law of excluded middle </title>
## <summary>
##   Law of excluded middle, also called the principle of tertium non datur.
##   It says that something is either true or not true; there are no in-between
##   values of truth.  This is an essential distinction of our classical logic
##   and is not a theorem of intuitionistic logic. 
## </summary>
thm (exmid () () (\/ ph (-. ph)) (-. ph) id orri)

#  Theorem *2.1 of [bib/WhiteheadRussell] p. 101. 
## <title> Law of excluded middle </title>
thm (pm2.1 () () (\/ (-. ph) ph) ph notnot2 orri)

#  Theorem *2.13 of [bib/WhiteheadRussell] p. 101. 
## <title> Law of excluded middle </title>
thm (pm2.13 () () (\/ ph (-. (-. (-. ph)))) (-. ph) notnot1 orri)

#  Law of noncontradiction.  Theorem *3.24 of [bib/WhiteheadRussell] p. 111
#      (who call it the "law of contradiction"). 
## <title> Law of Noncontradiction </title>
## <suggest> full('Simplify', 'F') </suggest>
thm (pm3.24 () () (-. (/\ ph (-. ph))) (-. ph) exmid ph (-. ph) ianor mpbir)

#  Theorem *2.26 of [bib/WhiteheadRussell] p. 104. 
thm (pm2.26 () () (\/ (-. ph) (-> (-> ph ps) ps)) ph notnot2 ps imim1i com12 orri)

#  Theorem *5.18 of [bib/WhiteheadRussell] p. 124.  This theorem says that
#      logical equivalence is the same as negated "exclusive-or." 
## <title> Logical Equivalence is Negated Exclusive Or </title>
thm (pm5.18 () () (<-> (<-> ph ps) (-. (<-> ph (-. ps)))) ph ps bicom ph (-. ps) bicom ps ph pm2.61 ps ph pm2.65 ph ps con2 syl5 anim12d (-. ps) ph dfbi2 syl5ib ph ps annim syl6ib com12 (-> ps ph) (-> ph ps) imnan sylib ps ph dfbi2 notbii sylibr ps ph dfbi2 notbii ps ph pm2.5 ps ph annim ph (-. ps) pm2.21 ps adantl sylbir jca ph ps annim ph (-. ps) ax-1 (-. ps) adantr sylbir ph ps pm2.51 jca jaoi (-> ps ph) (-> ph ps) ianor (-. ps) ph dfbi2 3imtr4i sylbi impbii bitri con2bii bitri)

#  Move negation outside of biconditional.  Compare Theorem *5.18 of
#      [bib/WhiteheadRussell] p. 124. 
## <title> Move negation outside biconditional </title>
thm (nbbn () () (<-> (<-> (-. ph) ps) (-. (<-> ph ps))) (-. ph) ps bicom ph ps bicom ps ph pm5.18 bitri con2bii bitri)

#  Theorem *5.11 of [bib/WhiteheadRussell] p. 123. 
thm (pm5.11 () () (\/ (-> ph ps) (-> (-. ph) ps)) ph ps pm2.5 orri)

#  Theorem *5.12 of [bib/WhiteheadRussell] p. 123. 
thm (pm5.12 () () (\/ (-> ph ps) (-> ph (-. ps))) ph ps pm2.51 orri)

#  Theorem *5.13 of [bib/WhiteheadRussell] p. 123. 
thm (pm5.13 () () (\/ (-> ph ps) (-> ps ph)) ph ps pm2.521 orri)

#  Theorem *5.14 of [bib/WhiteheadRussell] p. 123. 
thm (pm5.14 () () (\/ (-> ph ps) (-> ps ch)) ps ph ax-1 con3i ch pm2.21d orri)

#  Theorem *5.15 of [bib/WhiteheadRussell] p. 124. 
thm (pm5.15 () () (\/ (<-> ph ps) (<-> ph (-. ps))) ph ps pm5.18 biimpri con1i orri)

#  Theorem *5.16 of [bib/WhiteheadRussell] p. 124. 
thm (pm5.16 () () (-. (/\ (<-> ph ps) (<-> ph (-. ps)))) ph ps pm5.18 biimpi (<-> ph ps) (<-> ph (-. ps)) pm4.62 mpbi (<-> ph ps) (<-> ph (-. ps)) ianor mpbir)

#  Theorem *5.17 of [bib/WhiteheadRussell] p. 124. 
thm (pm5.17 () () (<-> (/\ (\/ ph ps) (-. (/\ ph ps))) (<-> ph (-. ps))) ph ps orcom ps ph df-or bitri ph ps imnan bicomi anbi12i (-. ps) ph dfbi2 (-. ps) ph bicom 3bitr2i)

#  Theorem *5.19 of [bib/WhiteheadRussell] p. 124.
## <title> An proposition is not equivalence to its negation </title>
thm (pm5.19 () () (-. (<-> ph (-. ph))) ph biid ph ph pm5.18 mpbi)

#  An alternate definition of the biconditional.  Theorem *5.23 of
#      [bib/WhiteheadRussell] p. 124. 
## <title> An alternative definition of biconditional </title>
## <summary>
##   See <a href="def-bi">def-bi</a> for more information.
## </summary>
thm (dfbi3 () () (<-> (<-> ph ps) (\/ (/\ ph ps) (/\ (-. ph) (-. ps)))) ph ps pm5.18 ph ps imnan ps ph con1b (-. ph) ps iman bitri anbi12i ph (-. ps) dfbi2 (/\ ph ps) (/\ (-. ph) (-. ps)) ioran 3bitr4ri con1bii bitri)

#  Two ways to express "exclusive or."  Theorem *5.22 of [bib/WhiteheadRussell]
#      p. 124. 
## <title> Two ways to express Exclusive Or </title>
thm (xor () () (<-> (-. (<-> ph ps)) (\/ (/\ ph (-. ps)) (/\ ps (-. ph)))) (-. ph) ps dfbi3 ph ps nbbn ps (-. ph) ancom ph notnot (-. ps) anbi1i orbi12i (/\ ps (-. ph)) (/\ ph (-. ps)) orcom bitr3i 3bitr3i)

#  Theorem *5.24 of [bib/WhiteheadRussell] p. 124. 
## <title> Two ways to express Exclusive Or </title>
thm (pm5.24 () () (<-> (-. (\/ (/\ ph ps) (/\ (-. ph) (-. ps)))) (\/ (/\ ph (-. ps)) (/\ ps (-. ph)))) ph ps dfbi3 notbii ph ps xor bitr3i)

#  Two ways to express "exclusive or." 
## <title> Two ways to express Exclusive Or </title>
thm (xor2 () () (<-> (-. (<-> ph ps)) (/\ (\/ ph ps) (-. (/\ ph ps)))) ph ps xor (/\ ph ps) (/\ (-. ph) (-. ps)) ioran ph ps pm5.24 ph ps oran (-. (/\ ph ps)) anbi2i (-. (/\ ph ps)) (\/ ph ps) ancom bitr3i 3bitr3i bitri)

#  Two ways to express "exclusive or." 
## <title> Two ways to express Exclusive Or </title>
thm (xor3 () () (<-> (-. (<-> ph ps)) (<-> ph (-. ps))) ph ps pm5.18 con2bii bicomi)

#  Conjunction distributes over exclusive-or, using #(-. (<-> ph ps))#
#      to express exclusive-or.  This is one way to interpret the distributive
#      law of multiplication over addition in modulo 2 arithmetic. 
## <title> Distributive Property </title>
thm (xordi () () (<-> (/\ ph (-. (<-> ps ch))) (-. (<-> (/\ ph ps) (/\ ph ch)))) ph (<-> ps ch) annim ph ps ch pm5.32 notbii bitri)

#  Theorem *5.55 of [bib/WhiteheadRussell] p. 125. 
thm (pm5.55 () () (\/ (<-> (\/ ph ps) ph) (<-> (\/ ph ps) ps)) ps ph pm5.13 ps ph pm4.72 ps ph orcom ph bibi2i ph (\/ ph ps) bicom 3bitri ph ps pm4.72 ps (\/ ph ps) bicom bitri orbi12i mpbi)

#  Two propositions are equivalent if they are both true.  Theorem *5.1 of
#      [bib/WhiteheadRussell] p. 123. 
## <title> Two truths are equivalent </title>
thm (pm5.1 () () (-> (/\ ph ps) (<-> ph ps)) ph ps pm5.501 biimpa)

#  Two propositions are equivalent if they are both false.  Theorem *5.21 of
#      [bib/WhiteheadRussell] p. 124. 
## <title> Two falsehoods are equivalent </title>
thm (pm5.21 () () (-> (/\ (-. ph) (-. ps)) (<-> ph ps)) (-. ph) (-. ps) pm5.1 con4bid)

## <title> Two propositions implying a false one are equivalent </title>
thm (pm5.21ni () (pm5.21ni.1 (-> ph ps) pm5.21ni.2 (-> ch ps)) (-> (-. ps) (<-> ph ch)) ph ch pm5.21 pm5.21ni.1 con3i pm5.21ni.2 con3i sylanc)

#  Eliminate an antecedent implied by each side of a biconditional. 
## <title> Eliminate an antecedent </title>
thm (pm5.21nii () (pm5.21ni.1 (-> ph ps) pm5.21ni.2 (-> ch ps) pm5.21nii.3 (-> ps (<-> ph ch))) (<-> ph ch) pm5.21nii.3 pm5.21ni.1 pm5.21ni.2 pm5.21ni pm2.61i)

#  Eliminate an antecedent implied by each side of a biconditional. 
## <title> Eliminate an antecedent </title>
thm (pm5.21nd () (pm5.21nd.1 (-> (/\ ph ps) th) pm5.21nd.2 (-> (/\ ph ch) th) pm5.21nd.3 (-> th (<-> ps ch))) (-> ph (<-> ps ch)) pm5.21nd.1 ex con3d pm5.21nd.2 ex con3d jcad ps ch pm5.21 syl6 pm5.21nd.3 pm2.61d2)

## <title> Transfer negation by equivalence </title>
thm (bibif () () (-> (-. ps) (<-> (<-> ph ps) (-. ph))) ph ps bi1 con3d com12 ph ps pm5.21 expcom impbid)

#  Theorem *5.35 of [bib/WhiteheadRussell] p. 125. 
thm (pm5.35 () () (-> (/\ (-> ph ps) (-> ph ch)) (-> ph (<-> ps ch))) (-> ph ps) (-> ph ch) pm5.1 pm5.74rd)

#  Theorem *5.54 of [bib/WhiteheadRussell] p. 125. 
thm (pm5.54 () () (\/ (<-> (/\ ph ps) ph) (<-> (/\ ph ps) ps)) (/\ ph ps) ph pm5.1 anabss1 ps ph iba bicomd pm5.21ni orri)

#  Elimination of antecedents in an implication. (The proof was shortened by
#      Juha Arpiainen, 19-Jan-2006.) 
## <title> Elimination antecedents in implication </title>
thm (elimant () () (-> (/\ (-> ph ps) (-> (-> ps ch) (-> ph th))) (-> ph (-> ch th))) (-> ph ps) (-> (-> ps ch) (-> ph th)) pm3.27 ch ps ax-1 syl5 com23)

## <title> Move conjunction outside biconditional</title>
thm (baib () (baib.1 (<-> ph (/\ ps ch))) (-> ps (<-> ph ch)) ps ch ibar baib.1 syl6rbbr)

## <title> Move conjunction outside biconditional</title>
thm (baibr () (baibr.1 (<-> ph (/\ ps ch))) (-> ps (<-> ch ph)) baibr.1 baib bicomd)

#  Theorem *5.44 of [bib/WhiteheadRussell] p. 125. 
thm (pm5.44 () () (-> (-> ph ps) (<-> (-> ph ch) (-> ph (/\ ps ch)))) ph ps ch jcab baibr)

#  Conjunction in antecedent versus disjunction in consequent.  Theorem *5.6
#      of [bib/WhiteheadRussell] p. 125. 
## <title> Conjunction in antecedent versus disjunction in consequent </title>
thm (pm5.6 () () (<-> (-> (/\ ph (-. ps)) ch) (-> ph (\/ ps ch))) ph (-. ps) ch impexp ps ch df-or ph imbi2i bitr4i)

## <title> Move a conjunct in and out of negation </title>
thm (nan () () (<-> (-> ph (-. (/\ ps ch))) (-> (/\ ph ps) (-. ch))) ph ps (-. ch) impexp ps ch imnan ph imbi2i bitr2i)

#  Change disjunction in consequent to conjunction in antecedent. 
## <title> Disjunction in consequent to conjunction in antecedent </title>
thm (orcanai () (orcanai.1 (-> ph (\/ ps ch))) (-> (/\ ph (-. ps)) ch) orcanai.1 ord imp)

#  Introduction of conjunct inside of a contradiction. 
## <title> Introduce conjunction inside contradiction </title>
thm (intnan () (intnan.1 (-. ph)) (-. (/\ ps ph)) intnan.1 ps ph pm3.27 mto)

## <title> Introduce conjunction inside contradiction </title>
thm (intnanr () (intnan.1 (-. ph)) (-. (/\ ph ps)) intnan.1 ph ps pm3.26 mto)

## <title> Introduce conjunction inside contradiction </title>
thm (intnand () (intnand.1 (-> ph (-. ps))) (-> ph (-. (/\ ch ps))) intnand.1 ch ps pm3.27 nsyl)

## <title> Introduce conjunction inside contradiction </title>
thm (intnanrd () (intnand.1 (-> ph (-. ps))) (-> ph (-. (/\ ps ch))) intnand.1 ps ch pm3.26 nsyl)

## <title> Modus ponens </title>
thm (mpan () (mpan.1 ph mpan.2 (-> (/\ ph ps) ch)) (-> ps ch) mpan.1 mpan.2 ex ax-mp)

## <title> Remove the true part of a conjunction </title>
## <table>
##              [ <r> ps ]
##   (-> (/\ ph [ <r> ps ] ) ch)
##   (->     ph ]        ]   ch)
## </table>
thm (mpan2 () (mpan2.1 ps mpan2.2 (-> (/\ ph ps) ch)) (-> ph ch) mpan2.1 mpan2.2 ex mpi)

## <title> Modus Ponens </title>
## <table>
##           ph ] ]    ]   ]
##              [ [ ps ]   ]
##   (-> (/\ ph ] [ ps ] ) [ ch)
##              [ [    [   [ ch
## </table>
thm (mp2an () (mp2an.1 ph mp2an.2 ps mp2an.3 (-> (/\ ph ps) ch)) ch mp2an.2 mp2an.1 mp2an.3 mpan ax-mp)

#  An inference based on modus ponens. 
## <title> Modus Ponens </title>
thm (mpani () (mpani.1 ps mpani.2 (-> ph (-> (/\ ps ch) th))) (-> ph (-> ch th)) mpani.1 mpani.2 exp3a mpi)

#  An inference based on modus ponens. 
## <title> Modus Ponens </title>
thm (mpan2i () (mpan2i.1 ch mpan2i.2 (-> ph (-> (/\ ps ch) th))) (-> ph (-> ps th)) mpan2i.1 mpan2i.2 exp3a mpii)

#  An inference based on modus ponens. 
## <title> Modus Ponens </title>
thm (mp2ani () (mp2ani.1 ps mp2ani.2 ch mp2ani.3 (-> ph (-> (/\ ps ch) th))) (-> ph th) mp2ani.2 mp2ani.1 mp2ani.3 mpani mpi)

#  A deduction based on modus ponens. 
## <title> Modus Ponens </title>
thm (mpand () (mpand.1 (-> ph ps) mpand.2 (-> ph (-> (/\ ps ch) th))) (-> ph (-> ch th)) mpand.1 mpand.2 exp3a mpd)

#  A deduction based on modus ponens. 
## <title> Modus Ponens </title>
thm (mpan2d () (mpan2d.1 (-> ph ch) mpan2d.2 (-> ph (-> (/\ ps ch) th))) (-> ph (-> ps th)) mpan2d.1 mpan2d.2 exp3a mpid)

#  A deduction based on modus ponens. 
## <title> Modus Ponens </title>
thm (mp2and () (mp2and.1 (-> ph ps) mp2and.2 (-> ph ch) mp2and.3 (-> ph (-> (/\ ps ch) th))) (-> ph th) mp2and.2 mp2and.1 mp2and.3 mpand mpd)

#  An inference based on modus ponens. 
## <title> Modus Ponens </title>
thm (mpdan () (mpdan.1 (-> ph ps) mpdan.2 (-> (/\ ph ps) ch)) (-> ph ch) mpdan.1 mpdan.2 ex mpd)

#  An inference based on modus ponens with commutation of antecedents. 
## <title> Modus Ponens & Commute </title>
thm (mpancom () (mpancom.1 (-> ps ph) mpancom.2 (-> (/\ ph ps) ch)) (-> ps ch) mpancom.1 mpancom.2 ancoms mpdan)

#  An inference based on modus ponens. 
## <title> Modus Ponens </title>
thm (mpanl1 () (mpanl1.1 ph mpanl1.2 (-> (/\ (/\ ph ps) ch) th)) (-> (/\ ps ch) th) mpanl1.1 mpanl1.2 ex mpan imp)

#  An inference based on modus ponens. 
## <title> Modus Ponens </title>
thm (mpanl2 () (mpanl2.1 ps mpanl2.2 (-> (/\ (/\ ph ps) ch) th)) (-> (/\ ph ch) th) mpanl2.1 mpanl2.2 ex mpan2 imp)

#  An inference based on modus ponens. 
## <title> Modus Ponens </title>
thm (mpanl12 () (mpanl12.1 ph mpanl12.2 ps mpanl12.3 (-> (/\ (/\ ph ps) ch) th)) (-> ch th) mpanl12.2 mpanl12.1 mpanl12.3 mpanl1 mpan)

#  An inference based on modus ponens. 
## <title> Modus Ponens </title>
thm (mpanr1 () (mpanr1.1 ps mpanr1.2 (-> (/\ ph (/\ ps ch)) th)) (-> (/\ ph ch) th) mpanr1.1 mpanr1.2 ex mpani imp)

#  An inference based on modus ponens. 
## <title> Modus Ponens </title>
thm (mpanr2 () (mpanr2.1 ch mpanr2.2 (-> (/\ ph (/\ ps ch)) th)) (-> (/\ ph ps) th) mpanr2.1 mpanr2.2 ex mpan2i imp)

#  An inference based on modus ponens. 
## <title> Modus Ponens </title>
thm (mpanr12 () (mpanr12.1 ps mpanr12.2 ch mpanr12.3 (-> (/\ ph (/\ ps ch)) th)) (-> ph th) mpanr12.2 mpanr12.1 mpanr12.3 mpanr1 mpan2)

#  An inference based on modus ponens. 
## <title> Modus Ponens </title>
thm (mpanlr1 () (mpanlr1.1 ps mpanlr1.2 (-> (/\ (/\ ph (/\ ps ch)) th) ta)) (-> (/\ (/\ ph ch) th) ta) mpanlr1.1 mpanlr1.2 ex mpanr1 imp)

#  Modus-tollens-like theorem. 
## <title> Modus Tollens </title>
thm (mtt () () (-> (-. ph) (<-> (-. ps) (-> ps ph))) ps ph pm2.21 ps ph con3 com12 impbid2)

#  A false consequent falsifies an antecedent. 
## <title> Modus Tollens </title>
thm (mt2bi () (mt2bi.1 ph) (<-> (-. ps) (-> ps (-. ph))) ps (-. ph) pm2.21 mt2bi.1 ps ph con2 mpi impbii)

#  A deduction from a biconditional, similar to modus tollens. 
## <title> Modus Tollens </title>
thm (mtbid () (mtbid.min (-> ph (-. ps)) mtbid.maj (-> ph (<-> ps ch))) (-> ph (-. ch)) mtbid.min mtbid.maj biimprd mtod)

#  A deduction from a biconditional, similar to modus tollens. 
## <title> Modus Tollens </title>
thm (mtbird () (mtbird.min (-> ph (-. ch)) mtbird.maj (-> ph (<-> ps ch))) (-> ph (-. ps)) mtbird.min mtbird.maj biimpd mtod)

#  An inference from a biconditional, similar to modus tollens. 
## <title> Modus Tollens </title>
thm (mtbii () (mtbii.min (-. ps) mtbii.maj (-> ph (<-> ps ch))) (-> ph (-. ch)) mtbii.min mtbii.maj biimprd mtoi)

#  An inference from a biconditional, similar to modus tollens. 
## <title> Modus Tollens </title>
## <table>
##                  [ [ (-. [ ch)
##   (-> ph (<-> ps ] [     [ ch))
##   (-> ph  (-. ps ] ]     ]   ))
## </table>
thm (mtbiri () (mtbiri.min (-. ch) mtbiri.maj (-> ph (<-> ps ch))) (-> ph (-. ps)) mtbiri.min mtbiri.maj biimpd mtoi)

## <title> Two truths are equivalent </title>
thm (2th () (2th.1 ph 2th.2 ps) (<-> ph ps) 2th.2 ph a1i 2th.1 ps a1i impbii)

## <title> Two falsehoods are equivalent </title>
thm (2false () (2false.1 (-. ph) 2false.2 (-. ps)) (<-> ph ps) 2false.1 2false.2 ph ps pm5.21 mp2an)

#  A wff is equivalent to its equivalence with truth. (The proof was
#        shortened by Juha Arpiainen, 19-Jan-2006.) 
## <title> Proposition is equivalent to its equivalence with truth </title>
thm (tbt () (tbt.1 ph) (<-> ps (<-> ps ph)) tbt.1 ph ps pm5.501 ax-mp ph ps bicom bitri)

#  The negation of a wff is equivalent to the wff's equivalence to
#      falsehood.  (Contributed by Juha Arpiainen, 19-Jan-2006.) 
## <title> Negated Proposition is equivalent to falsehood </title>
thm (nbn2 () () (-> (-. ph) (<-> (-. ps) (<-> ph ps))) ph ps pm5.21 ex ph ps notbi biimpi biimpcd impbid)

#  The negation of a wff is equivalent to the wff's equivalence to
#        falsehood. 
## <title> Negated Proposition is equivalent to falsehood </title>
thm (nbn () (nbn.1 (-. ph)) (<-> (-. ps) (<-> ps ph)) nbn.1 ph ps nbn2 ax-mp ph ps bicom bitri)

## <title> Transfer falsehood via equivalence </title> 
thm (nbn3 () (nbn3.1 ph) (<-> (-. ps) (<-> ps (-. ph))) nbn3.1 notnoti ps nbn)

#  A wff is equivalent to its conjunction with truth. 
thm (biantru () (biantru.1 ph) (<-> ps (/\ ps ph)) biantru.1 ph ps iba ax-mp)

#  A wff is equivalent to its conjunction with truth. 
thm (biantrur () (biantrur.1 ph) (<-> ps (/\ ph ps)) biantrur.1 ph ps ibar ax-mp)

#  A wff is equivalent to its conjunction with truth. 
thm (biantrud () (biantrud.1 (-> ph ps)) (-> ph (<-> ch (/\ ch ps))) biantrud.1 ch anim2i expcom ch ps pm3.26 impbid1)

#  A wff is equivalent to its conjunction with truth. 
thm (biantrurd () (biantrud.1 (-> ph ps)) (-> ph (<-> ch (/\ ps ch))) biantrud.1 ch biantrud ch ps ancom syl6bb)

#  Detach truth from conjunction in biconditional. 
thm (mpbiran () (mpbiran.1 (<-> ph (/\ ps ch)) mpbiran.2 ps) (<-> ph ch) mpbiran.1 mpbiran.2 ch biantrur bitr4i)

#  Detach truth from conjunction in biconditional. 
thm (mpbiran2 () (mpbiran.1 (<-> ph (/\ ps ch)) mpbiran2.2 ch) (<-> ph ps) mpbiran.1 mpbiran2.2 ps biantru bitr4i)

#  Detach a conjunction of truths in a biconditional. 
thm (mpbir2an () (mpbiran.1 (<-> ph (/\ ps ch)) mpbir2an.2 ps mpbir2an.3 ch) ph mpbir2an.3 mpbiran.1 mpbir2an.2 mpbiran mpbir)

#  A wff is equivalent to itself with true antecedent. 
thm (biimt () () (-> ph (<-> ps (-> ph ps))) ps ph ax-1 ph ps pm2.27 impbid2)

#  Theorem *5.5 of [bib/WhiteheadRussell] p. 125. 
thm (pm5.5 () () (-> ph (<-> (-> ph ps) ps)) ph ps biimt bicomd)

#  Theorem *5.62 of [bib/WhiteheadRussell] p. 125.  (Contributed by Roy F.
#      Longton, 21-Jun-2005.) 
thm (pm5.62 () () (<-> (\/ (/\ ph ps) (-. ps)) (\/ ph (-. ps))) ph ps (-. ps) ordir ps exmid mpbiran2)

#  A wff is disjoined with truth is true. 
thm (biort () () (-> ph (<-> ph (\/ ph ps))) ph ps orc ph (\/ ph ps) ax-1 impbid2)

#  A wff is equivalent to its disjunction with falsehood.  Theorem *4.74 of
#      [bib/WhiteheadRussell] p. 121. 
thm (biorf () () (-> (-. ph) (<-> ps (\/ ph ps))) (-. ph) ps biimt ph ps df-or syl6bbr)

#  A wff is equivalent to its disjunction with falsehood. 
thm (biorfi () (biorfi.1 (-. ph)) (<-> ps (\/ ps ph)) biorfi.1 ph ps biorf ax-mp ph ps orcom bitri)

#  A wff conjoined with falsehood is false. 
thm (bianfi () (bianfi.1 (-. ph)) (<-> ph (/\ ps ph)) bianfi.1 (/\ ps ph) pm2.21i ps ph pm3.27 impbii)

#  A wff conjoined with falsehood is false. 
thm (bianfd () (bianfd.1 (-> ph (-. ps))) (-> ph (<-> ps (/\ ps ch))) bianfd.1 (/\ ps ch) pm2.21d ps ch pm3.26 impbid1)

#  Theorem *4.82 of [bib/WhiteheadRussell] p. 122. 
thm (pm4.82 () () (<-> (/\ (-> ph ps) (-> ph (-. ps))) (-. ph)) ph ps pm2.65 imp ph ps pm2.21 ph (-. ps) pm2.21 jca impbii)

#  Theorem *4.83 of [bib/WhiteheadRussell] p. 122. 
thm (pm4.83 () () (<-> (/\ (-> ph ps) (-> (-. ph) ps)) ps) ph exmid ps a1bi ph (-. ph) ps jaob bitr2i)

#  Negation inferred from embedded conjunct. 
thm (pclem6 () () (-> (<-> ph (/\ ps (-. ph))) (-. ps)) ph (/\ ps (-. ph)) bi1 ps (-. ph) pm3.27 syl6 pm2.01d ph (/\ ps (-. ph)) bi2 exp3a com23 ps ph con3 syli mpd)

#  A transitive law of equivalence.  Compare Theorem *4.22 of
#      [bib/WhiteheadRussell] p. 117. 
thm (biantr () () (-> (/\ (<-> ph ps) (<-> ch ps)) (<-> ph ch)) (<-> ch ps) id ph bibi2d biimparc)

#  Disjunction distributes over the biconditional.  An axiom of system DS in
#      Vladimir Lifschitz, "On calculational proofs" (1998),
#      [[http://citeseer.ist.psu.edu/lifschitz98calculational.html]]. 
thm (orbidi () () (<-> (\/ ph (<-> ps ch)) (<-> (\/ ph ps) (\/ ph ch))) ph ch orc (\/ ph ps) a1d ph ps orc (\/ ph ch) a1d impbid (<-> ps ch) id ph orbi2d jaoi ph ps ch pm2.85 ph ch ps pm2.85 anim12i (\/ ph ps) (\/ ph ch) dfbi2 ps ch dfbi2 ph orbi2i ph (-> ps ch) (-> ch ps) ordi bitri 3imtr4i impbii)

#  Associative law for the biconditional.  An axiom of system DS in Vladimir
#      Lifschitz, "On calculational proofs" (1998),
#      [[http://citeseer.ist.psu.edu/lifschitz98calculational.html]].
#      Interestingly, this law was not included in //Principia Mathematica// but
#      was apparently first noted by Jan Lukasiewicz circa 1923.  (The proof was
#      shortened by Juha Arpiainen, 19-Jan-2006.) 
## <title> Associative Property </title>
thm (biass () () (<-> (<-> (<-> ph ps) ch) (<-> ph (<-> ps ch))) ph ps pm5.501 ch bibi1d ph (<-> ps ch) pm5.501 bitr3d ps ch nbbn (-. ph) a1i ph ps nbn2 ch bibi1d ph (<-> ps ch) nbn2 3bitr3d pm2.61i)

#  Lukasiewicz's shortest axiom for equivalential calculus.  Storrs McCall,
#      ed., //Polish Logic 1920-1939// (Oxford, 1967), p. 96. 
thm (biluk () () (<-> (<-> ph ps) (<-> (<-> ch ps) (<-> ph ch))) ph ps bicom ch bibi1i ps ph ch biass bitri (<-> ph ps) ch (<-> ps (<-> ph ch)) biass mpbi ch ps (<-> ph ch) biass bitr4i)

#  Disjunction distributes over the biconditional.  Theorem *5.7 of
#      [bib/WhiteheadRussell] p. 125.  This theorem is similar to [[orbidi]].
#      (Contributed by Roy F. Longton, 21-Jun-2005.) 
thm (pm5.7 () () (<-> (<-> (\/ ph ch) (\/ ps ch)) (\/ ch (<-> ph ps))) ch ph ps orbidi ch ph orcom ch ps orcom bibi12i bitr2i)

## <title>  Dijkstra-Scholten's Golden Rule </title>
thm (bigolden () () (<-> (<-> (/\ ph ps) ph) (<-> ps (\/ ph ps))) ph ps pm4.71 ph ps pm4.72 ph (/\ ph ps) bicom 3bitr3ri)

#  Theorem *5.71 of [bib/WhiteheadRussell] p. 125.  (Contributed by Roy F.
#      Longton, 23-Jun-2005.) 
thm (pm5.71 () () (-> (-> ps (-. ch)) (<-> (/\ (\/ ph ps) ch) (/\ ph ch))) ps ph orel2 ph ps orc impbid1 ch anbi1d ch (<-> (\/ ph ps) ph) pm2.21 pm5.32rd ja)

#  Theorem *5.75 of [bib/WhiteheadRussell] p. 126. 
thm (pm5.75 () () (-> (/\ (-> ch (-. ps)) (<-> ph (\/ ps ch))) (<-> (/\ ph (-. ps)) ch)) ph (\/ ps ch) bi1 ph ps ch pm5.6 sylibr (-> ch (-. ps)) adantl ph (\/ ps ch) bi2 ch ps olc ph ps olc imim12i syl ch ps ph pm5.6 sylibr exp3a a2d impcom (-> ch (-. ps)) (<-> ph (\/ ps ch)) pm3.26 jcad impbid)

## <title> Removal of conjunct from one side of an equivalence </title>
thm (bimsc1 () () (-> (/\ (-> ph ps) (<-> ch (/\ ps ph))) (<-> ch ph)) (<-> ch (/\ ps ph)) id ph ps pm4.71r biimpi bicomd sylan9bbr)

## <title> Elimination by cases </title>
thm (ecase2d () (ecase2d.1 (-> ph ps) ecase2d.2 (-> ph (-. (/\ ps ch))) ecase2d.3 (-> ph (-. (/\ ps th))) ecase2d.4 (-> ph (\/ ta (\/ ch th)))) (-> ph ta) ecase2d.1 ecase2d.2 ps ch imnan sylibr mpd ecase2d.1 ecase2d.3 ps th imnan sylibr mpd jca ch th ioran sylibr ecase2d.4 ta (\/ ch th) orcom sylib ord mpd)

## <title> Elimination by cases </title>
thm (ecase3 () (ecase3.1 (-> ph ch) ecase3.2 (-> ps ch) ecase3.3 (-> (-. (\/ ph ps)) ch)) ch ph ps ioran ecase3.3 sylbir ex ecase3.1 ecase3.2 pm2.61ii)

## <title> Elimination by cases </title>
thm (ecase () (ecase.1 (-> (-. ph) ch) ecase.2 (-> (-. ps) ch) ecase.3 (-> (/\ ph ps) ch)) ch ecase.3 ex ecase.1 ecase.2 pm2.61nii)

## <title> Elimination by cases </title>
thm (ecase3d () (ecase3d.1 (-> ph (-> ps th)) ecase3d.2 (-> ph (-> ch th)) ecase3d.3 (-> ph (-> (-. (\/ ps ch)) th))) (-> ph th) ecase3d.1 com12 ecase3d.2 com12 ecase3d.3 com12 ecase3)

## <title> Elimination by cases </title>
thm (ccase () (ccase.1 (-> (/\ ph ps) ta) ccase.2 (-> (/\ ch ps) ta) ccase.3 (-> (/\ ph th) ta) ccase.4 (-> (/\ ch th) ta)) (-> (/\ (\/ ph ch) (\/ ps th)) ta) ph ch ps th anddi (/\ ph ps) (/\ ph th) (/\ ch ps) (/\ ch th) or4 bitri ccase.1 ccase.2 jaoi ccase.3 ccase.4 jaoi jaoi sylbi)

## <title> Elimination by cases </title>
thm (ccased () (ccased.1 (-> ph (-> (/\ ps ch) et)) ccased.2 (-> ph (-> (/\ th ch) et)) ccased.3 (-> ph (-> (/\ ps ta) et)) ccased.4 (-> ph (-> (/\ th ta) et))) (-> ph (-> (/\ (\/ ps th) (\/ ch ta)) et)) ccased.1 ccased.2 jaod ccased.3 ccased.4 jaod jaod ps th ch ta anddi (/\ ps ch) (/\ ps ta) (/\ th ch) (/\ th ta) or4 bitri syl5ib)

## <title> Elimination by cases </title>
thm (ccase2 () (ccase2.1 (-> (/\ ph ps) ta) ccase2.2 (-> ch ta) ccase2.3 (-> th ta)) (-> (/\ (\/ ph ch) (\/ ps th)) ta) ccase2.1 ccase2.2 ps adantr ccase2.3 ph adantl ccase2.3 ch adantl ccase)

#  Inference eliminating two antecedents from the four possible cases that
#        result from their true/false combinations. 
## <title> Elimination by cases </title>
thm (4cases () (4cases.1 (-> (/\ ph ps) ch) 4cases.2 (-> (/\ ph (-. ps)) ch) 4cases.3 (-> (/\ (-. ph) ps) ch) 4cases.4 (-> (/\ (-. ph) (-. ps)) ch)) ch 4cases.1 4cases.3 pm2.61ian 4cases.2 4cases.4 pm2.61ian pm2.61i)

#  Miscellaneous inference relating falsehoods. 
thm (niabn () (niabn.1 ph) (-> (-. ps) (<-> (/\ ch ps) (-. ph))) ch ps pm3.27 niabn.1 ps pm2.24i pm5.21ni)

#  Lemma for an alternate version of weak deduction theorem. 
## <title> Weak Deduction Theorem Lemma </title>
thm (dedlem0a () () (-> ph (<-> ps (-> (-> ch ph) (/\ ps ph)))) ps (-> ch ph) ax-1 ph ch ax-1 ps imim1i com12 impbid2 ph ps iba (-> ch ph) imbi2d bitrd)

#  Lemma for an alternate version of weak deduction theorem. 
## <title> Weak Deduction Theorem Lemma </title>
thm (dedlem0b () () (-> (-. ph) (<-> ps (-> (-> ps ph) (/\ ch ph)))) ph (/\ ch ph) pm2.21 ps imim2d com23 ps ph pm2.21 ch ph pm3.27 imim12i con1d com12 impbid)

## <title> Weak Deduction Theorem Lemma </title>
thm (dedlema () () (-> ph (<-> ps (\/ (/\ ps ph) (/\ ch (-. ph))))) ps (/\ ch (-. ph)) orc ph ps idd ph ps pm2.24 ch adantld jaod impbid2 ph ps iba (/\ ch (-. ph)) orbi1d bitrd)

## <title> Weak Deduction Theorem Lemma </title>
thm (dedlemb () () (-> (-. ph) (<-> ch (\/ (/\ ps ph) (/\ ch (-. ph))))) (/\ ch (-. ph)) (/\ ps ph) olc expcom ph (-> ps ch) pm2.21 com23 imp3a ch (-. ph) pm3.26 (-. ph) a1i jaod impbid)

#  Hypothesis builder for weak deduction theorem.  For more information,
#        see the Deduction Theorem link on the Metamath Proof Explorer home
#        page. 
## <title> Hypothesis builder for weak deduction theorem </title>
thm (elimh () (elimh.1 (-> (<-> ph (\/ (/\ ph ch) (/\ ps (-. ch)))) (<-> ch ta)) elimh.2 (-> (<-> ps (\/ (/\ ph ch) (/\ ps (-. ch)))) (<-> th ta)) elimh.3 th) ta ch ph ps dedlema elimh.1 syl ibi elimh.3 ch ps ph dedlemb elimh.2 syl mpbii pm2.61i)

#  The weak deduction theorem.  For more information, see the Deduction
#        Theorem link on the Metamath Proof Explorer home page. 
## <title> Weak Deduction theorem </title>
thm (dedt () (dedt.1 (-> (<-> ph (\/ (/\ ph ch) (/\ ps (-. ch)))) (<-> th ta)) dedt.2 ta) (-> ch th) ch ph ps dedlema dedt.2 dedt.1 mpbiri syl)

#  Contraposition.  Theorem *2.16 of [bib/WhiteheadRussell] p. 103.  This version
#      of [[con3]] demonstrates the use of the weak deduction theorem to derive
#      it from [[con3i]]. 
## <title> Contraposition </title>
thm (con3th () () (-> (-> ph ps) (-> (-. ps) (-. ph))) (<-> ps (\/ (/\ ps (-> ph ps)) (/\ ph (-. (-> ph ps))))) id notbid (-. ph) imbi1d (<-> ps (\/ (/\ ps (-> ph ps)) (/\ ph (-. (-> ph ps))))) id ph imbi2d (<-> ph (\/ (/\ ps (-> ph ps)) (/\ ph (-. (-> ph ps))))) id ph imbi2d ph id elimh con3i dedt)
 
## <title> Consensus Theorem </title>
## <summary>
#      This theorem and its dual (with {{{\/}}} and {{{/\}}}
#      interchanged) are commonly used in computer logic design to eliminate
#      redundant terms from Boolean expressions.  Specifically, we prove that the
#      term #(/\ ps ch)# on the left-hand side is redundant.
## </summary>
thm (consensus () () (<-> (\/ (\/ (/\ ph ps) (/\ (-. ph) ch)) (/\ ps ch)) (\/ (/\ ph ps) (/\ (-. ph) ch))) (\/ (/\ ph ps) (/\ (-. ph) ch)) id ph ps ch dedlema biimpd ch adantrd ph ch ps dedlemb biimpd ps adantld pm2.61i ps ph ancom ch (-. ph) ancom orbi12i sylib jaoi (\/ (/\ ph ps) (/\ (-. ph) ch)) (/\ ps ch) orc impbii)

#  Theorem *4.42 of [bib/WhiteheadRussell] p. 119.  (Contributed by Roy F.
#      Longton, 21-Jun-2005.) 
thm (pm4.42 () () (<-> ph (\/ (/\ ph ps) (/\ ph (-. ps)))) ps ph ph dedlema ps ph ph dedlemb pm2.61i)

#  Miscellaneous inference relating falsehoods. 
thm (ninba () (ninba.1 ph) (-> (-. ps) (<-> (-. ph) (/\ ch ps))) ninba.1 ps ch niabn bicomd)

#  A specialized lemma for set theory (to derive the Axiom of Pairing). 
thm (prlem1 () (prlem1.1 (-> ph (<-> et ch)) prlem1.2 (-> ps (-. th))) (-> ph (-> ps (-> (\/ (/\ ps ch) (/\ th ta)) et))) prlem1.1 biimprcd ps adantl ps a1dd th et pm2.24 prlem1.2 syl5 ta adantr ph a1d jaoi com3l)

#  A specialized lemma for set theory (to derive the Axiom of Pairing). 
thm (prlem2 () () (<-> (\/ (/\ ph ps) (/\ ch th)) (/\ (\/ ph ch) (\/ (/\ ph ps) (/\ ch th)))) ph ch orabs ps anbi1i (\/ ph ch) ph ps anass bitri ch ph orabs ch ph orcom ch anbi1i bitri th anbi1i (\/ ph ch) ch th anass bitri orbi12i (\/ ph ch) (/\ ph ps) (/\ ch th) andi bitr4i)

#  A specialized lemma for set theory (ordered pair theorem). 
thm (oplem1 () (oplem1.1 (-> ph (\/ ps ch)) oplem1.2 (-> ph (\/ th ta)) oplem1.3 (<-> ps th) oplem1.4 (-> ch (<-> th ta))) (-> ph ps) oplem1.1 ord oplem1.2 ord oplem1.3 notbii syl5ib jcad oplem1.4 oplem1.3 syl5bb biimpar syl6 ps pm2.18 syl)

#  Lemma used in construction of real numbers. 
thm (rnlem () () (<-> (/\ (/\ ph ps) (/\ ch th)) (/\ (/\ (/\ ph ch) (/\ ps th)) (/\ (/\ ph th) (/\ ps ch)))) ph ps (/\ ch th) anandir ph ch th anandi ps ch th anandi anbi12i (/\ ps ch) (/\ ps th) ancom (/\ (/\ ph ch) (/\ ph th)) anbi2i (/\ ph ch) (/\ ph th) (/\ ps th) (/\ ps ch) an4 bitri 3bitri)

#  A single axiom for Boolean algebra known as DN_1.  See
#      [[http://www-unix.mcs.anl.gov/~mccune/papers/basax/v12.pdf]].
#      (Contributed by Jeffrey Hankins, 3-Jul-2009.) 
thm (dn1 () () (<-> (-. (\/ (-. (\/ (-. (\/ ph ps)) ch)) (-. (\/ ph (-. (\/ (-. ch) (-. (\/ ch th)))))))) ch) (\/ (-. (\/ ph ps)) ch) (\/ ph (-. (\/ (-. ch) (-. (\/ ch th))))) anor ph ps ioran ph (-> (-. ps) ch) pm2.24 com23 ch (\/ ch th) anor ch (-. ph) ax-1 (-. ps) a1d (\/ ch th) adantr sylbir jaoi com13 imp sylbi ch (\/ ph (-. (\/ (-. ch) (-. (\/ ch th))))) ax-1 jaoi imp ch (-. (\/ ph ps)) olc ch ph pm2.24 ch (-> (-. th) ph) pm2.24 imp3a ch th ioran syl5ib jaod con3d orrd jca impbii bitr3i)

defthm (df-3or wff (\/\/ ph ps ch) () () (<-> (\/\/ ph ps ch) (\/ (\/ ph ps) ch))
   (\/ (\/ ph ps) ch) biid)

defthm (df-3an wff (/\/\ ph ps ch) () () (<-> (/\/\ ph ps ch) (/\ (/\ ph ps) ch))
  (/\ (/\ ph ps) ch) biid)

#  Associative law for triple disjunction. 
thm (3orass () () (<-> (\/\/ ph ps ch) (\/ ph (\/ ps ch))) ph ps ch df-3or ph ps ch orass bitri)

#  Associative law for triple conjunction. 
thm (3anass () () (<-> (/\/\ ph ps ch) (/\ ph (/\ ps ch))) ph ps ch df-3an ph ps ch anass bitri)

#  Rotation law for triple conjunction. 
thm (3anrot () () (<-> (/\/\ ph ps ch) (/\/\ ps ch ph)) ph (/\ ps ch) ancom ph ps ch 3anass ps ch ph df-3an 3bitr4i)

#  Rotation law for triple disjunction. 
thm (3orrot () () (<-> (\/\/ ph ps ch) (\/\/ ps ch ph)) ph (\/ ps ch) orcom ph ps ch 3orass ps ch ph df-3or 3bitr4i)

#  Commutation law for triple conjunction. 
thm (3ancoma () () (<-> (/\/\ ph ps ch) (/\/\ ps ph ch)) ph ps ancom ch anbi1i ph ps ch df-3an ps ph ch df-3an 3bitr4i)

#  Commutation law for triple conjunction. 
thm (3ancomb () () (<-> (/\/\ ph ps ch) (/\/\ ph ch ps)) ph ps ch 3ancoma ps ph ch 3anrot bitri)

#  Reversal law for triple conjunction. 
thm (3anrev () () (<-> (/\/\ ph ps ch) (/\/\ ch ps ph)) ph ps ch 3ancoma ch ps ph 3anrot bitr4i)

#  Simplification of triple conjunction. 
thm (3simpa () () (-> (/\/\ ph ps ch) (/\ ph ps)) ph ps ch df-3an pm3.26bi)

#  Simplification of triple conjunction. 
thm (3simpb () () (-> (/\/\ ph ps ch) (/\ ph ch)) ph ps ch 3ancomb ph ch ps 3simpa sylbi)

#  Simplification of triple conjunction. 
thm (3simpc () () (-> (/\/\ ph ps ch) (/\ ps ch)) ph ps ch 3anrot ps ch ph 3simpa sylbi)

#  Simplification of triple conjunction. 
thm (3simp1 () () (-> (/\/\ ph ps ch) ph) ph ps ch 3simpa pm3.26d)

#  Simplification of triple conjunction. 
thm (3simp2 () () (-> (/\/\ ph ps ch) ps) ph ps ch 3simpa pm3.27d)

#  Simplification of triple conjunction. 
thm (3simp3 () () (-> (/\/\ ph ps ch) ch) ph ps ch 3simpc pm3.27d)

#  Simplification rule.  (Contributed by Jeff Hankins, 17-Nov-2009.) 
thm (3simpl1 () () (-> (/\ (/\/\ ph ps ch) th) ph) ph ps ch 3simp1 th adantr)

#  Simplification rule.  (Contributed by Jeff Hankins, 17-Nov-2009.) 
thm (3simpl2 () () (-> (/\ (/\/\ ph ps ch) th) ps) ph ps ch 3simp2 th adantr)

#  Simplification rule.  (Contributed by Jeff Hankins, 17-Nov-2009.) 
thm (3simpl3 () () (-> (/\ (/\/\ ph ps ch) th) ch) ph ps ch 3simp3 th adantr)

#  Simplification rule.  (Contributed by Jeff Hankins, 17-Nov-2009.) 
thm (3simpr1 () () (-> (/\ ph (/\/\ ps ch th)) ps) ps ch th 3simp1 ph adantl)

#  Simplification rule.  (Contributed by Jeff Hankins, 17-Nov-2009.) 
thm (3simpr2 () () (-> (/\ ph (/\/\ ps ch th)) ch) ps ch th 3simp2 ph adantl)

#  Simplification rule.  (Contributed by Jeff Hankins, 17-Nov-2009.) 
thm (3simpr3 () () (-> (/\ ph (/\/\ ps ch th)) th) ps ch th 3simp3 ph adantl)

#  Infer a conjunct from a triple conjunction. 
thm (3simp1i () (3simp1i.1 (/\/\ ph ps ch)) ph 3simp1i.1 ph ps ch 3simp1 ax-mp)

#  Infer a conjunct from a triple conjunction. 
thm (3simp2i () (3simp1i.1 (/\/\ ph ps ch)) ps 3simp1i.1 ph ps ch 3simp2 ax-mp)

#  Infer a conjunct from a triple conjunction. 
thm (3simp3i () (3simp1i.1 (/\/\ ph ps ch)) ch 3simp1i.1 ph ps ch 3simp3 ax-mp)

#  Deduce a conjunct from a triple conjunction. 
thm (3simp1d () (3simp1d.1 (-> ph (/\/\ ps ch th))) (-> ph ps) 3simp1d.1 ps ch th 3simp1 syl)

#  Deduce a conjunct from a triple conjunction. 
thm (3simp2d () (3simp1d.1 (-> ph (/\/\ ps ch th))) (-> ph ch) 3simp1d.1 ps ch th 3simp2 syl)

#  Deduce a conjunct from a triple conjunction. 
thm (3simp3d () (3simp1d.1 (-> ph (/\/\ ps ch th))) (-> ph th) 3simp1d.1 ps ch th 3simp3 syl)

#  Deduction adding a conjunct to antecedent. 
thm (3adant1 () (3adant.1 (-> (/\ ph ps) ch)) (-> (/\/\ th ph ps) ch) th ph ps 3simpc 3adant.1 syl)

#  Deduction adding a conjunct to antecedent. 
thm (3adant2 () (3adant.1 (-> (/\ ph ps) ch)) (-> (/\/\ ph th ps) ch) ph th ps 3simpb 3adant.1 syl)

#  Deduction adding a conjunct to antecedent. 
thm (3adant3 () (3adant.1 (-> (/\ ph ps) ch)) (-> (/\/\ ph ps th) ch) ph ps th 3simpa 3adant.1 syl)

#  Deduction adding conjuncts to an antecedent. 
thm (3ad2ant1 () (3ad2ant.1 (-> ph ch)) (-> (/\/\ ph ps th) ch) 3ad2ant.1 th adantr ps 3adant2)

#  Deduction adding conjuncts to an antecedent. 
thm (3ad2ant2 () (3ad2ant.1 (-> ph ch)) (-> (/\/\ ps ph th) ch) 3ad2ant.1 th adantr ps 3adant1)

#  Deduction adding conjuncts to an antecedent. 
thm (3ad2ant3 () (3ad2ant.1 (-> ph ch)) (-> (/\/\ ps th ph) ch) 3ad2ant.1 th adantl ps 3adant1)

#  Deduction adding a conjunct to antecedent. 
thm (3adantl1 () (3adantl.1 (-> (/\ (/\ ph ps) ch) th)) (-> (/\ (/\/\ ta ph ps) ch) th) 3adantl.1 ex ta 3adant1 imp)

#  Deduction adding a conjunct to antecedent. 
thm (3adantl2 () (3adantl.1 (-> (/\ (/\ ph ps) ch) th)) (-> (/\ (/\/\ ph ta ps) ch) th) 3adantl.1 ex ta 3adant2 imp)

#  Deduction adding a conjunct to antecedent. 
thm (3adantl3 () (3adantl.1 (-> (/\ (/\ ph ps) ch) th)) (-> (/\ (/\/\ ph ps ta) ch) th) 3adantl.1 ex ta 3adant3 imp)

#  Deduction adding a conjunct to antecedent. 
thm (3adantr1 () (3adantr.1 (-> (/\ ph (/\ ps ch)) th)) (-> (/\ ph (/\/\ ta ps ch)) th) 3adantr.1 ancoms ta 3adantl1 ancoms)

#  Deduction adding a conjunct to antecedent. 
thm (3adantr2 () (3adantr.1 (-> (/\ ph (/\ ps ch)) th)) (-> (/\ ph (/\/\ ps ta ch)) th) 3adantr.1 ancoms ta 3adantl2 ancoms)

#  Deduction adding a conjunct to antecedent. 
thm (3adantr3 () (3adantr.1 (-> (/\ ph (/\ ps ch)) th)) (-> (/\ ph (/\/\ ps ch ta)) th) 3adantr.1 ancoms ta 3adantl3 ancoms)

#  Deduction adding conjuncts to antecedent. 
thm (3ad2antl1 () (3ad2antl.1 (-> (/\ ph ch) th)) (-> (/\ (/\/\ ph ps ta) ch) th) 3ad2antl.1 ta adantlr ps 3adantl2)

#  Deduction adding conjuncts to antecedent. 
thm (3ad2antl2 () (3ad2antl.1 (-> (/\ ph ch) th)) (-> (/\ (/\/\ ps ph ta) ch) th) 3ad2antl.1 ta adantlr ps 3adantl1)

#  Deduction adding conjuncts to antecedent. 
thm (3ad2antl3 () (3ad2antl.1 (-> (/\ ph ch) th)) (-> (/\ (/\/\ ps ta ph) ch) th) 3ad2antl.1 ta adantll ps 3adantl1)

#  Deduction adding a conjuncts to antecedent. 
thm (3ad2antr1 () (3ad2antl.1 (-> (/\ ph ch) th)) (-> (/\ ph (/\/\ ch ps ta)) th) 3ad2antl.1 ps adantrr ta 3adantr3)

#  Deduction adding a conjuncts to antecedent. 
thm (3ad2antr2 () (3ad2antl.1 (-> (/\ ph ch) th)) (-> (/\ ph (/\/\ ps ch ta)) th) 3ad2antl.1 ps adantrl ta 3adantr3)

#  Deduction adding a conjuncts to antecedent. 
thm (3ad2antr3 () (3ad2antl.1 (-> (/\ ph ch) th)) (-> (/\ ph (/\/\ ps ta ch)) th) 3ad2antl.1 ta adantrl ps 3adantr1)

#  Introduction in triple disjunction. 
thm (3mix1 () () (-> ph (\/\/ ph ps ch)) ph (\/ ps ch) orc ph ps ch 3orass sylibr)

#  Introduction in triple disjunction. 
thm (3mix2 () () (-> ph (\/\/ ps ph ch)) ph ch ps 3mix1 ps ph ch 3orrot sylibr)

#  Introduction in triple disjunction. 
thm (3mix3 () () (-> ph (\/\/ ps ch ph)) ph ps ch 3mix1 ph ps ch 3orrot sylib)

#  Infer conjunction of premises. 
thm (3pm3.2i () (3pm3.2i.1 ph 3pm3.2i.2 ps 3pm3.2i.3 ch) (/\/\ ph ps ch) ph ps ch df-3an 3pm3.2i.1 3pm3.2i.2 pm3.2i 3pm3.2i.3 mpbir2an)

#  Join consequents with conjunction. 
thm (3jca () (3jca.1 (-> ph ps) 3jca.2 (-> ph ch) 3jca.3 (-> ph th)) (-> ph (/\/\ ps ch th)) 3jca.1 3jca.2 jca 3jca.3 jca ps ch th df-3an sylibr)

#  Deduction conjoining the consequents of three implications. 
thm (3jcad () (3jcad.1 (-> ph (-> ps ch)) 3jcad.2 (-> ph (-> ps th)) 3jcad.3 (-> ph (-> ps ta))) (-> ph (-> ps (/\/\ ch th ta))) 3jcad.1 imp 3jcad.2 imp 3jcad.3 imp 3jca ex)

#  Join antecedents and consequents with conjunction. 
thm (3anim123i () (3anim123i.1 (-> ph ps) 3anim123i.2 (-> ch th) 3anim123i.3 (-> ta et)) (-> (/\/\ ph ch ta) (/\/\ ps th et)) 3anim123i.1 3anim123i.2 anim12i 3anim123i.3 anim12i ph ch ta df-3an ps th et df-3an 3imtr4i)

#  Join 3 biconditionals with conjunction. 
thm (3anbi123i () (bi3.1 (<-> ph ps) bi3.2 (<-> ch th) bi3.3 (<-> ta et)) (<-> (/\/\ ph ch ta) (/\/\ ps th et)) bi3.1 bi3.2 anbi12i bi3.3 anbi12i ph ch ta df-3an ps th et df-3an 3bitr4i)

#  Join 3 biconditionals with disjunction. 
thm (3orbi123i () (bi3.1 (<-> ph ps) bi3.2 (<-> ch th) bi3.3 (<-> ta et)) (<-> (\/\/ ph ch ta) (\/\/ ps th et)) bi3.1 bi3.2 orbi12i bi3.3 orbi12i ph ch ta df-3or ps th et df-3or 3bitr4i)

#  Inference adding two conjuncts to each side of a biconditional. 
thm (3anbi1i () (3anbi1i.1 (<-> ph ps)) (<-> (/\/\ ph ch th) (/\/\ ps ch th)) 3anbi1i.1 ch biid th biid 3anbi123i)

#  Inference adding two conjuncts to each side of a biconditional. 
thm (3anbi2i () (3anbi1i.1 (<-> ph ps)) (<-> (/\/\ ch ph th) (/\/\ ch ps th)) ch biid 3anbi1i.1 th biid 3anbi123i)

#  Inference adding two conjuncts to each side of a biconditional. 
thm (3anbi3i () (3anbi1i.1 (<-> ph ps)) (<-> (/\/\ ch th ph) (/\/\ ch th ps)) ch biid th biid 3anbi1i.1 3anbi123i)

#  Importation inference. 
thm (3imp () (3imp.1 (-> ph (-> ps (-> ch th)))) (-> (/\/\ ph ps ch) th) ph ps ch df-3an 3imp.1 imp31 sylbi)

#  Importation from double to triple conjunction. 
thm (3impa () (3impa.1 (-> (/\ (/\ ph ps) ch) th)) (-> (/\/\ ph ps ch) th) 3impa.1 exp31 3imp)

#  Importation from double to triple conjunction. 
thm (3impb () (3impb.1 (-> (/\ ph (/\ ps ch)) th)) (-> (/\/\ ph ps ch) th) 3impb.1 exp32 3imp)

#  Importation to triple conjunction. 
thm (3impia () (3impia.1 (-> (/\ ph ps) (-> ch th))) (-> (/\/\ ph ps ch) th) 3impia.1 ex 3imp)

#  Importation to triple conjunction. 
thm (3impib () (3impib.1 (-> ph (-> (/\ ps ch) th))) (-> (/\/\ ph ps ch) th) 3impib.1 exp3a 3imp)

#  Exportation inference. 
thm (3exp () (3exp.1 (-> (/\/\ ph ps ch) th)) (-> ph (-> ps (-> ch th))) ph ps ch df-3an 3exp.1 sylbir exp31)

#  Exportation from triple to double conjunction. 
thm (3expa () (3exp.1 (-> (/\/\ ph ps ch) th)) (-> (/\ (/\ ph ps) ch) th) 3exp.1 3exp imp31)

#  Exportation from triple to double conjunction. 
thm (3expb () (3exp.1 (-> (/\/\ ph ps ch) th)) (-> (/\ ph (/\ ps ch)) th) 3exp.1 3exp imp32)

#  Exportation from triple conjunction. 
thm (3expia () (3exp.1 (-> (/\/\ ph ps ch) th)) (-> (/\ ph ps) (-> ch th)) 3exp.1 3exp imp)

#  Exportation from triple conjunction. 
thm (3expib () (3exp.1 (-> (/\/\ ph ps ch) th)) (-> ph (-> (/\ ps ch) th)) 3exp.1 3exp imp3a)

#  Commutation in antecedent.  Swap 1st and 3rd. 
thm (3com12 () (3exp.1 (-> (/\/\ ph ps ch) th)) (-> (/\/\ ps ph ch) th) 3exp.1 3exp com12 3imp)

#  Commutation in antecedent.  Swap 1st and 3rd. 
thm (3com13 () (3exp.1 (-> (/\/\ ph ps ch) th)) (-> (/\/\ ch ps ph) th) ch ps ph 3anrev 3exp.1 sylbi)

#  Commutation in antecedent.  Swap 2nd and 3rd. 
thm (3com23 () (3exp.1 (-> (/\/\ ph ps ch) th)) (-> (/\/\ ph ch ps) th) 3exp.1 3exp com23 3imp)

#  Commutation in antecedent.  Rotate left. 
thm (3coml () (3exp.1 (-> (/\/\ ph ps ch) th)) (-> (/\/\ ps ch ph) th) 3exp.1 3com23 3com13)

#  Commutation in antecedent.  Rotate right. 
thm (3comr () (3exp.1 (-> (/\/\ ph ps ch) th)) (-> (/\/\ ch ph ps) th) 3exp.1 3coml 3coml)

#  Deduction adding a conjunct to antecedent. 
thm (3adant3r1 () (3exp.1 (-> (/\/\ ph ps ch) th)) (-> (/\ ph (/\/\ ta ps ch)) th) 3exp.1 3expb ta 3adantr1)

#  Deduction adding a conjunct to antecedent. 
thm (3adant3r2 () (3exp.1 (-> (/\/\ ph ps ch) th)) (-> (/\ ph (/\/\ ps ta ch)) th) 3exp.1 3expb ta 3adantr2)

#  Deduction adding a conjunct to antecedent. 
thm (3adant3r3 () (3exp.1 (-> (/\/\ ph ps ch) th)) (-> (/\ ph (/\/\ ps ch ta)) th) 3exp.1 3expb ta 3adantr3)

#  Swap conjuncts. 
thm (3an1rs () (3an1rs.1 (-> (/\ (/\/\ ph ps ch) th) ta)) (-> (/\ (/\/\ ph ps th) ch) ta) 3an1rs.1 ex 3exp com34 3imp imp)

#  Importation to left triple conjunction. 
thm (3imp1 () (3imp1.1 (-> ph (-> ps (-> ch (-> th ta))))) (-> (/\ (/\/\ ph ps ch) th) ta) 3imp1.1 3imp imp)

#  Importation deduction for triple conjunction. 
thm (3impd () (3imp1.1 (-> ph (-> ps (-> ch (-> th ta))))) (-> ph (-> (/\/\ ps ch th) ta)) 3imp1.1 com4l 3imp com12)

#  Importation to right triple conjunction. 
thm (3imp2 () (3imp1.1 (-> ph (-> ps (-> ch (-> th ta))))) (-> (/\ ph (/\/\ ps ch th)) ta) 3imp1.1 3impd imp)

#  Exportation from left triple conjunction. 
thm (3exp1 () (3exp1.1 (-> (/\ (/\/\ ph ps ch) th) ta)) (-> ph (-> ps (-> ch (-> th ta)))) 3exp1.1 ex 3exp)

#  Exportation deduction for triple conjunction. 
thm (3expd () (3expd.1 (-> ph (-> (/\/\ ps ch th) ta))) (-> ph (-> ps (-> ch (-> th ta)))) 3expd.1 com12 3exp com4r)

#  Exportation from right triple conjunction. 
thm (3exp2 () (3exp2.1 (-> (/\ ph (/\/\ ps ch th)) ta)) (-> ph (-> ps (-> ch (-> th ta)))) 3exp2.1 ex 3expd)

#  Deduction adding a conjunct to antecedent. 
thm (3adant1l () (3adant1l.1 (-> (/\/\ ph ps ch) th)) (-> (/\/\ (/\ ta ph) ps ch) th) 3adant1l.1 3expb ta adantll 3impb)

#  Deduction adding a conjunct to antecedent. 
thm (3adant1r () (3adant1l.1 (-> (/\/\ ph ps ch) th)) (-> (/\/\ (/\ ph ta) ps ch) th) 3adant1l.1 3expb ta adantlr 3impb)

#  Deduction adding a conjunct to antecedent. 
thm (3adant2l () (3adant1l.1 (-> (/\/\ ph ps ch) th)) (-> (/\/\ ph (/\ ta ps) ch) th) 3adant1l.1 3com12 ta 3adant1l 3com12)

#  Deduction adding a conjunct to antecedent. 
thm (3adant2r () (3adant1l.1 (-> (/\/\ ph ps ch) th)) (-> (/\/\ ph (/\ ps ta) ch) th) 3adant1l.1 3com12 ta 3adant1r 3com12)

#  Deduction adding a conjunct to antecedent. 
thm (3adant3l () (3adant1l.1 (-> (/\/\ ph ps ch) th)) (-> (/\/\ ph ps (/\ ta ch)) th) 3adant1l.1 3com13 ta 3adant1l 3com13)

#  Deduction adding a conjunct to antecedent. 
thm (3adant3r () (3adant1l.1 (-> (/\/\ ph ps ch) th)) (-> (/\/\ ph ps (/\ ch ta)) th) 3adant1l.1 3com13 ta 3adant1r 3com13)

#  A syllogism inference combined with contraction. 
thm (syl3anc () (syl3anc.1 (-> (/\/\ ph ps ch) th) syl3anc.2 (-> ta ph) syl3anc.3 (-> ta ps) syl3anc.4 (-> ta ch)) (-> ta th) syl3anc.2 syl3anc.3 syl3anc.4 3jca syl3anc.1 syl)

#  A syllogism inference. 
thm (syl3an1 () (syl3an.1 (-> (/\/\ ph ps ch) th) syl3an1.2 (-> ta ph)) (-> (/\/\ ta ps ch) th) syl3an.1 3expb syl3an1.2 sylan 3impb)

#  A syllogism inference. 
thm (syl3an2 () (syl3an.1 (-> (/\/\ ph ps ch) th) syl3an2.2 (-> ta ps)) (-> (/\/\ ph ta ch) th) syl3an.1 3exp syl3an2.2 syl5 3imp)

#  A syllogism inference. 
thm (syl3an3 () (syl3an.1 (-> (/\/\ ph ps ch) th) syl3an3.2 (-> ta ch)) (-> (/\/\ ph ps ta) th) syl3an.1 3exp syl3an3.2 syl7 3imp)

#  A syllogism inference. 
thm (syl3an1b () (syl3an.1 (-> (/\/\ ph ps ch) th) syl3an1b.2 (<-> ta ph)) (-> (/\/\ ta ps ch) th) syl3an.1 syl3an1b.2 biimpi syl3an1)

#  A syllogism inference. 
thm (syl3an2b () (syl3an.1 (-> (/\/\ ph ps ch) th) syl3an2b.2 (<-> ta ps)) (-> (/\/\ ph ta ch) th) syl3an.1 syl3an2b.2 biimpi syl3an2)

#  A syllogism inference. 
thm (syl3an3b () (syl3an.1 (-> (/\/\ ph ps ch) th) syl3an3b.2 (<-> ta ch)) (-> (/\/\ ph ps ta) th) syl3an.1 syl3an3b.2 biimpi syl3an3)

#  A syllogism inference. 
thm (syl3an1br () (syl3an.1 (-> (/\/\ ph ps ch) th) syl3an1br.2 (<-> ph ta)) (-> (/\/\ ta ps ch) th) syl3an.1 syl3an1br.2 biimpri syl3an1)

#  A syllogism inference. 
thm (syl3an2br () (syl3an.1 (-> (/\/\ ph ps ch) th) syl3an2br.2 (<-> ps ta)) (-> (/\/\ ph ta ch) th) syl3an.1 syl3an2br.2 biimpri syl3an2)

#  A syllogism inference. 
thm (syl3an3br () (syl3an.1 (-> (/\/\ ph ps ch) th) syl3an3br.2 (<-> ch ta)) (-> (/\/\ ph ps ta) th) syl3an.1 syl3an3br.2 biimpri syl3an3)

#  A triple syllogism inference. 
thm (syl3an () (syl3an.1 (-> (/\/\ ph ps ch) th) syl3an.2 (-> ta ph) syl3an.3 (-> et ps) syl3an.4 (-> ze ch)) (-> (/\/\ ta et ze) th) syl3an.2 syl3an.3 syl3an.4 3anim123i syl3an.1 syl)

#  A triple syllogism inference. 
thm (syl3anb () (syl3an.1 (-> (/\/\ ph ps ch) th) syl3anb.2 (<-> ta ph) syl3anb.3 (<-> et ps) syl3anb.4 (<-> ze ch)) (-> (/\/\ ta et ze) th) syl3anb.2 syl3anb.3 syl3anb.4 3anbi123i syl3an.1 sylbi)

#  A syllogism inference. 
thm (syld3an3 () (syl3an.1 (-> (/\/\ ph ps ch) th) syld3an3.2 (-> (/\/\ ph ps ta) ch)) (-> (/\/\ ph ps ta) th) syl3an.1 ph ps ta 3simp1 ph ps ta 3simp2 syld3an3.2 syl3anc)

#  A syllogism inference. 
thm (syld3an1 () (syl3an.1 (-> (/\/\ ph ps ch) th) syld3an1.2 (-> (/\/\ ta ps ch) ph)) (-> (/\/\ ta ps ch) th) syl3an.1 3com13 syld3an1.2 3com13 syld3an3 3com13)

#  A syllogism inference. 
thm (syld3an2 () (syl3an.1 (-> (/\/\ ph ps ch) th) syld3an2.2 (-> (/\/\ ph ta ch) ps)) (-> (/\/\ ph ta ch) th) syl3an.1 3com23 syld3an2.2 3com23 syld3an3 3com23)

#  A syllogism inference. 
thm (syl3anl1 () (syl3anl1.1 (-> (/\ (/\/\ ph ps ch) th) ta) syl3anl1.2 (-> et ph)) (-> (/\ (/\/\ et ps ch) th) ta) syl3anl1.1 ex syl3anl1.2 syl3an1 imp)

#  A syllogism inference. 
thm (syl3anl2 () (syl3anl1.1 (-> (/\ (/\/\ ph ps ch) th) ta) syl3anl2.2 (-> et ps)) (-> (/\ (/\/\ ph et ch) th) ta) syl3anl1.1 ex syl3anl2.2 syl3an2 imp)

#  A syllogism inference. 
thm (syl3anl3 () (syl3anl1.1 (-> (/\ (/\/\ ph ps ch) th) ta) syl3anl3.2 (-> et ch)) (-> (/\ (/\/\ ph ps et) th) ta) syl3anl1.1 ex syl3anl3.2 syl3an3 imp)

#  A triple syllogism inference. 
thm (syl3anl () (syl3anl1.1 (-> (/\ (/\/\ ph ps ch) th) ta) syl3anl.2 (-> et ph) syl3anl.3 (-> ze ps) syl3anl.4 (-> si ch)) (-> (/\ (/\/\ et ze si) th) ta) syl3anl1.1 syl3anl.2 syl3anl.3 syl3anl.4 3anim123i sylan)

#  A syllogism inference. 
thm (syl3anr1 () (syl3anr1.1 (-> (/\ ph (/\/\ ps ch th)) ta) syl3anr1.2 (-> et ps)) (-> (/\ ph (/\/\ et ch th)) ta) syl3anr1.1 ancoms syl3anr1.2 syl3anl1 ancoms)

#  A syllogism inference. 
thm (syl3anr2 () (syl3anr1.1 (-> (/\ ph (/\/\ ps ch th)) ta) syl3anr2.2 (-> et ch)) (-> (/\ ph (/\/\ ps et th)) ta) syl3anr1.1 ancoms syl3anr2.2 syl3anl2 ancoms)

#  A syllogism inference. 
thm (syl3anr3 () (syl3anr1.1 (-> (/\ ph (/\/\ ps ch th)) ta) syl3anr3.2 (-> et th)) (-> (/\ ph (/\/\ ps ch et)) ta) syl3anr1.1 ancoms syl3anr3.2 syl3anl3 ancoms)

#  Importation inference (undistribute conjunction). 
thm (3impdi () (3impdi.1 (-> (/\ (/\ ph ps) (/\ ph ch)) th)) (-> (/\/\ ph ps ch) th) 3impdi.1 anandis 3impb)

#  Importation inference (undistribute conjunction). 
thm (3impdir () (3impdir.1 (-> (/\ (/\ ph ps) (/\ ch ps)) th)) (-> (/\/\ ph ch ps) th) 3impdir.1 anandirs 3impa)

#  Inference from idempotent law for conjunction. 
thm (3anidm12 () (3anidm12.1 (-> (/\/\ ph ph ps) ch)) (-> (/\ ph ps) ch) 3anidm12.1 3exp pm2.43i imp)

#  Inference from idempotent law for conjunction. 
thm (3anidm13 () (3anidm13.1 (-> (/\/\ ph ps ph) ch)) (-> (/\ ph ps) ch) 3anidm13.1 3com23 3anidm12)

#  Inference from idempotent law for conjunction. 
thm (3anidm23 () (3anidm23.1 (-> (/\/\ ph ps ps) ch)) (-> (/\ ph ps) ch) 3anidm23.1 3exp pm2.43d imp)

#  Infer implication from triple disjunction. 
thm (3ori () (3ori.1 (\/\/ ph ps ch)) (-> (/\ (-. ph) (-. ps)) ch) ph ps ioran 3ori.1 ph ps ch df-3or mpbi ori sylbir)

#  Disjunction of 3 antecedents. 
thm (3jao () () (-> (/\/\ (-> ph ps) (-> ch ps) (-> th ps)) (-> (\/\/ ph ch th) ps)) ph ps ch jao (\/ ph ch) ps th jao syl6 3imp ph ch th df-3or syl5ib)

#  Disjunction of 3 antecedents (inference). 
thm (3jaoi () (3jaoi.1 (-> ph ps) 3jaoi.2 (-> ch ps) 3jaoi.3 (-> th ps)) (-> (\/\/ ph ch th) ps) 3jaoi.1 3jaoi.2 3jaoi.3 3pm3.2i ph ps ch th 3jao ax-mp)

#  Disjunction of 3 antecedents (deduction). 
thm (3jaod () (3jaod.1 (-> ph (-> ps ch)) 3jaod.2 (-> ph (-> th ch)) 3jaod.3 (-> ph (-> ta ch))) (-> ph (-> (\/\/ ps th ta) ch)) ps ch th ta 3jao 3jaod.1 3jaod.2 3jaod.3 syl3anc)

#  Disjunction of 3 antecedents (inference). 
thm (3jaoian () (3jaoian.1 (-> (/\ ph ps) ch) 3jaoian.2 (-> (/\ th ps) ch) 3jaoian.3 (-> (/\ ta ps) ch)) (-> (/\ (\/\/ ph th ta) ps) ch) 3jaoian.1 ex 3jaoian.2 ex 3jaoian.3 ex 3jaoi imp)

#  Disjunction of 3 antecedents (deduction). 
thm (3jaodan () (3jaodan.1 (-> (/\ ph ps) ch) 3jaodan.2 (-> (/\ ph th) ch) 3jaodan.3 (-> (/\ ph ta) ch)) (-> (/\ ph (\/\/ ps th ta)) ch) 3jaodan.1 ex 3jaodan.2 ex 3jaodan.3 ex 3jaod imp)

#  Nested syllogism inference conjoining 3 dissimilar antecedents. 
thm (syl3an9b () (syl3an9b.1 (-> ph (<-> ps ch)) syl3an9b.2 (-> th (<-> ch ta)) syl3an9b.3 (-> et (<-> ta ze))) (-> (/\/\ ph th et) (<-> ps ze)) syl3an9b.1 syl3an9b.2 sylan9bb syl3an9b.3 sylan9bb 3impa)

#  Deduction joining 3 equivalences to form equivalence of disjunctions. 
thm (3orbi123d () (bi3d.1 (-> ph (<-> ps ch)) bi3d.2 (-> ph (<-> th ta)) bi3d.3 (-> ph (<-> et ze))) (-> ph (<-> (\/\/ ps th et) (\/\/ ch ta ze))) bi3d.1 bi3d.2 orbi12d bi3d.3 orbi12d ps th et df-3or ch ta ze df-3or 3bitr4g)

#  Deduction joining 3 equivalences to form equivalence of conjunctions. 
thm (3anbi123d () (bi3d.1 (-> ph (<-> ps ch)) bi3d.2 (-> ph (<-> th ta)) bi3d.3 (-> ph (<-> et ze))) (-> ph (<-> (/\/\ ps th et) (/\/\ ch ta ze))) bi3d.1 bi3d.2 anbi12d bi3d.3 anbi12d ps th et df-3an ch ta ze df-3an 3bitr4g)

#  Deduction conjoining and adding a conjunct to equivalences. 
thm (3anbi12d () (3anbi12d.1 (-> ph (<-> ps ch)) 3anbi12d.2 (-> ph (<-> th ta))) (-> ph (<-> (/\/\ ps th et) (/\/\ ch ta et))) 3anbi12d.1 3anbi12d.2 ph et biidd 3anbi123d)

#  Deduction conjoining and adding a conjunct to equivalences. 
thm (3anbi13d () (3anbi12d.1 (-> ph (<-> ps ch)) 3anbi12d.2 (-> ph (<-> th ta))) (-> ph (<-> (/\/\ ps et th) (/\/\ ch et ta))) 3anbi12d.1 ph et biidd 3anbi12d.2 3anbi123d)

#  Deduction conjoining and adding a conjunct to equivalences. 
thm (3anbi23d () (3anbi12d.1 (-> ph (<-> ps ch)) 3anbi12d.2 (-> ph (<-> th ta))) (-> ph (<-> (/\/\ et ps th) (/\/\ et ch ta))) ph et biidd 3anbi12d.1 3anbi12d.2 3anbi123d)

#  Deduction adding conjuncts to an equivalence. 
thm (3anbi1d () (3anbi1d.1 (-> ph (<-> ps ch))) (-> ph (<-> (/\/\ ps th ta) (/\/\ ch th ta))) 3anbi1d.1 ph th biidd ta 3anbi12d)

#  Deduction adding conjuncts to an equivalence. 
thm (3anbi2d () (3anbi1d.1 (-> ph (<-> ps ch))) (-> ph (<-> (/\/\ th ps ta) (/\/\ th ch ta))) ph th biidd 3anbi1d.1 ta 3anbi12d)

#  Deduction adding conjuncts to an equivalence. 
thm (3anbi3d () (3anbi1d.1 (-> ph (<-> ps ch))) (-> ph (<-> (/\/\ th ta ps) (/\/\ th ta ch))) ph th biidd 3anbi1d.1 ta 3anbi13d)

#  Deduction joining 3 implications to form implication of conjunctions. 
thm (3anim123d () (3anim123d.1 (-> ph (-> ps ch)) 3anim123d.2 (-> ph (-> th ta)) 3anim123d.3 (-> ph (-> et ze))) (-> ph (-> (/\/\ ps th et) (/\/\ ch ta ze))) 3anim123d.1 3anim123d.2 anim12d 3anim123d.3 anim12d ps th et df-3an ch ta ze df-3an 3imtr4g)

#  Deduction joining 3 implications to form implication of disjunctions. 
thm (3orim123d () (3anim123d.1 (-> ph (-> ps ch)) 3anim123d.2 (-> ph (-> th ta)) 3anim123d.3 (-> ph (-> et ze))) (-> ph (-> (\/\/ ps th et) (\/\/ ch ta ze))) 3anim123d.1 3anim123d.2 orim12d 3anim123d.3 orim12d ps th et df-3or ch ta ze df-3or 3imtr4g)

#  Rearrangement of 6 conjuncts. 
thm (an6 () () (<-> (/\ (/\/\ ph ps ch) (/\/\ th ta et)) (/\/\ (/\ ph th) (/\ ps ta) (/\ ch et))) ph ps ch df-3an th ta et df-3an anbi12i (/\ ph ps) ch (/\ th ta) et an4 ph ps th ta an4 (/\ ch et) anbi1i 3bitri (/\ ph th) (/\ ps ta) (/\ ch et) df-3an bitr4i)

#  An inference based on modus ponens. 
thm (mp3an1 () (mp3an1.1 ph mp3an1.2 (-> (/\/\ ph ps ch) th)) (-> (/\ ps ch) th) mp3an1.1 mp3an1.2 3expb mpan)

#  An inference based on modus ponens. 
thm (mp3an2 () (mp3an2.1 ps mp3an2.2 (-> (/\/\ ph ps ch) th)) (-> (/\ ph ch) th) mp3an2.1 mp3an2.2 3expa mpanl2)

#  An inference based on modus ponens. 
thm (mp3an3 () (mp3an3.1 ch mp3an3.2 (-> (/\/\ ph ps ch) th)) (-> (/\ ph ps) th) mp3an3.1 mp3an3.2 3expa mpan2)

#  An inference based on modus ponens. 
thm (mp3an12 () (mp3an12.1 ph mp3an12.2 ps mp3an12.3 (-> (/\/\ ph ps ch) th)) (-> ch th) mp3an12.2 mp3an12.1 mp3an12.3 mp3an1 mpan)

#  An inference based on modus ponens. 
thm (mp3an13 () (mp3an13.1 ph mp3an13.2 ch mp3an13.3 (-> (/\/\ ph ps ch) th)) (-> ps th) mp3an13.1 mp3an13.2 mp3an13.3 mp3an3 mpan)

#  An inference based on modus ponens. 
thm (mp3an23 () (mp3an23.1 ps mp3an23.2 ch mp3an23.3 (-> (/\/\ ph ps ch) th)) (-> ph th) mp3an23.1 mp3an23.2 mp3an23.3 mp3an3 mpan2)

#  An inference based on modus ponens. 
thm (mp3an1i () (mp3an1i.1 ps mp3an1i.2 (-> ph (-> (/\/\ ps ch th) ta))) (-> ph (-> (/\ ch th) ta)) mp3an1i.1 mp3an1i.2 com12 mp3an1 com12)

#  An inference based on modus ponens. 
thm (mp3anl1 () (mp3anl1.1 ph mp3anl1.2 (-> (/\ (/\/\ ph ps ch) th) ta)) (-> (/\ (/\ ps ch) th) ta) mp3anl1.1 mp3anl1.2 ex mp3an1 imp)

#  An inference based on modus ponens. 
thm (mp3anl2 () (mp3anl2.1 ps mp3anl2.2 (-> (/\ (/\/\ ph ps ch) th) ta)) (-> (/\ (/\ ph ch) th) ta) mp3anl2.1 mp3anl2.2 ex mp3an2 imp)

#  An inference based on modus ponens. 
thm (mp3anl3 () (mp3anl3.1 ch mp3anl3.2 (-> (/\ (/\/\ ph ps ch) th) ta)) (-> (/\ (/\ ph ps) th) ta) mp3anl3.1 mp3anl3.2 ex mp3an3 imp)

#  An inference based on modus ponens. 
thm (mp3anr1 () (mp3anr1.1 ps mp3anr1.2 (-> (/\ ph (/\/\ ps ch th)) ta)) (-> (/\ ph (/\ ch th)) ta) mp3anr1.1 mp3anr1.2 ancoms mp3anl1 ancoms)

#  An inference based on modus ponens. 
thm (mp3anr2 () (mp3anr2.1 ch mp3anr2.2 (-> (/\ ph (/\/\ ps ch th)) ta)) (-> (/\ ph (/\ ps th)) ta) mp3anr2.1 mp3anr2.2 ancoms mp3anl2 ancoms)

#  An inference based on modus ponens. 
thm (mp3anr3 () (mp3anr3.1 th mp3anr3.2 (-> (/\ ph (/\/\ ps ch th)) ta)) (-> (/\ ph (/\ ps ch)) ta) mp3anr3.1 mp3anr3.2 ancoms mp3anl3 ancoms)

#  An inference based on modus ponens. 
thm (mp3an () (mp3an.1 ph mp3an.2 ps mp3an.3 ch mp3an.4 (-> (/\/\ ph ps ch) th)) th mp3an.2 mp3an.3 mp3an.1 mp3an.4 mp3an1 mp2an)

#  An inference based on modus ponens. 
thm (mpd3an3 () (mpd3an3.2 (-> (/\ ph ps) ch) mpd3an3.3 (-> (/\/\ ph ps ch) th)) (-> (/\ ph ps) th) mpd3an3.2 mpd3an3.3 3expa mpdan)

#  An inference based on modus ponens. 
thm (mpd3an23 () (mpd3an23.1 (-> ph ps) mpd3an23.2 (-> ph ch) mpd3an23.3 (-> (/\/\ ph ps ch) th)) (-> ph th) mpd3an23.3 ph id mpd3an23.1 mpd3an23.2 syl3anc)

#  Infer implication from a logical equivalence.  Similar to [[biimpa]]. 
thm (biimp3a () (biimp3a.1 (-> (/\ ph ps) (<-> ch th))) (-> (/\/\ ph ps ch) th) biimp3a.1 biimpa 3impa)

#  Infer implication from a logical equivalence.  Similar to [[biimpar]]. 
thm (biimp3ar () (biimp3a.1 (-> (/\ ph ps) (<-> ch th))) (-> (/\/\ ph ps th) ch) biimp3a.1 biimpar 3impa)

#  Inference that undistributes a triple conjunction in the antecedent. 
thm (3anandis () (3anandis.1 (-> (/\/\ (/\ ph ps) (/\ ph ch) (/\ ph th)) ta)) (-> (/\ ph (/\/\ ps ch th)) ta) 3anandis.1 ps ch th 3simp1 ph anim2i ps ch th 3simp2 ph anim2i ps ch th 3simp3 ph anim2i syl3anc)

#  Inference that undistributes a triple conjunction in the antecedent. 
thm (3anandirs () (3anandirs.1 (-> (/\/\ (/\ ph th) (/\ ps th) (/\ ch th)) ta)) (-> (/\ (/\/\ ph ps ch) th) ta) 3anandirs.1 ph ps ch 3simp1 th anim1i ph ps ch 3simp2 th anim1i ph ps ch 3simp3 th anim1i syl3anc)

#  Deduction for elimination by cases. 
thm (ecase23d () (ecase23d.1 (-> ph (-. ch)) ecase23d.2 (-> ph (-. th)) ecase23d.3 (-> ph (\/\/ ps ch th))) (-> ph ps) ecase23d.1 ecase23d.2 jca ch th ioran sylibr ecase23d.3 ps ch th 3orass sylib ord mt3d)

#  Inference for elimination by cases. 
thm (3ecase () (3ecase.1 (-> (-. ph) th) 3ecase.2 (-> (-. ps) th) 3ecase.3 (-> (-. ch) th) 3ecase.4 (-> (/\/\ ph ps ch) th)) th 3ecase.4 3exp 3ecase.1 ch a1d ps a1d pm2.61i 3ecase.2 3ecase.3 pm2.61nii)

## <title> Meredith's sole axiom for propositional calculus </title>
## <summary>
##      Carew Meredith's sole axiom for propositional calculus.  This amazing
##      formula is thought to be the shortest possible single axiom for
##      propositional calculus with inference rule [[ax-mp]], where negation and
##      implication are primitive.  Here we prove Meredith's axiom from [[ax-1]],
##      [[ax-2]], and [[ax-3]].  Then from it we derive the Lukasiewicz axioms
##      [[luk-1]], [[luk-2]], and [[luk-3]].  Using these we finally re-derive our
##      axioms as [[ax1]], [[ax2]], and [[ax3]], thus proving the equivalence of
##      all three systems.  C. A. Meredith, "Single Axioms for the Systems
##      (C,N), (C,O) and (A,N) of the Two-Valued Propositional Calculus," //The
##      Journal of Computing Systems// vol. 1 (1953), pp. 155-164.  Meredith
##      claimed to be close to a proof that this axiom is the shortest possible,
##     but the proof was apparently never completed.
## 
##      An obscure Irish lecturer, Meredith (1904-1976) became enamored with
##      logic somewhat late in life after attending talks by Lukasiewicz and
##      produced many remarkable results such as this axiom.  From his obituary:
##      "He did logic whenever time and opportunity presented themselves, and he
##      did it on whatever materials came to hand:  in a pub, his favored pint
##      of porter within reach, he would use the inside of cigarette packs to
##      write proofs for logical colleagues." 
## </summary>
thm (meredith () () (-> (-> (-> (-> (-> ph ps) (-> (-. ch) (-. th))) ch) ta) (-> (-> ta ph) (-> th ph))) ch (-> (-. ch) (-> (-. ph) (-. th))) ax-3 ph ps pm2.21 (-> (-. ch) (-. th)) imim1i com23 syl5 ta imim1i con3d (-. ch) (-> (-. ph) (-. th)) pm2.27 impi com12 (-. ta) imim2d com12 a2d ta ph con3 syl5 ph th ax-3 syl6 syl)

#  Step 3 of Meredith's proof of Lukasiewicz axioms from his sole axiom.
#      (The step numbers refer to Meredith's original paper.) 
thm (merlem1 () () (-> (-> (-> ch (-> (-. ph) ps)) ta) (-> ph ta)) (-. ph) ps (-> (-. ta) (-. ch)) (-. (-> (-. ph) ps)) ta meredith (-> (-. ph) ps) (-> (-. (-> (-. ta) (-. ch))) (-. (-. (-> (-. ph) ps)))) ta ch (-> (-> ta (-. ph)) (-> (-. (-> (-. ph) ps)) (-. ph))) meredith ax-mp ta (-. ph) (-> (-. ph) ps) ph (-> ch (-> (-. ph) ps)) meredith ax-mp)

#  Step 4 of Meredith's proof of Lukasiewicz axioms from his sole axiom. 
thm (merlem2 () () (-> (-> (-> ph ph) ch) (-> th ch)) (-> ch ch) ph (-. th) ph merlem1 ch ch ph th (-> ph ph) meredith ax-mp)

#  Step 7 of Meredith's proof of Lukasiewicz axioms from his sole axiom. 
thm (merlem3 () () (-> (-> (-> ps ch) ph) (-> ch ph)) (-. ch) (-> (-. ch) (-. ch)) (-> ph ph) merlem2 (-> (-. ch) (-. ch)) (-> (-> ph ph) (-> (-. ch) (-. ch))) (-> (-> (-> ch ph) (-> (-. ps) (-. ps))) ps) merlem2 ax-mp ch ph ps ps (-> (-> ph ph) (-> (-. ch) (-. ch))) meredith ax-mp ph ph ch ch (-> ps ch) meredith ax-mp)

#  Step 8 of Meredith's proof of Lukasiewicz axioms from his sole axiom. 
thm (merlem4 () () (-> ta (-> (-> ta ph) (-> th ph))) ph ph th th ta meredith (-> (-> (-> ph ph) (-> (-. th) (-. th))) th) ta (-> (-> ta ph) (-> th ph)) merlem3 ax-mp)

#  Step 11 of Meredith's proof of Lukasiewicz axioms from his sole axiom. 
thm (merlem5 () () (-> (-> ph ps) (-> (-. (-. ph)) ps)) ps ps ps ps ps meredith ps ps ps (-. (-. ph)) ph meredith (-> ph ps) (-. ph) ps (-. (-> (-> (-> (-> (-> ps ps) (-> (-. ps) (-. ps))) ps) ps) (-> (-> ps ps) (-> ps ps)))) merlem1 (-> (-> (-> (-> ph ps) (-> (-. (-. ph)) ps)) (-. (-> (-> (-> (-> (-> ps ps) (-> (-. ps) (-. ps))) ps) ps) (-> (-> ps ps) (-> ps ps))))) (-> (-. ph) (-. (-> (-> (-> (-> (-> ps ps) (-> (-. ps) (-. ps))) ps) ps) (-> (-> ps ps) (-> ps ps)))))) ph (-> (-> (-> ps ps) (-> (-. ps) (-. (-. (-. ph))))) ps) merlem4 ax-mp (-> (-> ph ps) (-> (-. (-. ph)) ps)) (-. (-> (-> (-> (-> (-> ps ps) (-> (-. ps) (-. ps))) ps) ps) (-> (-> ps ps) (-> ps ps)))) ph (-> (-> (-> (-> (-> ps ps) (-> (-. ps) (-. ps))) ps) ps) (-> (-> ps ps) (-> ps ps))) (-> (-> (-> (-> ps ps) (-> (-. ps) (-. (-. (-. ph))))) ps) ph) meredith ax-mp ax-mp ax-mp)

#  Step 12 of Meredith's proof of Lukasiewicz axioms from his sole axiom. 
thm (merlem6 () () (-> ch (-> (-> (-> ps ch) ph) (-> th ph))) (-> ps ch) ph th merlem4 ps ch (-> (-> (-> ps ch) ph) (-> th ph)) merlem3 ax-mp)

#  Between steps 14 and 15 of Meredith's proof of Lukasiewicz axioms from his
#      sole axiom. 
thm (merlem7 () () (-> ph (-> (-> (-> ps ch) th) (-> (-> (-> ch ta) (-> (-. th) (-. ps))) th))) (-> ps ch) th (-> (-> ch ta) (-> (-. th) (-. ps))) merlem4 (-> (-> (-> ch ta) (-> (-. th) (-. ps))) th) (-> (-> ps ch) th) (-. ph) (-. ch) merlem6 ch ta th ps (-> (-> (-> (-> (-> ps ch) th) (-> (-> (-> ch ta) (-> (-. th) (-. ps))) th)) (-. ph)) (-> (-. ch) (-. ph))) meredith ax-mp (-> (-> (-> ps ch) th) (-> (-> (-> ch ta) (-> (-. th) (-. ps))) th)) (-. ph) ch ph (-> ps ch) meredith ax-mp ax-mp)

#  Step 15 of Meredith's proof of Lukasiewicz axioms from his sole axiom. 
thm (merlem8 () () (-> (-> (-> ps ch) th) (-> (-> (-> ch ta) (-> (-. th) (-. ps))) th)) ph ph ph ph ph meredith (-> (-> (-> (-> (-> ph ph) (-> (-. ph) (-. ph))) ph) ph) (-> (-> ph ph) (-> ph ph))) ps ch th ta merlem7 ax-mp)

#  Step 18 of Meredith's proof of Lukasiewicz axioms from his sole
#        axiom. 
thm (merlem9 () () (-> (-> (-> ph ps) (-> ch (-> th (-> ps ta)))) (-> et (-> ch (-> th (-> ps ta))))) (-> th (-> ps ta)) ch (-. et) (-. ps) merlem6 th (-> ps ta) (-> (-> (-> ch (-> th (-> ps ta))) (-. et)) (-> (-. ps) (-. et))) (-> (-. (-> (-. (-> (-> (-> ch (-> th (-> ps ta))) (-. et)) (-> (-. ps) (-. et)))) (-. th))) (-. ph)) merlem8 ax-mp ps ta (-> (-. (-> (-> (-> ch (-> th (-> ps ta))) (-. et)) (-> (-. ps) (-. et)))) (-. th)) ph (-> (-> (-> ch (-> th (-> ps ta))) (-. et)) (-> (-. ps) (-. et))) meredith ax-mp (-> ch (-> th (-> ps ta))) (-. et) ps et (-> ph ps) meredith ax-mp)

#  Step 19 of Meredith's proof of Lukasiewicz axioms from his sole axiom. 
thm (merlem10 () () (-> (-> ph (-> ph ps)) (-> th (-> ph ps))) ph ph ph ph ph meredith (-> ph ps) ph ph th ph meredith (-> (-> (-> (-> ph ps) ph) (-> (-. ph) (-. th))) ph) ph (-> ph (-> ph ps)) th ps (-> (-> (-> (-> (-> ph ph) (-> (-. ph) (-. ph))) ph) ph) (-> (-> ph ph) (-> ph ph))) merlem9 ax-mp ax-mp)

#  Step 20 of Meredith's proof of Lukasiewicz axioms from his sole axiom. 
thm (merlem11 () () (-> (-> ph (-> ph ps)) (-> ph ps)) ph ph ph ph ph meredith ph ps (-> ph (-> ph ps)) merlem10 (-> ph (-> ph ps)) (-> ph ps) (-> (-> (-> (-> (-> ph ph) (-> (-. ph) (-. ph))) ph) ph) (-> (-> ph ph) (-> ph ph))) merlem10 ax-mp ax-mp)

#  Step 28 of Meredith's proof of Lukasiewicz axioms from his sole axiom. 
thm (merlem12 () () (-> (-> (-> th (-> (-. (-. ch)) ch)) ph) ph) ch ch merlem5 ch (-> (-. (-. ch)) ch) th merlem2 ax-mp (-> th (-> (-. (-. ch)) ch)) ph (-> (-> th (-> (-. (-. ch)) ch)) ph) merlem4 ax-mp (-> (-> th (-> (-. (-. ch)) ch)) ph) ph merlem11 ax-mp)

#  Step 35 of Meredith's proof of Lukasiewicz axioms from his sole axiom. 
thm (merlem13 () () (-> (-> ph ps) (-> (-> (-> th (-> (-. (-. ch)) ch)) (-. (-. ph))) ps)) th ch (-. (-> (-> th (-> (-. (-. ch)) ch)) (-. (-. ph)))) merlem12 th ch (-. (-. ph)) merlem12 (-> (-> th (-> (-. (-. ch)) ch)) (-. (-. ph))) (-. (-. ph)) merlem5 ax-mp (-> (-. (-. (-> (-> th (-> (-. (-. ch)) ch)) (-. (-. ph))))) (-. (-. ph))) (-> (-. (-> (-> th (-> (-. (-. ch)) ch)) (-. (-. ph)))) ps) (-. (-> (-> th (-> (-. (-. ch)) ch)) (-. (-. ph)))) (-> th (-> (-. (-. ch)) ch)) merlem6 ax-mp (-. (-> (-> th (-> (-. (-. ch)) ch)) (-. (-. ph)))) ps (-. (-> (-> th (-> (-. (-. ch)) ch)) (-. (-. ph)))) (-. ph) (-> (-> th (-> (-. (-. ch)) ch)) (-. (-> (-> th (-> (-. (-. ch)) ch)) (-. (-. ph))))) meredith ax-mp ax-mp (-> (-. ph) (-. (-> (-> th (-> (-. (-. ch)) ch)) (-. (-. ph))))) (-> ps ps) ph (-> (-> (-> ps ps) (-> (-. ph) (-. (-> (-> th (-> (-. (-. ch)) ch)) (-. (-. ph)))))) ph) merlem6 ax-mp (-> (-> (-> ps ps) (-> (-. ph) (-. (-> (-> th (-> (-. (-. ch)) ch)) (-. (-. ph)))))) ph) ph merlem11 ax-mp ps ps ph (-> (-> th (-> (-. (-. ch)) ch)) (-. (-. ph))) ph meredith ax-mp)

#  1 of 3 axioms for propositional calculus due to Lukasiewicz, derived from
#      Meredith's sole axiom. 
thm (luk-1 () () (-> (-> ph ps) (-> (-> ps ch) (-> ph ch))) ch ch (-. (-. ph)) ph ps meredith ph ps (-> ch ch) (-. ph) merlem13 (-> ph ps) (-> (-> (-> (-> ch ch) (-> (-. (-. (-. ph))) (-. ph))) (-. (-. ph))) ps) (-> (-> (-> ps ch) (-> ph ch)) ph) (-. (-> ph ps)) merlem13 ax-mp (-> (-> ps ch) (-> ph ch)) ph (-. (-. (-> ph ps))) (-> ph ps) (-> (-> (-> (-> ch ch) (-> (-. (-. (-. ph))) (-. ph))) (-. (-. ph))) ps) meredith ax-mp ax-mp)

#  2 of 3 axioms for propositional calculus due to Lukasiewicz, derived from
#      Meredith's sole axiom. 
thm (luk-2 () () (-> (-> (-. ph) ph) ph) ph (-. (-> (-. ph) ph)) merlem5 (-> (-> ph (-. (-> (-. ph) ph))) (-> (-. (-. ph)) (-. (-> (-. ph) ph)))) (-. ph) (-> (-> (-> ph (-. (-> (-. ph) ph))) (-> (-. (-. ph)) (-. (-> (-. ph) ph)))) (-. ph)) merlem4 ax-mp (-> (-> (-> ph (-. (-> (-. ph) ph))) (-> (-. (-. ph)) (-. (-> (-. ph) ph)))) (-. ph)) (-. ph) merlem11 ax-mp ph (-. (-> (-. ph) ph)) (-. ph) (-> (-. ph) ph) (-. ph) meredith ax-mp (-> (-. ph) ph) ph merlem11 ax-mp)

#  3 of 3 axioms for propositional calculus due to Lukasiewicz, derived from
#      Meredith's sole axiom. 
thm (luk-3 () () (-> ph (-> (-. ph) ps)) (-. ph) ps merlem11 (-. ph) ph ps (-> (-. ph) ps) merlem1 ax-mp)

#  Used to rederive standard propositional axioms from Lukasiewicz'. 
thm (luklem1 () (luklem1.1 (-> ph ps) luklem1.2 (-> ps ch)) (-> ph ch) luklem1.2 luklem1.1 ph ps ch luk-1 ax-mp ax-mp)

#  Used to rederive standard propositional axioms from Lukasiewicz'. 
thm (luklem2 () () (-> (-> ph (-. ps)) (-> (-> (-> ph ch) th) (-> ps th))) ph (-. ps) ch luk-1 ps ch luk-3 ps (-> (-. ps) ch) (-> ph ch) luk-1 ax-mp luklem1 ps (-> ph ch) th luk-1 luklem1)

#  Used to rederive standard propositional axioms from Lukasiewicz'. 
thm (luklem3 () () (-> ph (-> (-> (-> (-. ph) ps) ch) (-> th ch))) ph (-. th) luk-3 (-. ph) th ps ch luklem2 luklem1)

#  Used to rederive standard propositional axioms from Lukasiewicz'. 
thm (luklem4 () () (-> (-> (-> (-> (-. ph) ph) ph) ps) ps) (-> (-> (-. ph) ph) ph) luk-2 ph luk-2 (-> (-> (-. ph) ph) ph) (-> (-> (-. ph) ph) ph) (-> (-> (-. ph) ph) ph) (-. ps) luklem3 ax-mp ax-mp (-. ps) (-> (-> (-. ph) ph) ph) ps luk-1 ax-mp ps luk-2 luklem1)

#  Used to rederive standard propositional axioms from Lukasiewicz'. 
thm (luklem5 () () (-> ph (-> ps ph)) ph ph ph ps luklem3 ph (-> ps ph) luklem4 luklem1)

#  Used to rederive standard propositional axioms from Lukasiewicz'. 
thm (luklem6 () () (-> (-> ph (-> ph ps)) (-> ph ps)) ph (-> ph ps) ps luk-1 (-. (-> ph ps)) (-. ps) luklem5 (-. ps) (-> ph ps) ps ps luklem2 ps (-> (-> ph ps) ps) luklem4 luklem1 luklem1 (-. (-> ph ps)) (-> (-> ph ps) ps) (-> ph ps) luk-1 ax-mp (-> (-> (-> ph ps) ps) (-> ph ps)) (-> (-. (-> ph ps)) (-> ph ps)) (-> ph ps) luk-1 ax-mp (-> ph ps) (-> (-> (-> (-> ph ps) ps) (-> ph ps)) (-> ph ps)) luklem4 ax-mp luklem1)

#  Used to rederive standard propositional axioms from Lukasiewicz'. 
thm (luklem7 () () (-> (-> ph (-> ps ch)) (-> ps (-> ph ch))) ph (-> ps ch) ch luk-1 ps (-> ps ch) luklem5 (-> ps ch) ps ch luk-1 luklem1 (-> ps ch) ch luklem6 luklem1 ps (-> (-> ps ch) ch) (-> ph ch) luk-1 ax-mp luklem1)

#  Used to rederive standard propositional axioms from Lukasiewicz'. 
thm (luklem8 () () (-> (-> ph ps) (-> (-> ch ph) (-> ch ps))) ch ph ps luk-1 (-> ch ph) (-> ph ps) (-> ch ps) luklem7 ax-mp)

#  Standard propositional axiom derived from Lukasiewicz axioms. 
thm (ax1 () () (-> ph (-> ps ph)) ph ps luklem5)

#  Standard propositional axiom derived from Lukasiewicz axioms. 
thm (ax2 () () (-> (-> ph (-> ps ch)) (-> (-> ph ps) (-> ph ch))) ph ps ch luklem7 ps (-> ph ch) ph luklem8 ph ch luklem6 (-> ph (-> ph ch)) (-> ph ch) (-> ph ps) luklem8 ax-mp luklem1 luklem1)

#  Standard propositional axiom derived from Lukasiewicz axioms. 
thm (ax3 () () (-> (-> (-. ph) (-. ps)) (-> ps ph)) (-. ph) ps ph ph luklem2 ph (-> ps ph) luklem4 luklem1)

defthm (df-nand wff (-/\ ph ps) () () (<-> (-/\ ph ps) (-. (/\ ph ps)))
  (-. (/\ ph ps)) biid)

#  Lemma for handling nested 'nand's. 
thm (nic-justlem () () (<-> (-/\ ph (-/\ ch ps)) (-> ph (/\ ch ps))) ch ps df-nand ph anbi2i notbii ph (-/\ ch ps) df-nand ph (/\ ch ps) iman 3bitr4i)

#  Show equivalence between implication and the Nicod version.  To derive
#      [[nic-dfim]], apply [[nic-justbi]]. 
thm (nic-justim () () (<-> (-> ph ps) (-/\ ph (-/\ ps ps))) ph ps ps nic-justlem ph ps anidmdbi bitr2i)

#  Show equivalence between negation and the Nicod version.  To derive
#      [[nic-dfneg]], apply [[nic-justbi]]. 
thm (nic-justneg () () (<-> (-. ps) (-/\ ps ps)) ps ps df-nand ps anidm notbii bitr2i)

#  Show equivalence between the bidirectional and the Nicod version.
#      (Contributed by Jeff Hoffman, 19-Nov-2007.) 
thm (nic-justbi () () (<-> (<-> ph ps) (-/\ (-/\ ph ps) (-/\ (-/\ ph ph) (-/\ ps ps)))) (/\ ph ps) (/\ (-. ph) (-. ps)) pm4.57 (-/\ ph ps) (-/\ (-/\ ph ph) (-/\ ps ps)) df-nand ph ps df-nand (-/\ ph ph) (-/\ ps ps) df-nand ph nic-justneg ps nic-justneg anbi12i notbii bitr4i anbi12i notbii bitri ph ps dfbi3 3bitr4ri)

#  Define implication in terms of 'nand'.  Analogous to
#      #(<-> (-/\ ph (-/\ ps ps)) (-> ph ps))#.  In a pure
#      (standalone) treatment of Nicod's axiom, this theorem would be changed
#      to a definition ($a statement). 
thm (nic-dfim () () (-/\ (-/\ (-/\ ph (-/\ ps ps)) (-> ph ps)) (-/\ (-/\ (-/\ ph (-/\ ps ps)) (-/\ ph (-/\ ps ps))) (-/\ (-> ph ps) (-> ph ps)))) ph ps nic-justim bicomi (-/\ ph (-/\ ps ps)) (-> ph ps) nic-justbi mpbi)

#  Define negation in terms of 'nand'.  Analogous to
#      #(<-> (-/\ ph ph) (-. ph))#.  In a pure (standalone) treatment of
#      Nicod's axiom, this theorem would be changed to a definition ($a
#      statement). 
thm (nic-dfneg () () (-/\ (-/\ (-/\ ph ph) (-. ph)) (-/\ (-/\ (-/\ ph ph) (-/\ ph ph)) (-/\ (-. ph) (-. ph)))) ph nic-justneg bicomi (-/\ ph ph) (-. ph) nic-justbi mpbi)

#  Derive Nicod's rule of modus ponens using 'nand', from the standard
#        one.  Although the major and minor premise together also imply #ch#,
#        this form is necessary for useful derivations from [[nic-ax]].  In a
#        pure (standalone) treatment of Nicod's axiom, this theorem would be
#        changed to an axiom ($a statement).  (Contributed by Jeff Hoffman,
#        19-Nov-2007.) 
thm (nic-mp () (nic-jmin ph nic-jmaj (-/\ ph (-/\ ch ps))) ps nic-jmin nic-jmaj ph ch ps nic-justlem mpbi pm3.27d ax-mp)

#  A direct proof of [[nic-mp]]. 
thm (nic-mpALT () (nic-jmin ph nic-jmaj (-/\ ph (-/\ ch ps))) ps nic-jmin nic-jmaj ph (-/\ ch ps) df-nand ch ps df-nand ph anbi2i notbii bitri mpbi ph (/\ ch ps) iman mpbir pm3.27d ax-mp)

#  Nicod's axiom derived from the standard ones.  See //Intro. to Math. Phil.//
#      by B. Russell, p. 152.  Like [[meredith]], the usual axioms can be derived
#      from this and vice versa.  Unlike [[meredith]], Nicod uses a different
#      connective ('nand'), so another form of modus ponens must be used in
#      proofs, e.g. {{{{}}} [[nic-ax]], [[nic-mp]]  {{{}}}} is equivalent to
#      {{{{}}} [[luk-1]], [[luk-2]], [[luk-3]], [[ax-mp]] {{{}}}}.  In a pure
#      (standalone) treatment of Nicod's axiom, this theorem would be changed
#      to an axiom ($a statement).  (Contributed by Jeff Hoffman,
#      19-Nov-2007.) 
thm (nic-ax () () (-/\ (-/\ ph (-/\ ch ps)) (-/\ (-/\ ta (-/\ ta ta)) (-/\ (-/\ th ch) (-/\ (-/\ ph th) (-/\ ph th))))) ph ch ps nic-justlem biimpi ch ps pm3.26 ph imim2i ph ch con3 th imim2d ph th imnan th ph con2b ph th df-nand 3bitr4ri syl6ibr th ch imnan th ch df-nand bitr4i syl5ibr (-/\ th ch) (-/\ ph th) nic-justim sylib 3syl ta pm4.24 biimpi ta ta ta nic-justlem mpbir jctil (-/\ ph (-/\ ch ps)) (-/\ ta (-/\ ta ta)) (-/\ (-/\ th ch) (-/\ (-/\ ph th) (-/\ ph th))) nic-justlem mpbir)

#  A direct proof of [[nic-ax]]. 
thm (nic-axALT () () (-/\ (-/\ ph (-/\ ch ps)) (-/\ (-/\ ta (-/\ ta ta)) (-/\ (-/\ th ch) (-/\ (-/\ ph th) (-/\ ph th))))) ch ps pm3.26 ph imim2i ph ch con3 th imim2d syl ta anidm biimpri jctil ch ps df-nand ph anbi2i notbii ph (-/\ ch ps) df-nand ph (/\ ch ps) iman 3bitr4i (-/\ ta (-/\ ta ta)) (-/\ (-/\ th ch) (-/\ (-/\ ph th) (-/\ ph th))) df-nand ta ta df-nand ta anbi2i notbii ta (-/\ ta ta) df-nand ta (/\ ta ta) iman 3bitr4i th ch df-nand th ch imnan bitr4i (-/\ ph th) (-/\ ph th) df-nand (-/\ ph th) anidm ph th df-nand ph th imnan ph th con2b bitr3i 3bitri notbii bitri anbi12i notbii (-/\ th ch) (-/\ (-/\ ph th) (-/\ ph th)) df-nand (-> th (-. ch)) (-> th (-. ph)) iman 3bitr4i anbi12i notbii bitri anbi12i notbii (-> ph (/\ ch ps)) (/\ (-> ta (/\ ta ta)) (-> (-> th (-. ch)) (-> th (-. ph)))) iman bitr4i mpbir (-/\ ph (-/\ ch ps)) (-/\ (-/\ ta (-/\ ta ta)) (-/\ (-/\ th ch) (-/\ (-/\ ph th) (-/\ ph th)))) df-nand mpbir)

#  Inference for [[nic-mp]] using [[nic-ax]] as major premise.  (Contributed
#         by Jeff Hoffman, 17-Nov-2007.)  
thm (nic-imp () (nic-imp.1 (-/\ ph (-/\ ch ps))) (-/\ (-/\ th ch) (-/\ (-/\ ph th) (-/\ ph th))) nic-imp.1 ph ch ps ta th nic-ax nic-mp)

#  Lemma for [[nic-id]]. 
thm (nic-idlem1 () () (-/\ (-/\ th (-/\ ta (-/\ ta ta))) (-/\ (-/\ (-/\ ph (-/\ ch ps)) th) (-/\ (-/\ ph (-/\ ch ps)) th))) ph ch ps ta ph nic-ax th nic-imp)

#  Lemma for [[nic-id]].  Inference used by [[nic-id]]. 
thm (nic-idlem2 () (nic-idlem2.1 (-/\ et (-/\ (-/\ ph (-/\ ch ps)) th))) (-/\ (-/\ th (-/\ ta (-/\ ta ta))) et) nic-idlem2.1 ph ch ps ta ph nic-ax th nic-imp et nic-imp nic-mp)

#  Theorem [[id]] expressed with {{{-/\}}}.  (Contributed by Jeff Hoffman,
#      17-Nov-2007.) 
thm (nic-id () () (-/\ ta (-/\ ta ta)) ps ps ps th ph nic-ax ch nic-idlem2 (-/\ ch (-/\ ch ch)) ta (-/\ ph ps) (-/\ ps ph) (-/\ ps ph) nic-idlem1 ps nic-idlem2 nic-mp)

#  {{{-/\}}} is symmetric.  (Contributed by Jeff Hoffman, 17-Nov-2007.)  
thm (nic-swap () () (-/\ (-/\ th ph) (-/\ (-/\ ph th) (-/\ ph th))) ph nic-id ph ph ph ta th nic-ax nic-mp)

#  Inference version of [[nic-swap]].  (Contributed by Jeff Hoffman,
#        17-Nov-2007.) 
thm (nic-isw1 () (nic-isw1.1 (-/\ th ph)) (-/\ ph th) nic-isw1.1 th ph nic-swap nic-mp)

#  Inference for swapping nested terms.  (Contributed by Jeff Hoffman,
#        17-Nov-2007.) 
thm (nic-isw2 () (nic-isw2.1 (-/\ ps (-/\ th ph))) (-/\ ps (-/\ ph th)) nic-isw2.1 ph th nic-swap ps nic-imp nic-mp nic-isw1)

#  Inference version of [[nic-imp]] using right-handed term.  (Contributed
#        by Jeff Hoffman, 17-Nov-2007.) 
thm (nic-iimp1 () (nic-iimp1.1 (-/\ ph (-/\ ch ps)) nic-iimp1.2 (-/\ th ch)) (-/\ th ph) nic-iimp1.2 nic-iimp1.1 th nic-imp nic-mp nic-isw1)

#  Inference version of [[nic-imp]] using left-handed term.  (Contributed
#        by Jeff Hoffman, 17-Nov-2007.) 
thm (nic-iimp2 () (nic-iimp2.1 (-/\ (-/\ ph ps) (-/\ ch ch)) nic-iimp2.2 (-/\ th ph)) (-/\ th (-/\ ch ch)) nic-iimp2.1 nic-isw1 nic-iimp2.2 nic-iimp1)

#  Inference to remove the trailing term.  (Contributed by Jeff Hoffman,
#        17-Nov-2007.) 
thm (nic-idel () (nic-idel.1 (-/\ ph (-/\ ch ps))) (-/\ ph (-/\ ch ch)) ch nic-id nic-isw1 nic-idel.1 (-/\ ch ch) nic-imp nic-mp)

#  Chained inference.  (Contributed by Jeff Hoffman, 17-Nov-2007.) 
thm (nic-ich () (nic-ich.1 (-/\ ph (-/\ ps ps)) nic-ich.2 (-/\ ps (-/\ ch ch))) (-/\ ph (-/\ ch ch)) nic-ich.2 nic-isw1 nic-ich.1 (-/\ ch ch) nic-imp nic-mp)

#  Double the terms.  Since doubling is the same as negation,
#        this can be viewed as a contraposition Inference.  (Contributed
#        by Jeff Hoffman, 17-Nov-2007.) 
thm (nic-idbl () (nic-idbl.1 (-/\ ph (-/\ ps ps))) (-/\ (-/\ ps ps) (-/\ (-/\ ph ph) (-/\ ph ph))) nic-idbl.1 ps nic-imp nic-idbl.1 ph nic-imp nic-ich)

#  For nic-* definitions, the biconditional connective is not used.  Instead,
#      definitions are made based on this form.  [[nic-bi1]] and [[nic-bi2]] are
#      used to convert the definitions into usable theorems about one side of the
#      implication.  (Contributed by Jeff Hoffman, 18-Nov-2007.)  
thm (nic-bijust () () (-/\ (-/\ ta ta) (-/\ (-/\ ta ta) (-/\ ta ta))) (-/\ ta ta) nic-id)

#  Inference to extract one side of an implication from a definition 
thm (nic-bi1 () (nic-bi1.1 (-/\ (-/\ ph ps) (-/\ (-/\ ph ph) (-/\ ps ps)))) (-/\ ph (-/\ ps ps)) nic-bi1.1 ph nic-id nic-iimp1 nic-isw2 nic-idel)

#  Inference to extract the other side of an implication from a
#         'biconditional' definition. 
thm (nic-bi2 () (nic-bi2.1 (-/\ (-/\ ph ps) (-/\ (-/\ ph ph) (-/\ ps ps)))) (-/\ ps (-/\ ph ph)) nic-bi2.1 nic-isw2 ps nic-id nic-iimp1 nic-idel)

#  Derive the standard modus ponens from [[nic-mp]].  (Contributed by Jeff
#        Hoffman, 18-Nov-2007.) 
thm (nic-stdmp () (nic-smin ph nic-smaj (-> ph ps)) ps nic-smin nic-smaj ph ps nic-dfim nic-bi2 nic-mp nic-mp)

#  Proof of [[luk-1]] from [[nic-ax]] and [[nic-mp]] (and definitions
#      [[nic-dfim]] and [[nic-dfneg]]).  Note that the standard axioms [[ax-1]],
#      [[ax-2]], and [[ax-3]] are proved from the Lukasiewicz axioms by theorems
#      [[ax1]], [[ax2]], and [[ax3]].  (Contributed by Jeff Hoffman,
#      18-Nov-2007.) 
thm (nic-luk1 () () (-> (-> ph ps) (-> (-> ps ch) (-> ph ch))) ph ps nic-dfim nic-bi2 ph ps ps ta (-/\ ch ch) nic-ax nic-isw2 nic-idel ph ch nic-dfim nic-bi1 nic-idbl (-/\ (-/\ ch ch) ps) nic-imp ps ch nic-dfim nic-bi2 ps (-/\ ch ch) nic-swap nic-ich (-/\ (-> ph ch) (-> ph ch)) nic-imp nic-ich nic-ich (-> ps ch) (-> ph ch) nic-dfim nic-bi1 nic-ich nic-ich (-> ph ps) (-> (-> ps ch) (-> ph ch)) nic-dfim nic-bi1 nic-mp)

#  Proof of [[luk-2]] from [[nic-ax]] and [[nic-mp]].  (Contributed by Jeff
#      Hoffman, 18-Nov-2007.) 
thm (nic-luk2 () () (-> (-> (-. ph) ph) ph) (-. ph) ph nic-dfim nic-bi2 ph nic-dfneg (-/\ ph ph) nic-id nic-iimp1 nic-isw2 nic-iimp1 nic-isw1 (-> (-. ph) ph) ph nic-dfim nic-bi1 nic-mp)

#  Proof of [[luk-3]] from [[nic-ax]] and [[nic-mp]].  (Contributed by Jeff
#      Hoffman, 18-Nov-2007.) 
thm (nic-luk3 () () (-> ph (-> (-. ph) ps)) (-. ph) ps nic-dfim nic-bi1 ph nic-dfneg nic-bi2 ph nic-id nic-iimp1 nic-iimp2 ph (-> (-. ph) ps) nic-dfim nic-bi1 nic-mp)
####
# END METAMATH DUMP
####
thm (anbi2 () () (-> (<-> ph ps) (<-> (/\ ch ph) (/\ ch ps)))
    (<-> ph ps) id
    ch anbi2d
)

# Reverse the hypothesis and conclusion of con4bii.
## <title> Equivalence over Negation </title>
## <table>
##   (<->     [ ph ]       [ ps ] )
##   (<-> (-. [ ph ] ) (-. [ ps ] ))
## </table>
thm (con4biir ()
  (hyp (<-> ph ps))
  (<-> (-. ph) (-. ps))
  hyp ph ps notbi
  mpbi
)

# Reorder sylbi a bit.
## <title> Syllogism </title>
## <table>
##   (->      ps ] ]    ] ch)
##       (<-> ps ] [ ph ] )
##   (->         [ [ ph ] ch)
## </table>
thm (sylbi2()
  (hyp1 (-> ps ch)
   hyp2 (<-> ps ph))
  (-> ph ch)
  hyp2 bicomi hyp1 sylbi
)

thm (biim2i () (hyp (-> ph ps)) (-> (<-> ch ph) (-> ch ps))
  (<-> ch ph) id
  hyp
  syl6bi
)

## <summary> The Order reverses which may be a little unexpected. </summary>
thm (biim1i () (hyp (-> ph ps)) (-> (<-> ph ch) (-> ch ps))
  hyp
  ch biim2i
  
  ## <d 'Commutative Property '>
    ch ph bicom
    sylbi2
  ## </d 'Commutative Property '>
)

# Commute the conclusion of bitr3i.
## <title> Transitive Property </title>
## <table>
##  (<-> ps [         [ [ ph ] )
##  (<-> ps [      ch ] ]    ] )
##          [ (<-> ch ] [ ph ] )
## </table>
thm (bitr3icom()
  (hyp1 (<-> ps ph)
   hyp2 (<-> ps ch))
  (<-> ch ph)
  hyp1 hyp2 bitr3i bicomi
)

## <title> Equivalence over Disjunction </title>
## <table>
##   (\/      ph ] ]    ] ps)
##       (<-> ph ] [ ch ] )
##   (\/         [ [ ch ] ps)
## </table>
thm (orbi1ii ()
  (hyp1 (\/ ph ps)
   hyp2 (<-> ph ch))
  (\/ ch ps)
  hyp1 hyp2 ps orbi1i mpbi
)

## <title> Equivalence over Disjunction </title>
## <table>
##   (\/ ph       [ ps ] ]    ] )
##           (<-> [ ps ] [ ch ] )
##   (\/ ph       [    [ [ ch ] )
## </table>
thm (orbi2ii ()
  (hyp1 (\/ ph ps)
   hyp2 (<-> ps ch))
  (\/ ph ch)
  hyp1 hyp2 ph orbi2i mpbi
)

## <title> Equivalence over Conjunction </title>
## <table>
##   (/\      ph ] ]    ] ps)
##       (<-> ph ] [ ch ] )
##   (\/         [ [ ch ] ps)
## </table>
thm (anbi1ii ()
  (hyp1 (/\ ph ps)
   hyp2 (<-> ph ch))
  (/\ ch ps)
  hyp1 hyp2 ps anbi1i mpbi
)

## <title> Equivalence over Conjunction </title>
## <table>
##   (/\ ph       [ ps ] ]    ] )
##           (<-> [ ps ] [ ch ] )
##   (/\ ph       [    [ [ ch ] )
## </table>
thm (anbi2ii ()
  (hyp1 (/\ ph ps)
   hyp2 (<-> ps ch))
  (/\ ph ch)
  hyp1 hyp2 ph anbi2i mpbi
)

## <title> Associative Property </title>
thm (orassi () (hyp (\/ (\/ ph ps) ch)) (\/ ph (\/ ps ch))
  hyp
  ph ps ch orass
  mpbi
)

## <title> Associative Property </title>
thm (orassli () (hyp (\/ ph (\/ ps ch))) (\/ (\/ ph ps) ch)
  hyp
  ph ps ch orass
  bicomi
  mpbi
)

## <title> Associative Property </title>
thm (anassi () (hyp (/\ (/\ ph ps) ch)) (/\ ph (/\ ps ch))
  hyp
  ph ps ch anass
  mpbi
)

## <title> Associative Property </title>
thm (anassli () (hyp (/\ ph (/\ ps ch))) (/\ (/\ ph ps) ch)
  hyp
  ph ps ch anass
  bicomi
  mpbi
)

## <title> Associative Property </title>
thm (biassi () (hyp (<-> (<-> ph ps) ch)) (<-> ph (<-> ps ch))
  hyp
  ph ps ch biass
  mpbi
)

## <title> Associative Property </title>
thm (biassli () (hyp (<-> ph (<-> ps ch))) (<-> (<-> ph ps) ch)
  hyp
  ph ps ch biass
  bicomi
  mpbi
)

thm (xorImp1 () () (-> (/\ ph (-. ps)) (-. (<-> ps ph)))
  ps ph xor
  ## <d>
    (-. (<-> ps ph)) (\/ (/\ ps (-. ph)) (/\ ph (-. ps))) bicom
  ## </d>
  mpbi
  biimpi
  olcs
)

thm (xorImp2 () () (-> (/\ ps (-. ph)) (-. (<-> ps ph)))
  ps ph xor
  ## <d>
    (-. (<-> ps ph)) (\/ (/\ ps (-. ph)) (/\ ph (-. ps))) bicom
  ## </d>
  mpbi
  biimpi
  orcs
)

## <title> Definition of False </title>
## <suggest> auto-left('Simplify', 'F') </suggest>
defthm (df-fal wff (F) () () (<-> (F) (-. (T)))
        (-. (T)) biid)

## <title> F is false </title>
thm (notfal () () (-. (F))
  tru
  notnoti
  df-fal
  mtbir
)

## <title> Modus Ponens </title>
## <summary> ax-mp with the order of the first and second hypotheses reversed. </summary>
## <table>
##  (-> ph ] [ ps)
##      ph ] ]
##         [ [ ps
## </table>
thm (ax-mpRemove () (hyp (-> ph ps) hyp2 ph ) ps
  hyp2  hyp  ax-mp
)

## <title> Remove Implies </title>
## <table>
##            [ ph ]
##   (<-> (-> [ ph ] ps) ps)
## </table>
thm (impRemove1 () (hyp ph) (<-> (-> ph ps) ps)
  hyp
  ps a1bi
  bicomi
)

## <title> Remove Implies </title>
## <table>
##               [ ph ]
##   (<-> (-> ps [ ph ] ) (T))
## </table>
thm (impRemove2 () (hyp ph) (<-> (-> ps ph) (T))
  tru
  (-> ps ph) a1i
  hyp ps a1i
  (T) a1i
  impbii
)

## <title> Remove Implies </title>
## <table>
##            [ (-. [ ph ] )
##   (<-> (-> [     [ ph ] ps) (T))
## </table>
thm (impNotRemove1 () (hyp (-. ph)) (<-> (-> ph ps) (T))
  tru
  (-> ph ps) a1i
  hyp
  (T) a1i
  ps pm2.21d
  impbii
)

## <title> Remove Equivalence </title>
## <table>
##               [ (-. [ ph ] )
##   (<-> (-> ps [     [ ph ] ) (-. ps))
## </table>
thm (impNotRemove2 () (hyp (-. ph)) (<-> (-> ps ph) (-. ps))
  hyp
  (-> ps ph) id
  mtoi
  ps ph pm2.21
  impbii
)

## <title> Remove Equivalence </title>
## <table>
##             [ ph ]
##   (<-> (<-> [ ph ] ps) ps)
## </table>
thm (biRemove1 () (hyp ph) (<-> (<-> ph ps) ps)
  hyp
  (<-> ph ps) id
  mpbii
  ps id
  ph a1d
  hyp
  ps a1i
  ps a1i
  impbid
  impbii
)

## <title> Remove Equivalence </title>
## <table>
##                [ ph ]
##   (<-> (<-> ps [ ph ] ) ps)
## </table>
thm (biRemove2 () (hyp ph) (<-> (<-> ps ph) ps)
  hyp
  ps biRemove1
  ph ps bicom
  bitr3icom
)

## <title> Remove Equivalence </title>
## <table>
##                [ (-. [ ph ] )
##   (<-> (<-> ps [     [ ph ] ) (-. ps))
## </table>
thm (biNotRemove2 () (hyp (-. ph)) (<-> (<-> ps ph) (-. ps))
  hyp
  (<-> ps ph) id
  biimpd
  mtoi
  ps ph pm2.21

  hyp
  ps pm2.21i
  (-. ps) a1i
  impbid
  impbii
)

## <title> Remove Equivalence </title>
## <table>
##             [ (-. [ ph ] )
##   (<-> (<-> [     [ ph ] ps) ps)
## </table>
thm (biNotRemove1 () (hyp (-. ph)) (<-> (<-> ph ps) (-. ps))
  hyp ps biNotRemove2
  ps ph bicom
  bitr3icom
)

## <title> Remove AND </title>
## <table>
##            [ ph ]
##   (<-> (/\ [ ph ] ps) ps)
## </table>
thm (anRemove1 () (hyp ph) (<-> (/\ ph ps) ps)
  ps id
  ph adantl
  hyp
  ps a1i
  ancri
  impbii
)

## <title> Remove AND </title>
## <table>
##               [ ph ]
##   (<-> (/\ ps [ ph ] ) ps)
## </table>
thm (anRemove2 () (hyp ph) (<-> (/\ ps ph) ps)
 ps id
 ph adantr
 hyp
 ps a1i
 ancli
 impbii
)

## <title> Remove AND </title>
## <table>
##            [ (-. [ ph ] )
##   (<-> (/\ [     [ ph ] ps) (F))
## </table>
thm (anNotRemove1 () (hyp (-. ph)) (<-> (/\ ph ps) (F))
  ph ps imnan
  con2bii
  hyp
  (-. ps) impNotRemove1
  con4biir
  bitri
  df-fal
  bicomi
  bitri
)

## <title> Remove AND </title>
## <table>
##               [ (-. [ ph ] )
##   (<-> (/\ ps [     [ ph ] ) (F))
## </table>
thm (anNotRemove2 () (hyp (-. ph)) (<-> (/\ ps ph) (F))
  hyp
  ps anNotRemove1
  ph ps ancom
  bitr3icom
)

## <title> Remove OR </title>
## <table>
##            [ ph ]
##   (<-> (\/ [ ph ] ps) (T))
## </table>
thm (orRemove1 () (hyp ph) (<-> (\/ ph ps) (T))
  tru
  (\/ ph ps) a1i
  hyp
  ps orci
  (T) a1i
  impbii
)

## <title> Remove OR </title>
## <table>
##               [ ph ]
##   (<-> (\/ ps [ ph ] ) (T))
## </table>
thm (orRemove2 () (hyp ph) (<-> (\/ ps ph) (T))
  tru
  (\/ ps ph) a1i
  hyp
  ps olci
  (T) a1i
  impbii
)


## <title> Remove OR </title>
## <table>
##            [ (-. [ ph ] )
##   (<-> (\/ [     [ ph ] ps) ps)
## </table>
thm (orNotRemove1 () (hyp (-. ph)) (<-> (\/ ph ps) ps)
  (-. ph) ps imor
  bicomi

  ph notnot
  ps orbi1i
  bicomi
  bitr3icom

  hyp ps impRemove1
  bitri
)

## <title> Remove OR </title>
## <table>
##               [ (-. [ ph ] )
##   (<-> (\/ ps [     [ ph ] ) ps)
## </table>
thm (orNotRemove2 () (hyp (-. ph)) (<-> (\/ ps ph) ps)
  hyp
  ps orNotRemove1
  ph ps orcom
  bitr3icom
)



# mpbi with the order of the first and second hypotheses reversed.
## <title> Modus Ponens </title>
## <table>
## (<-> ph ] [ ps ] )
##      ph ] ]    ]
##         [ [ ps ]
## </table>
thm (mpbiRemove () (hyp (<-> ph ps) hyp2 ph ) ps
  hyp2  hyp  mpbi
)

# mpbir with the order of the first and second hypotheses reversed.
## <title> Modus Ponens </title>
## <table>
## (<-> ph ] [ ps ] )
##         [ [ ps ]
##      ph ] ]    ]
## </table>
thm (mpbirRemove () (hyp (<-> ph ps) hyp2 ps ) ph
  hyp2  hyp  mpbir
)

## <title> Substitution </title>
## <table>
##   (<-> ph (-. (-> ps  [ ch ]   ]    ] )))
##   (<->                [ ch ]   [ th ] )
##   (<-> ph (-. (-> ps  [    [   [ th ] )))
## </table>
thm (BiReplaceBi1Not0Imp1 () (
     replacee (<-> ph (-. (-> ps ch)))
     substitution (<-> ch th)) 
     (<-> ph (-. (-> ps th)))
  replacee
  substitution
ps imbi2i
con4biir
ph bibi2i
mpbi
)

## <title> Substitution </title>
## <table>
##   (<-> ph (->  [ ps ]   ]    ]  th))
##   (<->         [ ps ]   [ ch ] )
##   (<-> ph (->  [    [   [ ch ]  th))
## </table>
thm (BiReplaceBi1Imp0 () (
     replacee (<-> ph (-> ps th))
     substitution (<-> ps ch)) 
     (<-> ph (-> ch th))
  replacee substitution
  th imbi1i
  bitri
)

## <title> A theorem is equivalent to True </title>
thm (biTrue () (hyp ps) (<-> ps (T))
  tru
  hyp
  (T) biRemove1
  
  ## <d 'Commutative Property '>
    (<-> ps (T)) (T) bicom
    mpbi
  ## </d 'Commutative Property '>
  mpbi
)

## <title> A falsehood is equivalent to False </title>
thm (biFalse () (hyp (-. ph)) (<-> ph (F))
  hyp
  biTrue
  notbii
  df-fal bicomi  
  bitri  
  ## <d 'Double Negative '>
    ph notnotr
    bitr3icom
  ## </d 'Double Negative '>
)

## <title> Truth Table for Negation </title>
thm (notT () () (<-> (-. (T)) (F))
  df-fal
  bicomi
)

## <title> Truth Table for Negation </title>
thm (notF () () (<-> (-. (F)) (T))
  df-fal  
  ## <d 'Negate Both Sides '>
    (F) (-. (T)) notbi
    mpbi
  ## </d 'Negate Both Sides '>
  ## <d 'Remove Double Negative'>
    (T) notnotr
    bitri
  ## </d 'Remove Double Negative'>
)

## <title> Truth Table </title>
thm (imTT () () (<-> (-> (T) (T)) (T))
  tru
  (T) (T) ax-1
  ax-mp
  biTrue
)

## <title> Truth Table </title>
thm (imFT () () (<-> (-> (F) (T)) (T))
  tru
  (T) (F) ax-1
  ax-mp
  biTrue
)

## <title> Truth Table </title>
thm (imTF () () (<-> (-> (T) (F)) (F))
  notfal
  tru
  (T) (F) mth8
  ax-mp
  ax-mp
  biFalse
)

## <title> Truth Table </title>
thm (imFF () () (<-> (-> (F) (F)) (T))
  (F) id biTrue
)

## <title> Truth Table </title>
thm (biTT () () (<-> (<-> (T) (T)) (T))
  (T) biid biTrue
)

## <title> Truth Table </title>
thm (biTF () () (<-> (<-> (T) (F)) (F))
  (T) (F) pm5.18
  notfal  
  (T) biRemove2
  con4biir
  bitri
  df-fal bicomi  
  bitri
)

## <title> Truth Table </title>
thm (biFT () () (<-> (<-> (F) (T)) (F))
  df-fal notnoti
  (F) (T) pm5.18 bicomi
  mtbi
  biFalse
)

## <title> Truth Table </title>
thm (biFF () () (<-> (<-> (F) (F)) (T))
  (F) biid biTrue
)

## <title> Truth Table </title>
thm (anTT () () (<-> (/\ (T) (T)) (T))
  (T) anidm
)

## <title> Truth Table </title>
thm (anFF () () (<-> (/\ (F) (F)) (F))
  (F) anidm
)

## <title> Truth Table </title>
thm (anTF () () (<-> (/\ (T) (F)) (F))
  (T) (F) df-an
  notfal  
  (T) impRemove2
  con4biir
  bitri
  df-fal bicomi  
  bitri
)

## <title> Truth Table </title>
thm (anFT () () (<-> (/\ (F) (T)) (F))
  (F) (T) df-an
  df-fal bicomi  
  BiReplaceBi1Not0Imp1

  notfal
  (F) impNotRemove1
  con4biir
  df-fal bicomi  
  bitri  
  bitri
)

## <title> Truth Table </title>
thm (orTT () () (<-> (\/ (T) (T)) (T))
  (T) oridm
)

## <title> Truth Table </title>
thm (orFF () () (<-> (\/ (F) (F)) (F))
  (F) oridm
)

## <title> Truth Table </title>
thm (orTF () () (<-> (\/ (T) (F)) (T))
  (T) (F) df-or
  df-fal bicomi  
  BiReplaceBi1Imp0
  (F) id  
  mpbirRemove
  biTrue
)

## <title> Truth Table </title>
thm (orFT () () (<-> (\/ (F) (T)) (T))
  (F) (T) df-or
  tru (-. (F)) a1i  
  mpbirRemove
  biTrue
)

## <title> A true antecedent proves the consequent </title>
thm (impRemoveT1 () () (<-> (-> (T) ps) ps)       tru    ps impRemove1 )
## <title> A true consequent, proves the conditional </title>
thm (impRemoveT2 () () (<-> (-> ps (T)) (T))      tru    ps impRemove2 )
## <title> A false antecedent, proves the conditional </title>
thm (impRemoveF1 () () (<-> (-> (F) ps) (T))      notfal ps impNotRemove1 )
## <title> A false consequent, disproves the antecedent </title>
thm (impRemoveF2 () () (<-> (-> ps (F)) (-. ps))  notfal ps impNotRemove2 )

## <title> A truth affirms the biconditional </title>
thm (biRemoveT1 () () (<-> (<-> (T) ps) ps)       tru    ps biRemove1 )
## <title> A truth affirms the biconditional </title>
thm (biRemoveT2 () () (<-> (<-> ps (T)) ps)       tru    ps biRemove2 )
## <title> A falsehood negates the biconditional </title>
thm (biRemoveF1 () () (<-> (<-> (F) ps) (-. ps))  notfal ps biNotRemove1 )
## <title> A falsehood negates the biconditional </title>
thm (biRemoveF2 () () (<-> (<-> ps (F)) (-. ps))  notfal ps biNotRemove2 )

## <title> Remove truth from conjunction </title>
thm (anRemoveT1 () () (<-> (/\ (T) ps) ps)   tru    ps anRemove1 )
## <title> Remove truth from conjunction </title>
thm (anRemoveT2 () () (<-> (/\ ps (T)) ps)   tru    ps anRemove2 )
## <title> One falsehood makes a conjunction false </title>
thm (anRemoveF1 () () (<-> (/\ (F) ps) (F))  notfal ps anNotRemove1 )
## <title> One falsehood makes a conjunction false </title>
thm (anRemoveF2 () () (<-> (/\ ps (F)) (F))  notfal ps anNotRemove2 )

## <title> One truth makes a disjunction true </title>
thm (orRemoveT1 () () (<-> (\/ (T) ps) (T))   tru    ps orRemove1 )
## <title> One truth makes a disjunction true </title>
thm (orRemoveT2 () () (<-> (\/ ps (T)) (T))   tru    ps orRemove2 )
## <title> Remove falsehood from disjunction </title>
thm (orRemoveF1 () () (<-> (\/ (F) ps) ps)    notfal ps orNotRemove1 )
## <title> Remove falsehood from disjunction </title>
thm (orRemoveF2 () () (<-> (\/ ps (F)) ps)    notfal ps orNotRemove2 )

## <title> Substitution </title>
## <table>
##   (<-> ph  [ ps ]   ]    ] )
##   (->      [ ps ]   [ ch ] )
##   (<-> ph  [    [   [ ch ] )
## </table>
thm (ImpReplaceBi1 () (
     replacee (<-> ph ps)
     substitution (-> ps ch)) 
     (-> ph ch)
  replacee
  substitution
  ph biim2i
  ax-mp
)

## <suggest> right('Simplify', '↔') </suggest>
thm (mpbi-inline () () (-> (/\ ph (<-> ph ps)) ps)
  ph ps pm5.36  
  ## <d>
    ps (<-> ph ps) pm3.26
    ImpReplaceBi1
  ## </d>
)

export (PROP /peano/prop.ghi () "")
