# Building up theorems of peano arithmetic.

import (PROP      /peano_new/prop.ghi () "")
import (PREDICATE /peano_new/predicate/all.ghi (PROP) "")
import (PEANO_MIN /peano_new/arithmetic/naturals/peano_min.ghi (PROP PREDICATE) "")

tvar (wff ph ps ch th ta et si ph' ps' ch' th' ta')
tvar (nat A B C D A' B' C' D' A0 A1 A2 A3 i j k)
var (nat v w x y z v' w' x' y' z')

## <context>
##   This theorem is part of a series of theorems that derive the
##   most basic properties of addition and multiplication from the 
##   <a href="/wiki/peano/arithmetic/axioms">Peano axiom</a>.
##   It is assumed that every number in this theorem is a natural number.
## </context>

# == Basic Peano arithmetic ==

## <title> Definition of 1 </title>
defthm (df-1 nat (1) () () (= (1) (S (0)))
        (S (0)) eqid)

## <title> Add a number to both sides of an equation </title>
## <table>
##   (-> (= <g> A <b> B) (= (+ <g> A <r> C) (+ <b> B <r> C)))
## </table>
thm (addeq1 () () (-> (= A B) (= (+ A C) (+ B C)))
  C eqid A B C C addeq12 mpan2)

## <title> Add a number to both sides of an equation </title>
thm (addeq2 () ()
  (-> (= A B) (= (+ C A) (+ C B)))
  C eqid C C A B addeq12 mpan)

## <title> Equality over Addition </title>
## <table>
##   (=    A ] ]   ]      [ B ] ] )
##   (=      [ [ C ]      [   [ [ D)
##   (= (+ A ] [ C ] ) (+ [ B ] [ D))
## </table>
thm (addeq12i ()
  (hyp1 (= A B)
   hyp2 (= C D))
  (= (+ A C) (+ B D))
  hyp1 hyp2 A B C D addeq12 mp2an
)

## <title> Equality over Addition </title>
thm (addeq1d ()
  (h (-> ph (= A B)))
  (-> ph (= (+ A C) (+ B C)))
  h A B C addeq1 syl
)

## <title> Equality over Addition </title>
thm (addeq2d ()
  (h (-> ph (= A B)))
  (-> ph (= (+ C A) (+ C B)))
  h A B C addeq2 syl
)

## <title> Equality over Addition </title>
thm (addeq12d ()
  (hyp1 (-> ph (= A B))
   hyp2 (-> ph (= C D)))
  (-> ph (= (+ A C) (+ B D)))
  hyp1 hyp2 jca A B C D addeq12 syl
)

## <title> Equality over Succession </title>
## <table>
##  (=    A  ] [    B)
##  (= (S A) ] [ (S B)
## </table>	
thm (pa_ax2i () (hyp (= A B)) (= (S A) (S B))
  hyp
  A B pa_ax2
  mpbi
)

## <title> Add a number to both sides </title>
## <table>
##  (=    A ]        ]    [ B ] )
##  (= (+ A ] <g> C) ] (+ [ B ] <g> C))
## </table>
thm (addeq1i ()
  (hyp (= A B))
  (= (+ A C) (+ B C))
  hyp A B C addeq1 ax-mp
)

## <title> Add a number to both sides </title>
## <table>
##  (=          [ A ]   [          [ B )
##  (= (+ <g> C [ A ] ) [ (+ <g> C [ B))
## </table>
thm (addeq2i ()
  (hyp (= A B))
  (= (+ C A) (+ C B))
  C eqid hyp C C A B addeq12 mp2an
)

## <title> Equality over Multiplication </title>
## <table>
##   (-> (= A B) (= (* A <r> C) (* B <r> C)))
## </table>
thm (muleq1 () ()
  (-> (= A B) (= (* A C) (* B C)))
  C eqid A B C C muleq12 mpan2)

## <title> Equality over Multiplication </title>
## <table>
##   (-> (= A B) (= (* <r> C A) (* <r> C B)))
## </table>
thm (muleq2 () ()
  (-> (= A B) (= (* C A) (* C B)))
  C eqid C C A B muleq12 mpan)

## <title> Equality over Multiplication </title>
thm (muleq12i ()
  (hyp1 (= A B)
   hyp2 (= C D))
  (= (* A C) (* B D))
  hyp1 hyp2 A B C D muleq12 mp2an
)

## <title> Equality over Multiplication </title>
thm (muleq1d ()
  (hyp (-> ph (= A B)))
  (-> ph (= (* A C) (* B C)))
  hyp C eqid A B C C muleq12 mpan2 syl
)

## <title> Multiply both sides by a number </title>
## <table>
##   (=    A ]       [ B ] )
##   (= (* A ] C) (* [ B ] C))
## </table>
thm (muleq1i ()
  (hyp (= A B))
  (= (* A C) (* B C))
  hyp A B C muleq1 ax-mp
)

## <title> Multiply both sides by a number </title>
## <table>
##   (=      [ A ]        [ B )
##   (= (* C [ A ] ) (* C [ B))
## </table>
thm (muleq2i () (hyp (= A B))
  (= (* C A) (* C B))
  hyp A B C muleq2 ax-mp
)

thm (muleq2d () (
     hyp1 (-> ph (= A B)))
     (-> ph (= (* C A) (* C B)))
  hyp1
  A B C muleq2
  syl
)

thm (suceqd ()
  (hyp (-> ph (= A B)))
  (-> ph (= (S A) (S B)))
  hyp A B pa_ax2 sylib)

## <title> Proof by Induction </title>
thm (finds ((A x) (ch x) (th x) (ta x) (ph y))
  (hyp1 (-> (= x (0)) (<-> ph ps))
   hyp2 (-> (= x y) (<-> ph ch))
   hyp3 (-> (= x (S y)) (<-> ph th))
   hyp4 (-> (= x A) (<-> ph ta))
   basis ps
   induction (-> ch th))
  ta

  hyp4
    basis hyp1 mpbiri x gen
      induction
        hyp2 ceqsal
          hyp3 ceqsal
      3imtr4i y gen
    x ph y pa_ind mp2an
    a4i
  vtocl
)

## <title> Induction </title>
## <table>
##       ([/] (0) z ph) ] ]                  ]
##   (-> ([/]  y  z ph) ] [ ([/] (S y) z [ ph))
##                      [ [ ([/] A         z [ ph)
## </table>
## <summary>
##   Induction using substitution and the successor operation. Using substitution, 
##   we can simplify the 6 hypotheses of <a href="finds">finds</a> into just two
##   the basis case and the inductive step. For a similar proof, using +1 instead of
##   the successor see <a href="induction">induction</a>.
## </summary>
thm (inductionsuc ((ph y)) (basis ([/] (0) z ph) inductiveHyp (-> ([/] y z ph) ([/] (S y) z ph))) ([/] A z ph)
  x (0) z ph dfsbcq
  x y z ph dfsbcq
  x (S y) z ph dfsbcq
  x A z ph dfsbcq
  basis
  inductiveHyp
  finds
)

## <title> Substitution </title>
## <table>
##   (= A  [ B ]   ]   ] )
##   (=    [ B ]   [ C ] )
##   (= A  [   [   [ C ] )
## </table>
thm (EqReplaceEq1 () (
     replacee (= A B)
     substitution (= B C)) 
     (= A C)
  replacee
  substitution
A eqeq2i
mpbi
)

## <title> Substitution </title>
## <table>
##   (= A (S  [ B ]   ]   ] ))
##   (=       [ B ]   [ C ] )
##   (= A (S  [   [   [ C ] ))
## </table>
thm (EqReplaceEq1Suc0 () (
     replacee (= A (S B))
     substitution (= B C)) 
     (= A (S C))
  replacee substitution
  pa_ax2i
  EqReplaceEq1
)

## <title> Successor Adds One </title>
## <summary> Successor is equivalent to adding one </summary>
## <suggest> right('Equivalence', '+1') </suggest>
thm (a1suc () () (= (S A) (+ A (1)))
  ## <d>
    df-1
  ## </d>
  ## <d>
    A addeq2i
  ## </d>
  ## <d 'Peano Axiom 4'>
    A (0) pa_ax4 eqtri
  ## </d>
  ## <d 'Additive Identity'>
    A pa_ax3
    EqReplaceEq1Suc0
  ## </d>
  eqcomi
)

## <title> Substitution </title>
## <table>
##   (-> (= A  [ B ]   ]   ] ) ph)
##   (=        [ B ]   [ C ] )
##   (-> (= A  [   [   [ C ] ) ph)
## </table>
thm (EqReplaceImp0Eq1 () (
     replacee (-> (= A B) ph)
     substitution (= B C)) 
     (-> (= A C) ph)
  replacee
  substitution
	A eqeq2i
	ph imbi1i
	mpbi
)

## <title> Proof by Induction </title>
## <summary>
##   Same as <a href="finds">finds</a> except uses +1 instead of successor.
## </summary>
thm (findplus1 ((A x) (ch x) (th x) (ta x) (ph y))
  (hyp1 (-> (= x (0)) (<-> ph ps))
   hyp2 (-> (= x y) (<-> ph ch))
   hyp3 (-> (= x (+ y (1))) (<-> ph th))
   hyp4 (-> (= x A) (<-> ph ta))
   basis ps
   induction (-> ch th))
  ta

  hyp1
  hyp2
  hyp3
  y a1suc  
  eqcomi
  EqReplaceImp0Eq1
  hyp4
  basis
  induction
  finds
)

## <title> Proof by Induction </title>
## <table>
##       ([/] (0) z ph) ] ]                  ]
##   (-> ([/]  y  z ph) ] [ ([/] (+ y (1)) z [ ph))
##                      [ [ ([/] A         z [ ph)
## </table>
## <summary>
##   Using substitution, we simplify the 6 hypotheses of <a href="findplus1">findplus1</a>
##   into just two the basis case and the inductive step. For a similar proof, using the successor
##   instead of +1 see <a href="inductionsuc">inductionsuc</a>.
## </summary>
thm (induction ((ph y)) (basis ([/] (0) z ph) inductiveHyp (-> ([/] y z ph) ([/] (+ y (1)) z ph))) ([/] A z ph)
  x (0) z ph dfsbcq
  x y z ph dfsbcq
  x (+ y (1)) z ph dfsbcq
  x A z ph dfsbcq
  basis
  inductiveHyp
  findplus1
)

## <title> Additive Identity </title>
## <table> 
##   (= (+ <r> (0) A) A)
## </table>
## <suggest> auto-right('Simplify', '0') </suggest>
thm (pa_ax3r () ()
  (= (+ (0) A) A)

  x (0) (0) addeq2 (= x (0)) id eqeq12d
    x y (0) addeq2 (= x y) id eqeq12d
      x (S y) (0) addeq2 (= x (S y)) id eqeq12d
        x A (0) addeq2 (= x A) id eqeq12d
          (0) pa_ax3
            (+ (0) y) y pa_ax2
              (0) y pa_ax4 (S y) eqeq1i
            bitr4i biimpi
  finds
)

## <title> Peano Axiom 4: Addition </title>
## <suggest> left('Equivalence', 'L') </suggest>
thm (pa_ax4r () ()
  (= (+ (S A) B) (S (+ A B)))

  x (0) (S A) addeq2 x (0) A addeq2 suceqd eqeq12d
    x y (S A) addeq2 x y A addeq2 suceqd eqeq12d
      x (S y) (S A) addeq2 x (S y) A addeq2 suceqd eqeq12d
        x B (S A) addeq2 x B A addeq2 suceqd eqeq12d

          (S A) pa_ax3 A pa_ax3 (+ A (0)) A pa_ax2 mpbi eqtr4

            (+ (S A) y) (S (+ A y)) pa_ax2 biimpi
              A y pa_ax4 (+ A (S y)) (S (+ A y)) pa_ax2 mpbi
            syl6eqr
              (S A) y pa_ax4
             syl5eq

  finds
)

## <title> Substitution </title>
## <table>
##   (-> ph (=  [ A ]   ]   ]  C))
##   (=         [ A ]   [ B ] )
##   (-> ph (=  [   [   [ B ]  C))
## </table>
thm (EqReplaceImp1Eq0 () (
     replacee (-> ph (= A C))
     substitution (= A B)) 
     (-> ph (= B C))
  replacee substitution
  C eqeq1i
  sylib
)

## <title> Substitution </title>
## <table>
##   (-> ph (= A  [ B ]   ]   ] ))
##   (=           [ B ]   [ C ] )
##   (-> ph (= A  [   [   [ C ] ))
## </table>
thm (EqReplaceImp1Eq1 () (
     replacee (-> ph (= A B))
     substitution (= B C)) 
     (-> ph (= A C))
  replacee substitution
  A eqeq2i
  sylib
)

## <title> Perform a substitution </title>
## <summary>
##   Substitute A in for y in an expression describing the
##   <a href="addcom">commutative  property of addition</a>.
## </summary>
thm (sbc-addcom ((A y) (B y)) () (<-> ([/] A y (= (+ y B) (+ B y))) (= (+ A B) (+ B A)))
  y A B addeq1
  y A B addeq2
  eqeq12d
  sbcie
)

## <title> Commutative Property of Addition </title>
## <table> (= (+ <r> A <g> B) (+ <g> B <r> A)) </table>
## <suggest> right('Commute', '+') </suggest>
thm (addcom () () (= (+ A B) (+ B A))
  ## <d>
    ## <d 'Basis Case'>
      B pa_ax3r
      ## <d 'Additive Identity'>
        ## <d 'Additive Identity'>
          B pa_ax3 eqcomi 
        ## </d 'Additive Identity'>
        eqtri
      ## </d 'Additive Identity'>
      ## <d 'Substitute x in for 0'>
        ## <d 'Substitute x in for 0'>
          (0) x B sbc-addcom
          bicomi
        ## </d 'Substitute x in for 0'>
        mpbi
      ## </d 'Substitute x in for 0'>
    ## </d 'Basis Case'>
    ## <d 'If numbers are equal, their successors are too'>
      (+ y B) (+ B y) pa_ax2 biimpi
    ## </d>
  ## </d>
  ## <d 'Apply Peano Axiom 4'>
    ## <d 'Apply Peano Axiom 4'>
      y B pa_ax4r eqcomi  
    ## </d>
    EqReplaceImp1Eq0
  ## </d>
  ## <d 'Apply Peano Axiom 4'>
    ## <d 'Apply Peano Axiom 4'>
      B y pa_ax4 eqcomi  
    ## </d>
    EqReplaceImp1Eq1
  ## </d>
  ## <d 'Induction'>
    ## <d 'Substitute y and y" with x'>
      y x B sbc-addcom bicomi  
      sylbi2

      (S y) x B sbc-addcom bicomi
      sylib
    ## </d>
    ## <d 'Induction'>
      A inductionsuc
    ## </d>
    ## <d 'Substitute A in for x'>
      A x B sbc-addcom  
      mpbi
    ## </d>
  ## </d>
)

## <title> Substitution </title>
## <table>
##   (-> ph (= A (+ B  [ C ]   ]   ] )))
##   (=                [ C ]   [ D ] )
##   (-> ph (= A (+ B  [   [   [ D ] )))
## </table>
thm (EqReplaceImp1Eq1Add1 () (
     replacee (-> ph (= A (+ B C)))
     substitution (= C D)) 
     (-> ph (= A (+ B D)))
  replacee substitution
  B addeq2i
  EqReplaceImp1Eq1
)

## <title> Substitution </title>
## <table>
##   (-> ph (= (+  [ A ]   ]   ]  C) D))
##   (=            [ A ]   [ B ] )
##   (-> ph (= (+  [   [   [ B ]  C) D))
## </table>
thm (EqReplaceImp1Eq0Add0 () (
     replacee (-> ph (= (+ A C) D))
     substitution (= A B)) 
     (-> ph (= (+ B C) D))
  replacee substitution
  C addeq1i
  EqReplaceImp1Eq0
)

## <title> Perform a substitution </title>
## <summary>
##   Substitute A in for y in an expression describing the
##   <a href="addass">associative property of addition</a>.
## </summary>
thm (sbc-addass ((A y) (B y) (C y)) () (<-> ([/] A y (= (+ (+ y B) C) (+ y (+ B C)))) (= (+ (+ A B) C) (+ A (+ B C))))
  y A B addeq1 C addeq1d
  y A (+ B C) addeq1
  eqeq12d
  sbcie
)

## <title> Additive Identity </title>
## <summary>
##   Identical to the third <a href="/wiki/peano/arithmetic/axioms">Peano axiom</a>
##   for arithmetic. This theorem simply renames it to addid.
## </summary>
## <suggest> auto-right('Simplify', '0') </suggest>
thm (addid () () (= (+ A (0)) A)
  A pa_ax3
)

## <title> Associative Property </title>
## <suggest> right('Associate', 'R') left('Associate', 'L') </suggest>
thm (addass () () (= (+ (+ A B) C) (+ A (+ B C)))
  ## <d>
    ## <d 'Basis Case'>
      ## <d>
        B pa_ax3r
      ## </d>
      ## <d>
        C addeq1i
      ## </d>
      ## <d 'Additive Identity'>
        (+ B C) pa_ax3r eqcomi  
        EqReplaceEq1
      ## </d 'Additive Identity'>
      ## <d 'Substitute 0 for x'>
        ## <d 'Substitute 0 for x'>
          (0) x B C sbc-addass
          bicomi
        ## </d 'Substitute 0 for x'>
        mpbi
      ## </d 'Substitute 0 for x'>
    ## </d 'Basis Case'>
    ## <d 'If numbers are equal, their successors are too'>
      (+ (+ y B) C) (+ y (+ B C)) pa_ax2 biimpi
    ## </d 'If numbers are equal, their successors are too'>
  ## </d>
  ## <d 'Apply Peano Axiom 4 Several Times'>
    ## <d 'Peano Axiom 4'>
      ## <d 'Peano Axiom 4: Addition '>
        (+ y B) C pa_ax4r
        eqcomi
      ## </d 'Peano Axiom 4: Addition '>
      EqReplaceImp1Eq0
    ## </d 'Peano Axiom 4'>
    ## <d 'Peano Axiom 4'>
      ## <d 'Peano Axiom 4: Addition '>
        y B pa_ax4r
        eqcomi
      ## </d 'Peano Axiom 4: Addition '>
      EqReplaceImp1Eq0Add0
    ## </d 'Peano Axiom 4'>
    ## <d 'Peano Axiom 4'>
      ## <d 'Peano Axiom 4: Addition '>
        y (+ B C) pa_ax4r
        eqcomi
      ## </d 'Peano Axiom 4: Addition '>
      EqReplaceImp1Eq1
    ## </d 'Peano Axiom 4'>
  ## </d 'Apply Peano Axiom 4 Several Times'>

  ## <d 'Induction'>
    ## <d 'Substitute y and y" for x'>
      ## <d 'Substitute y for x'>
        y x B C sbc-addass bicomi  
        sylbi2
      ## </d 'Substitute y for x'>
      ## <d 'Substitute y" for x'>
        (S y) x B C sbc-addass bicomi
        sylib
      ## </d 'Substitute y" for x'>
    ## </d>
    ## <d 'Induction'>
      A inductionsuc
    ## </d>
    ## <d 'Substitute A for x'>
      A x B C sbc-addass
      mpbi
    ## </d>
  ## </d>
)

## <title> Multiply by 0 </title>
## <suggest> auto-right('Simplify','0') </suggest>
thm (pa_ax5r () ()
  (= (* (0) A) (0))

  x (0) (0) muleq2 (0) eqeq1d
    x y (0) muleq2 (0) eqeq1d
      x (S y) (0) muleq2 (0) eqeq1d
        x A (0) muleq2 (0) eqeq1d
          (0) pa_ax5
            (0) y pa_ax6
            (* (0) y) pa_ax3 eqtri (0) eqeq1i biimpri
  finds
)

## <title> Peano Axiom 6 Reversed </title>
thm (pa_ax6r () ()
  (= (* (S A) B) (+ (* A B) B))

  x (0) (S A) muleq2 x (0) A muleq2 (= x (0)) id addeq12d eqeq12d
    x y (S A) muleq2 x y A muleq2 (= x y) id addeq12d eqeq12d
      x (S y) (S A) muleq2 x (S y) A muleq2 (= x (S y)) id addeq12d eqeq12d
        x B (S A) muleq2 x B A muleq2 (= x B) id addeq12d eqeq12d
          (S A) pa_ax5 A pa_ax5 (0) addeq1i (0) pa_ax3 eqtri eqtr4

            (* (S A) y) (+ (* A y) y) (S A) addeq1
            (S A) y pa_ax6 syl5eq
            (+ (* A y) y) A pa_ax4 syl6eq
              (* A y) y A addass y A addcom (* A y) addeq2i eqtri
              (* A y) A y addass eqtr4
              (+ (+ (* A y) y) A) (+ (+ (* A y) A) y) pa_ax2 mpbi
            syl6eq
              A y pa_ax6 (S y) addeq1i
              (+ (* A y) A) y pa_ax4 eqtri
            syl6eqr
  finds
)

## <title> Perform a substitution </title>
## <summary>
##   Substitute A in for y in an expression describing the
##   <a href="mulcom">commutative  property of multiplication</a>.
## </summary>
thm (sbc-mulcom ((A y) (B y)) () (<-> ([/] A y (= (* y B) (* B y))) (= (* A B) (* B A)))
  y A B muleq1
  y A B muleq2
  eqeq12d
  sbcie
)

## <title> Commutative Property </title>
## <table>
##   (= (* <r> A <g> B) (* <g> B <r> A))
## </table>
## <suggest> right('Commute', '*') </suggest>
thm (mulcom () () (= (* A B) (* B A))
  ## <d>
    ## <d 'Basis Case'>
      B pa_ax5r
      ## <d 'Multiply by 0'>
        B pa_ax5 eqcomi
      ## </d>
      ## <d 'Multiply by 0'>
        eqtri
      ## </d>
      ## <d 'Substitute x in for 0'>
        ## <d 'Substitute x in for 0'>
          (0) x B sbc-mulcom
          bicomi
        ## </d 'Substitute x in for 0'>
        mpbi
      ## </d 'Substitute x in for 0'>
    ## </d 'Basis Case'>
    ## <d 'Add B to both sides'>
      (* y B) (* B y) B addeq1
    ## </d>
  ## </d>
  ## <d 'Peano Axiom 6'>
    ## <d 'Peano Axiom 6'>
      y B pa_ax6r eqcomi
    ## </d>
    EqReplaceImp1Eq0
  ## </d 'Peano Axiom 6'>
  ## <d 'Peano Axiom 6'>
    ## <d 'Peano Axiom 6'>
      B y pa_ax6 eqcomi
    ## </d>
    EqReplaceImp1Eq1
  ## </d>
  ## <d 'Induction'>
    ## <d 'Substitute y and y" with x'>
      y x B sbc-mulcom bicomi
      sylbi2

      (S y) x B sbc-mulcom bicomi
      sylib
    ## </d>
    ## <d 'Induction'>
      A inductionsuc
    ## </d>
    ## <d 'Substitute A in for x'>
      A x B sbc-mulcom
      mpbi
    ## </d>
  ## </d>
)

## <title> Substitution </title>
## <table>
##   (=  [ A ]   ]   ]  C)
##   (=  [ A ]   [ B ] )
##   (=  [   [   [ B ]  C)
## </table>
thm (EqReplaceEq0 () (
     replacee (= A C)
     substitution (= A B)) 
     (= B C)
  replacee substitution
  C eqeq1i
  mpbi
)

## <title> Substitution </title>
## <table>
##   (= (* A  [ B ]   ]   ] ) D)
##   (=       [ B ]   [ C ] )
##   (= (* A  [   [   [ C ] ) D)
## </table>
thm (EqReplaceEq0Mul1 () (
     replacee (= (* A B) D)
     substitution (= B C)) 
     (= (* A C) D)
  replacee substitution
  A muleq2i
  EqReplaceEq0
)

## <title> Substitution </title>
## <table>
##   (= A (+  [ B ]   ]   ]  D))
##   (=       [ B ]   [ C ] )
##   (= A (+  [   [   [ C ]  D))
## </table>
thm (EqReplaceEq1Add0 () (
     replacee (= A (+ B D))
     substitution (= B C)) 
     (= A (+ C D))
  replacee substitution
  D addeq1i
  EqReplaceEq1
)

## <title> Multiplicative Identity </title>
## <summary>
##   One is the identity of multiplication. Proved from the
##   <a href="/peano/peano_min.ghi">peano axioms</a>. </summary>
## <suggest> right('Simplify', '1') </suggest>
## <table>
##   (= (* A <r> (1)) A)
## </table>
## <suggest> auto-right('Simplify') </suggest>
thm (mulid () () (= (* A (1)) A)
  A (0) pa_ax6
  ## <d 'Multiplication by 0' >
    A pa_ax5
    EqReplaceEq1Add0
  ## </d 'Multiplication by 0' >
  ## <d 'Additive Identity' >
    A pa_ax3r
    eqtri
  ## </d 'Additive Identity' >
  ## <d 'Definition of 1' >
    ## <d 'Definition of 1' >
      df-1 eqcomi
    ## </d>
    EqReplaceEq0Mul1
  ## </d>
)

thm (add23 () ()
  (= (+ (+ A B) C) (+ (+ A C) B))
  A B C addass
  B C addcom A addeq2i eqtri
  A C B addass eqtr4
)

## <title> Rearrange Addition Terms </title>
## <table>
##   (= (+ (+ A <g> B) (+ <r> C D)) (+ (+ A <r> C) (+ <g> B D)))
## </table>
thm (add4 () ()
  (= (+ (+ A B) (+ C D)) (+ (+ A C) (+ B D)))
  (+ A B) C D addass
  A B C add23 D addeq1i eqtr3
  (+ A C) B D addass eqtri
)

## <title> Substitution </title>
## <table>
##   (= A (+ B  [ C ]   ]   ] ))
##   (=         [ C ]   [ D ] )
##   (= A (+ B  [   [   [ D ] ))
## </table>
thm (EqReplaceEq1Add1 () (
     replacee (= A (+ B C))
     substitution (= C D)) 
     (= A (+ B D))
  replacee substitution
  B addeq2i
  EqReplaceEq1
)

## <title> Substitution </title>
## <table>
##   (= A (+ B (+ C  [ D ]   ]    ] )))
##   (=              [ D ]   [ A' ] )
##   (= A (+ B (+ C  [   [   [ A' ] )))
## </table>
thm (EqReplaceEq1Add1Add1 () (
     replacee (= A (+ B (+ C D)))
     substitution (= D A')) 
     (= A (+ B (+ C A')))
  replacee substitution
  C addeq2i
  EqReplaceEq1Add1
)

## <title> Perform a substitution </title>
## <summary>
##   Substitute A in for y in an expression describing the
##   <a href="distr">distributive property</a>.
## </summary>
thm (sbc-distr ((A y) (B y) (C y)) () (<-> ([/] A y (= (* y (+ B C)) (+ (* y B) (* y C)))) (= (* A (+ B C)) (+ (* A B) (* A C))))
  y A (+ B C) muleq1
  y A B muleq1
  y A C muleq1
  addeq12d
  eqeq12d
  sbcie
)

## <title> Distributive Property </title>
## <summary>
##   Distribution of addition through multiplication. See <a href="distl">distl</a>
##   for distribution in the opposite direction.
## </summary>
## <table>
##   (= (* <c> A (+ B C)) (+ (* <c> A B) (* <c> A C)))
## </table>
## <suggest> right('Distribute', 'R') left('Distribute', '-R') </suggest>
thm (distr () () (= (* A (+ B C)) (+ (* A B) (* A C)))
  ## <d>
    ## <d 'Basis Case'>
      ## <d 'Multiply B+C by 0'>
        (+ B C) pa_ax5r
      ## </d 'Multiply by 0'>
      ## <d 'Multiply B and C by 0'>
        ## <d 'Multiply B and C by 0'>
          ## <d 'Multiply B and C by 0'>
            B pa_ax5r
            C pa_ax5r
            addeq12i
          ## </d>
          ## <d 'Add 0 + 0'>
            (0) pa_ax3 eqtri
          ## </d>
          eqcomi
        ## </d 'Multiply B and C by 0'>
        eqtri
      ## </d 'Multiply B and C by 0'>
      ## <d 'Substitute x in for 0'>
        ## <d 'Substitute x in for 0'>
          (0) x B C sbc-distr
          bicomi
        ## </d 'Substitute x in for 0'>
        mpbi
      ## </d 'Substitute x in for 0'>
    ## </d 'Basis Case'>
    ## <d 'Add B+C to both sides'> 
      (* y (+ B C)) (+ (* y B) (* y C)) (+ B C) addeq1
    ## </d 'Add B+C to both sides'>
  ## </d>

  ## <d 'Peano Axiom 6'>
    ## <d 'Peano Axiom 6'>
      y (+ B C) pa_ax6r eqcomi
    ## </d 'Peano Axiom 6'>
    EqReplaceImp1Eq0
  ## </d 'Peano Axiom 6'>
  ## <d 'Rearrange terms & Peano Axiom 6'>
    ## <d>
      (* y B) (* y C) B C add4
    ## </d>
    ## <d 'Peano Axiom 6'>
      ## <d 'Peano Axiom 6'>
        y B pa_ax6r eqcomi
      ## </d 'Peano Axiom 6'>
      EqReplaceEq1Add0
    ## </d 'Peano Axiom 6'>
    ## <d 'Peano Axiom 6'>
      ## <d 'Peano Axiom 6'>
        y C pa_ax6r eqcomi
      ## </d 'Peano Axiom 6'>
      EqReplaceEq1Add1
    ## </d 'Peano Axiom 6'>
    EqReplaceImp1Eq1
  ## </d>
  ## <d 'Induction'>
    ## <d 'Substitute y and y" with x'>
      y x B C sbc-distr bicomi
      sylbi2
      (S y) x B C sbc-distr bicomi
      sylib
    ## </d>
    ## <d 'Induction'>
      A inductionsuc
    ## </d>
    ## <d 'Substitute A in for x'>
      A x B C sbc-distr
      mpbi
    ## </d>
  ## </d>
)

## <title> Distributive Property </title>
## <summary>
##   Distribution of addition through multiplication. See <a href="distr">distr</a>
##   for distribution in the opposite direction.
## </summary>
## <table>
##   (= (* (+ A B) <c> C) (+ (* A <c> C) (* B <c> C)))
## </table>
## <suggest> right('Distribute', 'L') left('Distribute', '-L') </suggest>
thm (distl () () (= (* (+ A B) C) (+ (* A C) (* B C)))
   ## <d>
     C A B distr
   ## </d>
   ## <d 'Commute C∙(A + B)' >
     C (+ A B) mulcom
     EqReplaceEq0
   ## </d>
   ## <d 'Commute C∙A' >
     C A mulcom
     EqReplaceEq1Add0
   ## </d>
   ## <d 'Commute C∙B' >
     C B mulcom  
     EqReplaceEq1Add1
   ## </d>
)

## <title> Substitution </title>
## <table>
##   (= A (*  [ B ]   ]   ]  D))
##   (=       [ B ]   [ C ] )
##   (= A (*  [   [   [ C ]  D))
## </table>
thm (EqReplaceEq1Mul0 () (
     replacee (= A (* B D))
     substitution (= B C)) 
     (= A (* C D))
  replacee substitution
  D muleq1i
  EqReplaceEq1
)

## <title> Perform a substitution </title>
## <summary>
##   Substitute A in for y in an expression describing the
##   <a href="mulass">associate property of multiplication</a>.
## </summary>
thm (sbc-mulass ((A y) (B y) (C y)) () (<-> ([/] A y (= (* (* y B) C) (* y (* B C)))) (= (* (* A B) C) (* A (* B C))))
  y A B muleq1 C muleq1d
  y A (* B C) muleq1
  eqeq12d
  sbcie
)

## <title> Associative Property </title>
## <summary> Multiplication is associative </summary>
## <suggest> right('Associate', 'R') left('Associate', 'L') </suggest>
thm (mulass () () (= (* (* A B) C) (* A (* B C)))
  ## <d>
    ## <d 'Basis Case'>
      ## <d 'Multiply by 0'>
        ## <d>
          B pa_ax5r
        ## </d>
        ## <d 'Multiply both sides by C'>
          C muleq1i
        ## </d>
        ## <d 'Multiply by 0'>
          C pa_ax5r
          eqtri
        ## </d>
      ## </d 'Multiply by 0'>
      ## <d 'Multiply by 0'>
        ## <d 'Multiply by 0'>
          (* B C) pa_ax5r eqcomi
        ## </d 'Multiply by 0'>
        eqtri
      ## </d 'Multiply by 0'>
      ## <d 'Substitute x in for 0'>
        ## <d 'Substitute x in for 0'>
          (0) x B C sbc-mulass
          bicomi
        ## </d 'Substitute x in for 0'>
        mpbi
      ## </d 'Substitute x in for 0'>
    ## </d 'Basis Case'>
    ## <d 'Add B∙ C to both sides'>
      (* (* y B) C) (* y (* B C)) (* B C) addeq1
    ## </d>
  ## </d>
  ## <d 'Distribution & Peano Axiom 6'>
    ## <d 'Distribution & Peano Axiom 6'>
      ## <d 'Distributive Property'> 
        (* y B) B C distl eqcomi
      ## </d 'Distributive Property'>
      ## <d 'Peano Axiom 6'>
        y B pa_ax6r eqcomi
      ## </d 'Peano Axiom 6'>
      EqReplaceEq1Mul0
    ## </d>
    EqReplaceImp1Eq0
  ## </d>
  ## <d 'Peano Axiom 6'>
    ## <d 'Peano Axiom 6'>
      y (* B C) pa_ax6r eqcomi
    ## </d>
    EqReplaceImp1Eq1
  ## </d>
  ## <d 'Induction'>
    ## <d 'Substitute y and y" with x'>
      ## <d 'Substitute y with x'>
        y x B C sbc-mulass bicomi  
        sylbi2
      ## </d 'Substitute y with x'>
      ## <d 'Substitute y" with x'>
        (S y) x B C sbc-mulass bicomi
        sylib
      ## </d 'Substitute y" with x'>
    ## </d>
    ## <d 'Induction'>
      A inductionsuc
    ## </d>
    ## <d 'Substitute A in for x'>
      A x B C sbc-mulass
      mpbi
    ## </d>
  ## </d>
)

## <title> Cancellation of addition </title>
## <suggest> right('Cancel', '+') </suggest>
thm (addcan () ()
  (<-> (= (+ B A) (+ C A)) (= B C))
  x (0) B addeq2 x (0) C addeq2 eqeq12d (= B C) bibi1d
    x y B addeq2 x y C addeq2 eqeq12d (= B C) bibi1d
      x (S y) B addeq2 x (S y) C addeq2 eqeq12d (= B C) bibi1d
        x A B addeq2 x A C addeq2 eqeq12d (= B C) bibi1d

          B pa_ax3 C pa_ax3 eqeq12i

            B y pa_ax4 C y pa_ax4 eqeq12i
            (+ B y) (+ C y) pa_ax2 bitr4i (= B C) bibi1i biimpri
  finds
)

## <title> Substitution </title>
## <table>
##   (<-> ph  [ ps ]   ]    ] )
##   (->      [ ps ]   [ ch ] )
##   (<-> ph  [    [   [ ch ] )
## </table>
thm (ImpReplaceBi1 () (
     replacee (<-> ph ps)
     substitution (-> ps ch)) 
     (-> ph ch)
  replacee
  substitution
  ph biim2i
  ax-mp
)

## <title> Cancellation of addition </title>
## <suggest> right('Cancel', '+') </suggest>
thm (addcan2 () ()
  (<-> (= (+ A B) (+ A C)) (= B C))
  A B addcom A C addcom eqeq12i
    B A C addcan bitri
)

## <title> 0 is not equal to 1 </title>
thm (0ne1 () () (-. (= (0) (1)))
  (0) pa_ax1
  df-1 (0) eqeq2i mtbir
)

## <title> Substitution </title>
## <table>
##   (-. (= A  [ B ]   ]   ] ))
##   (=        [ B ]   [ C ] )
##   (-. (= A  [   [   [ C ] ))
## </table>
thm (EqReplaceNot0Eq1 () (
     replacee (-. (= A B))
     substitution (= B C)) 
     (-. (= A C))
  replacee substitution
  A eqeq2i
  mtbi
)

## <title> 0 is the first natural number </title>
thm (pa_axplus1 () () (-. (= (0) (+ A (1))))
  A pa_ax1  
  ## <d 'Successor Adds One '>
    A a1suc
    EqReplaceNot0Eq1
  ## </d 'Successor Adds One '>
)



## <title> Substitution </title>
## <table>
##   (-> (/\ ph  [ ps ]   ]    ] ) th)
##   (<->        [ ps ]   [ ch ] )
##   (-> (/\ ph  [    [   [ ch ] ) th)
## </table>
thm (BiReplaceImp0An1 () (
     replacee (-> (/\ ph ps) th)
     substitution (<-> ps ch)) 
     (-> (/\ ph ch) th)
  replacee substitution
  ph anbi2i
  sylbi2
)


## <title> Substitution </title>
## <table>
##   (-> (/\ ph (A. x  [ ps ]   ]    ] )) th)
##   (<->              [ ps ]   [ ch ] )
##   (-> (/\ ph (A. x  [    [   [ ch ] )) th)
## </table>
thm (BiReplaceImp0An1Al1 () (
     replacee (-> (/\ ph (A. x ps)) th)
     substitution (<-> ps ch)) 
     (-> (/\ ph (A. x ch)) th)
  replacee substitution
  x albii
  BiReplaceImp0An1
)


## <title> Substitution </title>
## <table>
##   (-> (/\ ph (A. x (-> ps  [ ch ]   ]    ] ))) ta)
##   (<->                     [ ch ]   [ th ] )
##   (-> (/\ ph (A. x (-> ps  [    [   [ th ] ))) ta)
## </table>
thm (BiReplaceImp0An1Al1Imp1 () (
     replacee (-> (/\ ph (A. x (-> ps ch))) ta)
     substitution (<-> ch th)) 
     (-> (/\ ph (A. x (-> ps th))) ta)
  replacee substitution
  ps imbi2i
  BiReplaceImp0An1Al1
)


## <title> Substitution </title>
## <table>
##   (-> (/\ ph (A. x (-> ps (A. y  [ ch ]   ]    ] )))) ta)
##   (<->                           [ ch ]   [ th ] )
##   (-> (/\ ph (A. x (-> ps (A. y  [    [   [ th ] )))) ta)
## </table>
thm (BiReplaceImp0An1Al1Imp1Al1 () (
     replacee (-> (/\ ph (A. x (-> ps (A. y ch)))) ta)
     substitution (<-> ch th)) 
     (-> (/\ ph (A. x (-> ps (A. y th)))) ta)
  replacee substitution
  y albii
  BiReplaceImp0An1Al1Imp1
)


## <title> Substitution </title>
## <table>
##   (-> (/\ ph (A. x (-> ps (A. y (->  [ ch ]   ]    ]  ta))))) et)
##   (<->                               [ ch ]   [ th ] )
##   (-> (/\ ph (A. x (-> ps (A. y (->  [    [   [ th ]  ta))))) et)
## </table>
thm (BiReplaceImp0An1Al1Imp1Al1Imp0 () (
     replacee (-> (/\ ph (A. x (-> ps (A. y (-> ch ta))))) et)
     substitution (<-> ch th)) 
     (-> (/\ ph (A. x (-> ps (A. y (-> th ta))))) et)
  replacee substitution
  ta imbi1i
  BiReplaceImp0An1Al1Imp1Al1
)


## <title> Substitution </title>
## <table>
##   (-> (/\ ph (A. x (-> ps (A. y (-> (= A  [ B ]   ]   ] ) ch))))) th)
##   (=                                      [ B ]   [ C ] )
##   (-> (/\ ph (A. x (-> ps (A. y (-> (= A  [   [   [ C ] ) ch))))) th)
## </table>
thm (EqReplaceImp0An1Al1Imp1Al1Imp0Eq1 () (
     replacee (-> (/\ ph (A. x (-> ps (A. y (-> (= A B) ch))))) th)
     substitution (= B C)) 
     (-> (/\ ph (A. x (-> ps (A. y (-> (= A C) ch))))) th)
  replacee substitution
  A eqeq2i
  BiReplaceImp0An1Al1Imp1Al1Imp0
)

## <title> Induction </title>
## <summary> Induction axiom rewritten using addition instead of successor </title>
thm (pa_indplus1 ((ph y)) () (-> (/\ (A. x (-> (= x (0)) ph)) (A. y (-> (A. x (-> (= x y) ph)) (A. x (-> (= x (+ y (1))) ph))))) (A. x ph))
  x ph y pa_ind
  y a1suc  
  EqReplaceImp0An1Al1Imp1Al1Imp0Eq1
)

## <title> Substitution </title>
## <table>
##   (-> (/\  [ ph ]   ]    ]  ch) th)
##   (<->     [ ph ]   [ ps ] )
##   (-> (/\  [    [   [ ps ]  ch) th)
## </table>
thm (BiReplaceImp0An0 () (
     replacee (-> (/\ ph ch) th)
     substitution (<-> ph ps)) 
     (-> (/\ ps ch) th)
  replacee substitution
  ch anbi1i
  sylbi2
)

## <title> Substitution </title>
## <table>
##   (-> (/\ ph (A. x (->  [ ps ]   ]    ]  th))) ta)
##   (<->                  [ ps ]   [ ch ] )
##   (-> (/\ ph (A. x (->  [    [   [ ch ]  th))) ta)
## </table>
thm (BiReplaceImp0An1Al1Imp0 () (
     replacee (-> (/\ ph (A. x (-> ps th))) ta)
     substitution (<-> ps ch)) 
     (-> (/\ ph (A. x (-> ch th))) ta)
  replacee substitution
  th imbi1i
  BiReplaceImp0An1Al1
)

thm (induction1 ((ph y)) () (-> (/\ ([/] (0) z ph) (A. y (-> ([/] y z ph) ([/] (+ y (1)) z ph)))) ([/] A z ph))
  x ([/] x z ph) y pa_indplus1
  ## <d>
    x (0) z ph dfsbcq  ceqsal
    BiReplaceImp0An0
  ## </d>
  ## <d>
    x y z ph dfsbcq  ceqsal  
    BiReplaceImp0An1Al1Imp0
  ## </d>
  ## <d>
    x (+ y (1)) z ph dfsbcq  ceqsal  
    BiReplaceImp0An1Al1Imp1
  ## </d>
  ## <d>
    x A z ph dfsbcq
    cla4g  
    syl
  ## </d>
)

## <summary> This is used just for convenience to get an empty theorem. </summary>
thm (emptyThm() () (T)
 tru
)

export (ADD_MULTIPLY_MIN ../common/add_multiply_min.ghi (PROP PREDICATE) "")
export (ADD_MULTIPLY_NAT add_multiply_nat.ghi (PROP PREDICATE ADD_MULTIPLY_MIN) "")
