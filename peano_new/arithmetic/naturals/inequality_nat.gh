import (PROP      /peano_new/prop.ghi () "")
import (PREDICATE /peano_new/predicate/all.ghi (PROP) "")
import (NATURALS  /peano_new/arithmetic/naturals/common.ghi (PROP PREDICATE) "")

tvar (wff ph ps ch th ta et ph' ps' ch' th' ta')
tvar (nat A B C D A' B' C' D' A0 A1 A2 A3 i j k)
var (nat v w x y z v' w' x' y' z')

export (ADD_MULTIPLY_MIN   /peano_new/arithmetic/common/add_multiply_min.ghi (PROP PREDICATE) "")
export (INEQUALITY_MIN     /peano_new/arithmetic/common/inequality_min.ghi (PROP PREDICATE ADD_MULTIPLY_MIN) "")
import (INEQUALITY_NAT_MIN /peano_new/arithmetic/naturals/inequality_nat_min.ghi (PROP PREDICATE ADD_MULTIPLY_MIN INEQUALITY_MIN) "")


## <context>
##   This theorem is part of a series of theorems describing inequalities for
##   natural numbers.
## </context>

## <title> Substitution </title>
## <table>
##   (<=  [ A ]   ]   ]  C)
##   (=   [ A ]   [ B ] )
##   (<=  [   [   [ B ]  C)
## </table>
thm (EqReplaceLe0 () (
     replacee (<= A C)
     substitution (= A B)) 
     (<= B C)
  replacee substitution
  C leeq1i
  mpbi
)

thm (addge01t () () (<= A (+ A B))
  B 0le
  ## <d>
    (0) B A leadd2
    mpbi  
  ## </d>
  ## <d 'Additive Identity '>
    A addid
    EqReplaceLe0
  ## </d 'Additive Identity '>
)

thm (addge02t () () (<= A (+ B A))
  B 0le
  ## <d>
    (0) B A leadd1
    mpbi  
  ## </d>
  ## <d 'Additive Identity '>
    A addidr
    EqReplaceLe0
  ## </d 'Additive Identity '>
)

## <title> Substitution </title>
## <table>
##   (> A  [ B ]   ]   ] )
##   (=    [ B ]   [ C ] )
##   (> A  [   [   [ C ] )
## </table>
thm (EqReplaceGt1 () (
     replacee (> A B)
     substitution (= B C)) 
     (> A C)
  replacee substitution
  A gteq2i
  mpbi
)

## <title> Addition implies ≤ </title>
thm (provele () () (-> (= (+ A B) C) (<= A C))
  (= (+ A B) C) z alnfi
  z B tyex
  ## <d 'Symmetric Property '>
    z B eqcom
    exbiii
  ## </d 'Symmetric Property '>
  B z A addeq2
  C eqeq1d
  z 19.22i
  ax-mp
  ## <d 'Infer Left to Right '>
    (= (+ A B) C) (= (+ A z) C) bi1  
    z 19.22i
    ax-mp
  ## </d 'Infer Left to Right '>
  z (= (+ A B) C) (= (+ A z) C) eximp1
  ax-mp
  syl
  ## <d 'Definition of Less Than or Equal to '>
    A C z df-le bicomi
    sylib
  ## </d 'Definition of Less Than or Equal to '>
)

thm (lefoo3 () ()
  (<-> (<= A B) (\/ (= A B) (<= (+ A (1)) B)))
  A B x df-le
    x y lefoo
      x (0) A addeq2
      A addid syl6eq B eqeq1d biimpd com12
        (+ (1) y) x A addeq2 A (1) y addass syl5eq
        B eqeq1d biimprd com12
        y 19.22d
        (+ A (1)) B y df-le syl6ibr
      orim12d
    mpi
  x 19.23ai sylbi
    A leid (= A B) id A leeq2d mpbii
      A (1) addge01t A (+ A (1)) B letr mpan
    jaoi
  impbii
)

thm (gt1add () ()  (> (+ A (1)) A)
  0less1  
  ## <d 'Converse of < '>
    (0) (1) ltcon
    mpbi
  ## </d 'Converse of < '>
  A gtadd2i  
  ## <d 'Additive Identity '>
    A addid
    EqReplaceGt1
  ## </d 'Additive Identity '>
)

thm (nnltp1let () ()  (<-> (< A B) (<= (+ A (1)) B))
  A B df-lt
  A B lefoo3 (-. (= A B)) anbi1i bitri
  A gt1add
  ## <d 'Def. Greater Than '>
    (+ A (1)) A df-gt
    mpbi
  ## </d 'Def. Greater Than '>
  (= A B) id (+ A (1)) leeq2d mtbii
   con2i pm4.71i
      (<= (+ A (1)) B) (= A B) pm5.61
      (<= (+ A (1)) B) (= A B) orcom (-. (= A B)) anbi1i bitr3i
    bitri
  bitr4i
)

## <title> Convert between ≤ and < </title>
## <summary> This proves that natural numbers are whole numbers. </summary>
## <suggest> right('Equivalence', '≤-1') left('Equivalence', '<') </suggest>
thm (lePlus1 () () (<-> (< A (+ B (1))) (<= A B))
   A (+ B (1)) nnltp1let
   A B (1) leadd1 bicomi bitri
)

## <title> No Natural Numbers Below Zero </title>
thm (ge0 () () (>= A (0))
  A 0le  
  ## <d 'Converse of ≤ '>
    (0) A lecon
    mpbi
  ## </d 'Converse of ≤ '>
)

## <title> Inequality Conversion </title>
## <suggest> left('Simplify', '<') </suggest>
thm (axlttri () () (<-> (< A B) (-. (\/ (= A B) (< B A))))
  A B df-lt
  A B lecon  
  ## <d 'Def. Greater Than or Equal to '>
    B A df-ge
    bitri
  ## </d 'Def. Greater Than or Equal to '>
  (-. (= A B)) anbi1i bitri
    (< B A) (= A B) ioran
      (< B A) (= A B) orcom notbii
    bitr3i
  bitri
)

## <title> Natural Numbers are Whole Numbers </title>
thm (natWhole () () (-. (/\ (< A B) (< B (+ A (1)))))
  A B nnltp1let  
  (+ A (1)) B df-gt  
  ## <d 'Converse of < '>
    B (+ A (1)) ltcon bicomi
    bitr3icom
  ## </d 'Converse of < '>
  anbi12i  
  ## <d 'Remove Left Side of AND '>
    (<= (+ A (1)) B) pm3.24    
    mtbirRemove
  ## </d 'Remove Left Side of AND '>
)

## <summary> For naturals, equal to zero is equivalent to less than or equal to zero </summary>
thm (eq0le0 () () (<-> (= A (0)) (<= A (0)))
     A (0) lesym
     # 0 <= A
     (0) A addge01t    A addidr (0) leeq2i     mpbi
   mpbiran2
)

## <title> Substitution </title>
## <table>
##   (\/ ph (<=  [ A ]   ]   ]  C))
##   (=          [ A ]   [ B ] )
##   (\/ ph (<=  [   [   [ B ]  C))
## </table>
thm (EqReplaceOr1Le0 () (
     replacee (\/ ph (<= A C))
     substitution (= A B)) 
     (\/ ph (<= B C))
  replacee substitution
  C leeq1i
  orbi2ii
)

thm (0orpos () () (\/ (= A (0)) (<= (1) A))
  A 0le
  (0) A lefoo3  
  mpbi  
  ## <d 'Additive Identity '>
    (1) addidr
    EqReplaceOr1Le0
  ## </d 'Additive Identity '>  
  ## <d 'Symmetric Property '>
    (0) A eqcom
    orbi1ii
  ## </d 'Symmetric Property '>
)

## <title> Multiply Both Sides </title>
## <summary> Multiplication is monotonic in its second argument </summary>
thm (lemul2nat () () (-> (<= A B) (<= (* C A) (* C B)))
  A B x df-le
    (0) eqid
      y (* C x) (* C A) addeq2
        (+ A x) B C muleq2
        C A x distr syl5eqr
      sylan9eq
      (= (0) (0)) adantl x substex
    mpan
  sylbi
    (* C A) (* C B) y df-le
  sylibr
)

## <title> Convert between ≤ and < </title>
## <suggest> right('Equivalence', '≤+1') left('Equivalence', '<-1') </suggest>
thm (ltle2 () () (<-> (< A B) (<= (+ A (1)) B))
  (+ A (1)) B lePlus1
  A B (1) ltadd1
  ## <d>
    (< A B) (< (+ A (1)) (+ B (1))) bicom
  ## </d>
  mpbi
  bitr3icom
)

export (INEQUALITY_NAT inequality_nat.ghi (PROP PREDICATE NATURALS) "")