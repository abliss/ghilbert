import (PROP ../../../prop.ghi () "")
import (Z_PREDICATE ../../../predicate/all.ghi (PROP) "z.")
import (ORDERED_PAIR ../../common/ordered-pair.ghi (PROP Z_PREDICATE) "z.")
import (Z_NATURALS ../../naturals/common.ghi (PROP Z_PREDICATE) "z.")

kindbind (z.nat nat)

tvar (wff ph ps ch th ta)
tvar (nat A B C D A' B' C' D')
tvar (z.nat a b c d)
var (z.nat v w x y z)


# Briefly Add Back Predicate Calculus

## <summary>
##   To be able to bind z.nat and nat we cannot import predicate because that would reintroduce nat.
##   So we have to prove everything in predicate_min from z. Here we redefine z.A. as A.
## </summary>
defthm (df-al wff (A. x ph) () ()  (<-> (A. x ph) (z.A. x ph)) 
  (z.A. x ph) biid)

## <summary> Reproved for integers directly from the natural number versioz. </title>
thm (alnfi ((ph x)) () (-> ph (A. x ph))
  ph x z.alnfi
  x ph df-al bicomi  
  sylib
)

## <title> Generalization Axiom </title>
## <table>
##       [ ph ]
## (A. x [ ph ] )
## </table>
## <summary> Reproved for integers directly from the natural number versioz. </title>
thm (gen () (hyp ph) (A. x ph)
  hyp
  x z.gen
  x ph df-al bicomi  
  mpbi
)

# roughly Margaris A5, but without the subst
## <title> Axiom 4: Specialization </title>
## <suggest> right('Remove', 'âˆ€') </suggest>
thm (ax-4 () () (-> (A. x ph) ph)
  x ph z.ax-4
  x ph df-al bicomi    
  sylbi2
)

## <title> Substitution </title>
## <table>
##   (-> ph (->  [ ps ]   ]    ]  th))
##   (<->        [ ps ]   [ ch ] )
##   (-> ph (->  [    [   [ ch ]  th))
## </table>
thm (BiReplaceImp1Imp0 () (
     replacee (-> ph (-> ps th))
     substitution (<-> ps ch)) 
     (-> ph (-> ch th))
  replacee substitution
  th imbi1i
  sylib
)

## <title> Substitution </title>
## <table>
##   (-> ph (-> ps  [ ch ]   ]    ] ))
##   (<->           [ ch ]   [ th ] )
##   (-> ph (-> ps  [    [   [ th ] ))
## </table>
thm (BiReplaceImp1Imp1 () (
     replacee (-> ph (-> ps ch))
     substitution (<-> ch th)) 
     (-> ph (-> ps th))
  replacee substitution
  ps imbi2i
  sylib
)

## <title> Axiom 5: Quantified Implication </title>
thm (ax-alim () () (-> (A. x (-> ph ps)) (-> (A. x ph) (A. x ps)))
  x ph ps z.ax-alim
  ## <d>
  x (-> ph ps) df-al bicomi 
  sylbi2
  ## </d>
  ## <d>
  x ph df-al bicomi  
  BiReplaceImp1Imp0
  ## </d>
  ## <d>
  x ps df-al bicomi    
  BiReplaceImp1Imp1
  ## </d>
)

## <title> Substitution </title>
## <table>
##   (-> (-.  [ ph ]   ]    ] ) ch)
##   (<->     [ ph ]   [ ps ] )
##   (-> (-.  [    [   [ ps ] ) ch)
## </table>
thm (BiReplaceImp0Not0 () (
     replacee (-> (-. ph) ch)
     substitution (<-> ph ps)) 
     (-> (-. ps) ch)
  replacee substitution
  con4biir
  sylbi2
)

## <title> Axiom 6: Quantified Negation </title>
thm (ax-6 () () (-> (-. (A. x ph)) (A. x (-. (A. x ph))))
  x ph z.ax-6
  x ph df-al bicomi    
  BiReplaceImp0Not0
  x ph df-al bicomi
  
  ## <d 'Negate Both Sides '>
    (z.A. x ph) (A. x ph) notbi
    mpbi
  ## </d 'Negate Both Sides '>
  x z.albii  
  sylib
  x (-. (A. x ph)) df-al bicomi
  sylib
)

## <title> Axiom 7: Quantifier Commutation </title>
thm (ax-7 () () (-> (A. x (A. y ph)) (A. y (A. x ph)))
  x y ph z.ax-7
  ## <d>
  x ph df-al bicomi
  y z.albii
  y (A. x ph) df-al bicomi
  bitri  
  sylib
  ## </d>
  ## <d>
  y ph df-al bicomi
  x z.albii
  x (A. y ph) df-al bicomi  
  bitri
  sylbi2
  ## </d>
)

export (PREDICATE_MIN ../../../predicate/predicate_min.ghi (PROP) "")
import (PREDICATE ../../../predicate/predicate.ghi (PROP PREDICATE_MIN) "")


## <title> Substitution </title>
## <table>
##   (<-> ph (-.  [ ps ]   ]    ] ))
##   (<->         [ ps ]   [ ch ] )
##   (<-> ph (-.  [    [   [ ch ] ))
## </table>
thm (BiReplaceBi1Not0 () (
     replacee (<-> ph (-. ps))
     substitution (<-> ps ch)) 
     (<-> ph (-. ch))
  replacee substitution
  con4biir
  bitri
)

## <title> Rational and Integer Existence are the same </title>
thm (zexex () () (<-> (z.E. x ph) (E. x ph))
  x ph z.df-ex
  x (-. ph) df-al bicomi    
  BiReplaceBi1Not0
  x ph df-ex bicomi  
  bitri
)

## <title> Substitution </title>
## <table>
##   (-> ph (z.=  [ A ]   ]   ]  C))
##   (z.=         [ A ]   [ B ] )
##   (-> ph (z.=  [   [   [ B ]  C))
## </table>
thm (ZeqReplaceImp1Zeq0 () (
     replacee (-> ph (z.= A C))
     substitution (z.= A B)) 
     (-> ph (z.= B C))
  replacee substitution
  C z.eqeq1i
  sylib
)

## <title> Substitution </title>
## <table>
##   (-> ph (z.= A  [ B ]   ]   ] ))
##   (z.=           [ B ]   [ C ] )
##   (-> ph (z.= A  [   [   [ C ] ))
## </table>
thm (ZeqReplaceImp1Zeq1 () (
     replacee (-> ph (z.= A B))
     substitution (z.= B C)) 
     (-> ph (z.= A C))
  replacee substitution
  A z.eqeq2i
  sylib
)

## <title> Definition of numerator </title>
## <summary>
##   The numerator or top of a rational number. This is the same as the head of an
##   ordered pair. This definition is just a way of explaining that the head
##   of the ordered pair is the numerator. The head of the ordered pair is expected
##   to be in the format of an integer. This is only used in the construction of the rationals. It is
##   ambiguous since the number 1/2, could be represented as 1/2, 2/4, or 6/12 and the bottom value
##   would be different in each case. Thus all the theorems in the construction of the rationals
##   assume that we do not know the value of bottom, we only know the ratio between the top and bottom
##   values.
## </summary>
defthm (df-top nat (top A) () () (z.= (top A) (z.head A))
  (z.head A) z.eqid
)

## <title> Equivalence for numerator </title>
thm (topeq () () (-> (z.= A B) (z.= (top A) (top B)))
  A B z.headeq
  A df-top z.eqcomi  ZeqReplaceImp1Zeq0
  B df-top z.eqcomi  ZeqReplaceImp1Zeq1
)

## <title> Definition of denominator </title>
## <summary>
##   The numerator or bottom of a rational number. This is the same as the tail of an
##   ordered pair. This definition is just a way of explaining that the tail
##   of the ordered pair is the denominator. The tail of the ordered pair is expected
##   to be in the format of an integer. This is only used in the construction of the rationals. It is
##   ambiguous since the number 1/2, could be represented as 1/2, 2/4, or 6/12 and the bottom value
##   would be different in each case. Thus all the theorems in the construction of the rationals
##   assume that we do not know the value of bottom, we only know the ratio between the top and bottom
##   values.
## </summary>
defthm (df-bottom nat (bottom A) () () (z.= (bottom A) (z.tail A))
  (z.tail A) z.eqid
)

## <title> Equivalence for denominator </title>
thm (bottomeq () () (-> (z.= A B) (z.= (bottom A) (bottom B)))
  A B z.taileq
  A df-bottom z.eqcomi  ZeqReplaceImp1Zeq0
  B df-bottom z.eqcomi  ZeqReplaceImp1Zeq1
)

thm (bottomeqd () (
     hyp1 (-> ph (z.= A B)))
     (-> ph (z.= (bottom A) (bottom B)))
  hyp1  A B bottomeq  syl
)

## <title> Substitution </title>
## <table>
##   (z.=  [ A ]   ]   ]  C)
##   (z.=  [ A ]   [ B ] )
##   (z.=  [   [   [ B ]  C)
## </table>
thm (NeqReplaceNeq0 () (
     replacee (z.= A C)
     substitution (z.= A B)) 
     (z.= B C)
  replacee substitution
  C z.eqeq1i
  mpbi
)

## <title> Substitution </title>
## <table>
##   (z.= A  [ B ]   ]   ] )
##   (z.=    [ B ]   [ C ] )
##   (z.= A  [   [   [ C ] )
## </table>
thm (NeqReplaceNeq1 () (
     replacee (z.= A B)
     substitution (z.= B C)) 
     (z.= A C)
  replacee
  substitution
A z.eqeq2i
mpbi
)

## <title> Definition of Rational Equality </title>
## <summary> For more information see the <a href="/wiki/peano/arithmetic/rationals">construction of the rationals</a>. </summary> 
## <suggest> left('Simplify', '=') </suggest>
defthm (df-eq wff (= A B) () ()
      (<-> (= A B) (/\ (z.= (z.* (top A) (bottom B)) (z.* (top B) (bottom A)))
                        (<-> (z.= (bottom A) (z.0)) (z.= (bottom B) (z.0)))))
    (/\ (z.= (z.* (top A) (bottom B)) (z.* (top B) (bottom A)))
        (<-> (z.= (bottom A) (z.0)) (z.= (bottom B) (z.0)))) biid
)

## <title> Part of the Rational Equality Definition </title>
thm (dfeq1 () () (-> (= A B) (z.= (z.* (top A) (bottom B)) (z.* (top B) (bottom A))))
  A B df-eq
  ## <d 'Infer Left to Right '>
    (= A B) (/\ (z.= (z.* (top A) (bottom B)) (z.* (top B) (bottom A))) (<-> (z.= (bottom A) (z.0)) (z.= (bottom B) (z.0)))) bi1
    ax-mp
  ## </d 'Infer Left to Right '>
  ## <d 'Remove Right Side of AND '>
    (z.= (z.* (top A) (bottom B)) (z.* (top B) (bottom A))) (<-> (z.= (bottom A) (z.0)) (z.= (bottom B) (z.0))) pm3.26
    syl
  ## </d 'Remove Right Side of AND '>
)

## <title> Part of the Rational Equality Definition </title>
thm (dfeq2 () () (-> (= A B) (<-> (z.= (bottom A) (z.0)) (z.= (bottom B) (z.0))))
  A B df-eq
  ## <d 'Infer Left to Right '>
    (= A B) (/\ (z.= (z.* (top A) (bottom B)) (z.* (top B) (bottom A))) (<-> (z.= (bottom A) (z.0)) (z.= (bottom B) (z.0)))) bi1
    ax-mp
  ## </d 'Infer Left to Right '>
  ## <d 'Remove Left Side of AND '>
    (z.= (z.* (top A) (bottom B)) (z.* (top B) (bottom A))) (<-> (z.= (bottom A) (z.0)) (z.= (bottom B) (z.0))) pm3.27
    syl
  ## </d 'Remove Left Side of AND '>
)



## <title> Reflexive Property </title>
thm (eqid () () (= A A)
  A A df-eq
  (z.* (top A) (bottom A)) z.eqid
  (z.= (bottom A) (z.0)) biid
  pm3.2i
  mpbirRemove
)

## <title> Substitution </title>
## <table>
##   (<-> ph (/\  [ ps ]   ]    ]  th))
##   (<->         [ ps ]   [ ch ] )
##   (<-> ph (/\  [    [   [ ch ]  th))
## </table>
thm (BiReplaceBi1An0 () (
     replacee (<-> ph (/\ ps th))
     substitution (<-> ps ch)) 
     (<-> ph (/\ ch th))
  replacee substitution
  th anbi1i
  bitri
)

## <title> Substitution </title>
## <table>
##   (<-> ph (/\ ps  [ ch ]   ]    ] ))
##   (<->            [ ch ]   [ th ] )
##   (<-> ph (/\ ps  [    [   [ th ] ))
## </table>
thm (BiReplaceBi1An1 () (
     replacee (<-> ph (/\ ps ch))
     substitution (<-> ch th)) 
     (<-> ph (/\ ps th))
  replacee substitution
  ps anbi2i
  bitri
)

## <title> Symmetric Property </title>
## <summary> Rational equality is symmetric.
##   For more information see the <a href="/wiki/peano/arithmetic/rationals">construction of the rationals</a>. </summary>
## <suggest> right('Commute', '=') </suggest>
thm (eqcom () () (<-> (= A B) (= B A))
  A B df-eq
  ## <d 'Symmetric Property '>
    (z.* (top A) (bottom B)) (z.* (top B) (bottom A)) z.eqcom
    BiReplaceBi1An0
  ## </d 'Symmetric Property '>
  ## <d 'Commutative Biconditional '>
    (z.= (bottom A) (z.0)) (z.= (bottom B) (z.0)) bicom
    BiReplaceBi1An1
  ## </d 'Commutative Biconditional '>
  B A df-eq bicomi  
  bitri
)



## <title> Substitution </title>
## <table>
##   (-> ph (/\ ps  [ ch ]   ]    ] ))
##   (<->           [ ch ]   [ th ] )
##   (-> ph (/\ ps  [    [   [ th ] ))
## </table>
thm (BiReplaceImp1An1 () (
     replacee (-> ph (/\ ps ch))
     substitution (<-> ch th)) 
     (-> ph (/\ ps th))
  replacee substitution
  ps anbi2i
  sylib
)

## <title> Substitution </title>
## <table>
##   (-> ph (/\ ps  [ ch ]   ]    ] ))
##   (->            [ ch ]   [ th ] )
##   (-> ph (/\ ps  [    [   [ th ] ))
## </table>
thm (ImpReplaceImp1An1 () (
     replacee (-> ph (/\ ps ch))
     substitution (-> ch th)) 
     (-> ph (/\ ps th))
  replacee substitution
  ps anim2i
  syl
)

thm (eqtr.0 () () (-> (/\ (= A B) (= B C)) (<-> (z.= (bottom A) (z.0)) (z.= (bottom C) (z.0))))
  A B dfeq2
  B C dfeq2
  anim12i  
  ## <d 'Transitive Property '>
    (z.= (bottom A) (z.0)) (z.= (bottom B) (z.0)) (z.= (bottom C) (z.0)) bitr
    syl
  ## </d 'Transitive Property '>
)

## <title> First Part of Transitivity Proof </title>
thm (eqtr.1 () () (-> (= A B) (-> (/\ (z.= (top B) (z.0)) (-. (z.= (bottom B) (z.0)))) (z.= (top A) (z.0))))
  A B dfeq1
  (top B) (z.0) (bottom A) z.muleq1
  ## <d 'Multiply by 0 '>
    (bottom A) z.mul0r
    ZeqReplaceImp1Zeq1
  ## </d 'Multiply by 0 '>
  anim12i
  ## <d 'Transitive Property '>
    (z.* (top A) (bottom B)) (z.* (top B) (bottom A)) (z.0) z.eqtr
    syl
  ## </d 'Transitive Property '>
  (bottom B) (top A) z.mulcan0
  anim12i
  ## <d 'Infer Left to Right '>
    (z.= (z.* (top A) (bottom B)) (z.0)) (z.= (top A) (z.0)) bi1
    ImpReplaceImp1An1
  ## </d 'Infer Left to Right '>
  ## <d 'Introduce conjunct as antecedent '>
    (z.= (z.* (top A) (bottom B)) (z.0)) (z.= (top A) (z.0)) abai bicomi
    sylib
  ## </d 'Introduce conjunct as antecedent '>
  ## <d 'Remove Left Side of AND '>
    (z.= (z.* (top A) (bottom B)) (z.0)) (z.= (top A) (z.0)) pm3.27
    syl
  ## </d 'Remove Left Side of AND '>
  ## <d 'Associative Property '>
    (= A B) (z.= (top B) (z.0)) (-. (z.= (bottom B) (z.0))) anass
    sylbi2
  ## </d 'Associative Property '>
  ## <d 'Import-Export Theorem '>
    (= A B) (/\ (z.= (top B) (z.0)) (-. (z.= (bottom B) (z.0)))) (z.= (top A) (z.0)) impexp
    mpbi
  ## </d 'Import-Export Theorem '>
)

## <title> Substitution </title>
## <table>
##   (-> ph (-> ps  [ ch ]   ]    ] ))
##   (->            [ ch ]   [ th ] )
##   (-> ph (-> ps  [    [   [ th ] ))
## </table>
thm (ImpReplaceImp1Imp1 () (
     replacee (-> ph (-> ps ch))
     substitution (-> ch th)) 
     (-> ph (-> ps th))
  replacee substitution
  ps imim2i
  syl
)

## <title> Substitution </title>
## <table>
##   (-> ph (-> ps (z.= A  [ B ]   ]   ] )))
##   (z.=                  [ B ]   [ C ] )
##   (-> ph (-> ps (z.= A  [   [   [ C ] )))
## </table>
thm (ZeqReplaceImp1Imp1Zeq1 () (
     replacee (-> ph (-> ps (z.= a b)))
     substitution (z.= b c)) 
     (-> ph (-> ps (z.= a c)))
  replacee substitution
  a z.eqeq2i
  BiReplaceImp1Imp1
)

## <title> Substitution </title>
## <table>
##   (-> ph (-> (/\ ps  [ ch ]   ]    ] ) ta))
##   (<->               [ ch ]   [ th ] )
##   (-> ph (-> (/\ ps  [    [   [ th ] ) ta))
## </table>
thm (BiReplaceImp1Imp0An1 () (
     replacee (-> ph (-> (/\ ps ch) ta))
     substitution (<-> ch th)) 
     (-> ph (-> (/\ ps th) ta))
  replacee substitution
  ps anbi2i
  BiReplaceImp1Imp0
)

thm (eqtr.2 () () (-> (/\ (z.= (top B) (z.0)) (-. (z.= (bottom B) (z.0)))) (-> (/\ (= A B) (= B C)) (= A C)))
   A B eqtr.1
  (top A) (z.0) (bottom C) z.muleq1   
  ## <d 'Multiply by 0 '>
    (bottom C) z.mul0r
    ZeqReplaceImp1Zeq1
  ## </d 'Multiply by 0 '>
  ImpReplaceImp1Imp1
  com12

  C B eqtr.1
  (top C) (z.0) (bottom A) z.muleq1   
  ImpReplaceImp1Imp1  
  ## <d 'Multiply by 0 '>
    (bottom A) z.mul0r
    ZeqReplaceImp1Imp1Zeq1
  ## </d 'Multiply by 0 '>  
  ## <d 'Symmetric Property '>
    (z.* (top C) (bottom A)) (z.0) z.eqcom
    BiReplaceImp1Imp1
  ## </d 'Symmetric Property '>
  com12
  anim12d  
  ## <d 'Transitive Property '>
    (z.* (top A) (bottom C)) (z.0) (z.* (top C) (bottom A)) z.eqtr
    ImpReplaceImp1Imp1
  ## </d 'Transitive Property '>
  
  ## <d>
    C B eqcom
    BiReplaceImp1Imp0An1
  ## </d>
  A B C eqtr.0
  (/\ (z.= (top B) (z.0)) (-. (z.= (bottom B) (z.0)))) a1i
  jcad  
  ## <d 'Definition of Rational Equality '>
    A C df-eq bicomi
    BiReplaceImp1Imp1
  ## </d 'Definition of Rational Equality '>
)

thm (eqtr.4 () () (-> (/\ (z.= (bottom B) (z.0)) (= A B)) (z.= (bottom A) (z.0)))
  A B dfeq2
  (z.= (bottom B) (z.0)) anim2i  
  ## <d 'Infer Right to Left '>
    (z.= (bottom A) (z.0)) (z.= (bottom B) (z.0)) bi2
    ImpReplaceImp1An1
  ## </d 'Infer Right to Left '>
  ## <d 'Introduce conjunct as antecedent '>
    (z.= (bottom B) (z.0)) (z.= (bottom A) (z.0)) abai bicomi
    sylib
  ## </d 'Introduce conjunct as antecedent '>
  ## <d 'Remove Left Side of AND '>
    (z.= (bottom B) (z.0)) (z.= (bottom A) (z.0)) pm3.27
    syl
  ## </d 'Remove Left Side of AND '>
)



## <title> Substitution </title>
## <table>
##   (-> (/\ ph  [ ps ]   ]    ] ) th)
##   (<->        [ ps ]   [ ch ] )
##   (-> (/\ ph  [    [   [ ch ] ) th)
## </table>
thm (BiReplaceImp0An1 () (
     replacee (-> (/\ ph ps) th)
     substitution (<-> ps ch)) 
     (-> (/\ ph ch) th)
  replacee substitution
  ph anbi2i
  sylbi2
)

## <title> Substitution </title>
## <table>
##   (<-> ph (/\ (z.=  [ A ]   ]   ]  C) ps))
##   (z.=              [ A ]   [ B ] )
##   (<-> ph (/\ (z.=  [   [   [ B ]  C) ps))
## </table>
thm (ZeqReplaceBi1An0Zeq0 () (
     replacee (<-> ph (/\ (z.= A C) ps))
     substitution (z.= A B)) 
     (<-> ph (/\ (z.= B C) ps))
  replacee substitution
  C z.eqeq1i
  BiReplaceBi1An0
)

thm (eqtr.5 () () (-> (z.= (bottom B) (z.0)) (-> (/\ (= A B) (= B C)) (= A C)))
  B A eqtr.4
  (bottom A) (z.0) (top C) z.muleq1  
  ## <d 'Multiply by 0 '>
    (top C) z.mul0r
    ZeqReplaceImp1Zeq1
  ## </d 'Multiply by 0 '>
  syl
  B C eqtr.4  
  ## <d>
    C B eqcom
    BiReplaceImp0An1
  ## </d>  
  (bottom C) (z.0) (top A) z.muleq2
  ## <d 'Multiply by 0 '>
    (top A) z.mul0
    ZeqReplaceImp1Zeq1
  ## </d 'Multiply by 0 '>
  syl
  anim12i
  (z.= (bottom B) (z.0)) (= A B) (z.= (bottom B) (z.0)) (= B C) an4 
  ## <d 'Conjunction is Idempotent '>
    (z.= (bottom B) (z.0)) anidm
    BiReplaceBi1An0
  ## </d 'Conjunction is Idempotent '>
  sylbi2
  ## <d 'Symmetric Property '>
    (z.* (top A) (bottom C)) (z.0) z.eqcom
    BiReplaceImp1An1
  ## </d 'Symmetric Property '>
  ## <d 'Transitive Property '>
    (z.* (bottom A) (top C)) (z.0) (z.* (top A) (bottom C)) z.eqtr
    syl
  ## </d 'Transitive Property '>
  ## <d 'Import-Export Theorem '>
    (z.= (bottom B) (z.0)) (/\ (= A B) (= B C)) (z.= (z.* (bottom A) (top C)) (z.* (top A) (bottom C))) impexp
    mpbi
  ## </d 'Import-Export Theorem '>
  A B C eqtr.0
  (z.= (bottom B) (z.0)) a1i
  jcad
  A C df-eq
  ## <d 'Symmetric Property '>
    (z.* (top A) (bottom C)) (z.* (top C) (bottom A)) z.eqcom
    BiReplaceBi1An0
  ## </d 'Symmetric Property '>
  ## <d 'Commutative Property of Multiplication '>
    (top C) (bottom A) z.mulcom
    ZeqReplaceBi1An0Zeq0
  ## </d 'Commutative Property of Multiplication '>
  bicomi  
  BiReplaceImp1Imp1
)

## <title> Substitution </title>
## <table>
##   (-> ph (<-> ps  [ ch ]   ]    ] ))
##   (<->            [ ch ]   [ th ] )
##   (-> ph (<-> ps  [    [   [ th ] ))
## </table>
thm (BiReplaceImp1Bi1 () (
     replacee (-> ph (<-> ps ch))
     substitution (<-> ch th)) 
     (-> ph (<-> ps th))
  replacee substitution
  ps bibi2i
  sylib
)


## <title> Substitution </title>
## <table>
##   (-> ph (-.  [ ps ]   ]    ] ))
##   (<->        [ ps ]   [ ch ] )
##   (-> ph (-.  [    [   [ ch ] ))
## </table>
thm (BiReplaceImp1Not0 () (
     replacee (-> ph (-. ps))
     substitution (<-> ps ch)) 
     (-> ph (-. ch))
  replacee substitution
  con4biir
  sylib
)

## <title> Substitution </title>
## <table>
##   (-> ph (-. (z.=  [ A ]   ]   ]  C)))
##   (z.=             [ A ]   [ B ] )
##   (-> ph (-. (z.=  [   [   [ B ]  C)))
## </table>
thm (ZeqReplaceImp1Not0Zeq0 () (
     replacee (-> ph (-. (z.= A C)))
     substitution (z.= A B)) 
     (-> ph (-. (z.= B C)))
  replacee substitution
  C z.eqeq1i
  BiReplaceImp1Not0
)

thm (eqtr.3 () () (-> (/\ (-. (z.= (bottom B) (z.0))) (-. (z.= (top B) (z.0)))) (-> (/\ (= A B) (= B C)) (= A C)))
  A B dfeq1
  B C dfeq1
  anim12i

  (z.* (top A) (bottom B))
  (z.* (top B) (bottom A))
  (z.* (top B) (bottom C)) 
  (z.* (top C) (bottom B)) z.muleq12
  syl
  (top A) (bottom B) (top B) (bottom C) z.mul42
  ZeqReplaceImp1Zeq0
  (top B) (bottom A) (top C) (bottom B) z.mul42  
  ZeqReplaceImp1Zeq1
  ## <d 'Commutative Property of Multiplication '>
    (z.* (top B) (bottom B)) (z.* (top C) (bottom A)) z.mulcom
    ZeqReplaceImp1Zeq1
  ## </d 'Commutative Property of Multiplication '>

  (bottom B) (top B) z.zeroProductz
  
  ## <d 'Commutative Property of Multiplication '>
    (bottom B) (top B) z.mulcom
    ZeqReplaceImp1Not0Zeq0
  ## </d 'Commutative Property of Multiplication '>
  (z.* (top B) (bottom B)) (z.* (top A) (bottom C)) (z.* (top C) (bottom A)) z.mulcan
  syl
  ## <d 'Infer Left to Right '>
    (z.= (z.* (z.* (top A) (bottom C)) (z.* (top B) (bottom B))) (z.* (z.* (top C) (bottom A)) (z.* (top B) (bottom B)))) (z.= (z.* (top A) (bottom C)) (z.* (top C) (bottom A))) bi1
    syl
  ## </d 'Infer Left to Right '>
  anim12i  
  ## <d 'Introduce conjunct as antecedent '>
    (z.= (z.* (z.* (top A) (bottom C)) (z.* (top B) (bottom B))) (z.* (z.* (top C) (bottom A)) (z.* (top B) (bottom B)))) (z.= (z.* (top A) (bottom C)) (z.* (top C) (bottom A))) abai bicomi
    sylib
  ## </d 'Introduce conjunct as antecedent '> 
  ## <d 'Remove Left Side of AND '>
    (z.= (z.* (z.* (top A) (bottom C)) (z.* (top B) (bottom B))) (z.* (z.* (top C) (bottom A)) (z.* (top B) (bottom B)))) (z.= (z.* (top A) (bottom C)) (z.* (top C) (bottom A))) pm3.27
    syl
  ## </d 'Remove Left Side of AND '>
  ## <d 'Commute Conjunction '>
    (/\ (= A B) (= B C)) (/\ (-. (z.= (bottom B) (z.0))) (-. (z.= (top B) (z.0)))) ancom
    sylbi2
  ## </d 'Commute Conjunction '>
  ## <d 'Import-Export Theorem '>
    (/\ (-. (z.= (bottom B) (z.0))) (-. (z.= (top B) (z.0)))) (/\ (= A B) (= B C)) (z.= (z.* (top A) (bottom C)) (z.* (top C) (bottom A))) impexp
    mpbi
  ## </d 'Import-Export Theorem '>
  A B C eqtr.0
  (/\ (-. (z.= (bottom B) (z.0))) (-. (z.= (top B) (z.0)))) a1i
  jcad  
  ## <d 'Definition of Rational Equality '>
    A C df-eq bicomi
    BiReplaceImp1Imp1
  ## </d 'Definition of Rational Equality '>
)

## <title> Transitive Property </title>
## <summary> For more information see the <a href="/wiki/peano/arithmetic/rationals">construction of the rationals</a>. </summary> 
## <suggest> right('Transitive', '=') </suggest>
thm (eqtr () () (-> (/\ (= A B) (= B C)) (= A C))
  B A C eqtr.2
  B A C eqtr.3  
  ## <d 'Commute Conjunction '>
    (-. (z.= (bottom B) (z.0))) (-. (z.= (top B) (z.0))) ancom
    sylbi2
  ## </d 'Commute Conjunction '>
  jaoi
  ## <d 'Distributive Property '>
    (z.= (top B) (z.0)) (-. (z.= (top B) (z.0))) (-. (z.= (bottom B) (z.0))) andir bicomi
    sylbi2
  ## </d 'Distributive Property '> 
  ## <d 'Law of excluded middle'>
    (z.= (top B) (z.0)) exmid
    (-. (z.= (bottom B) (z.0))) anRemove1
    (-> (/\ (= A B) (= B C)) (= A C)) imbi1i
    mpbi
  ## </d 'Law of excluded middle '>
  B A C eqtr.5
  jaoi  
  ## <d 'Law of excluded middle '>
    (-. (z.= (bottom B) (z.0))) (z.= (bottom B) (z.0)) orcom
    sylbi2
  ## </d 'Law of excluded middle '>
  
  ## <d 'Definition of OR '>
    (z.= (bottom B) (z.0)) exmid
    ax-mpRemove
  ## </d 'Definition of OR '>
)



thm (eqqeqq1 () () (-> (= A B) (<-> (= A C) (= B C)))
  B A C eqtr ex
  B A eqcom
  sylbi2
  A B C eqtr ex
  impbid
)

## <title> Equivalence over Equality </title>
thm (eqqeqq2 () () (-> (= A B) (<-> (= C A) (= C B)))
  A B C eqqeqq1
    A C eqcom B C eqcom bibi12i
  sylib
)

thm (eqqeqq2i () (
     hyp1 (= A B))
     (<-> (= C A) (= C B))
  hyp1
  A B C eqqeqq2
  ax-mp
)

## <title> Substitution </title>
## <table>
##   (<-> ph (-. (z.=  [ A ]   ]   ]  C)))
##   (z.=              [ A ]   [ B ] )
##   (<-> ph (-. (z.=  [   [   [ B ]  C)))
## </table>
thm (ZeqReplaceBi1Not0Zeq0 () (
     replacee (<-> ph (-. (z.= A C)))
     substitution (z.= A B)) 
     (<-> ph (-. (z.= B C)))
  replacee substitution
  C z.eqeq1i
  BiReplaceBi1Not0
)

## <title> Definition of Fraction </title>
## <summary>
##   A fraction is just an ordered pair of integers. This definition signals to the
##   typesetter that the number should be displayed as a fraction and not an ordered pair.
## </summary>
## <title> Definition of Fraction </title>
defthm (df-fraction nat (</> A B) () () (z.= (</> A B) (z.<,> A B))
  (z.<,> A B) z.eqid
)

## <title> Grab the top of a fraction </title>
## <suggest> right('Simplify', 'Top') </suggest>
thm (topfrac () () (z.= (top (</> a b)) a)
  (</> a b) df-top
  a b df-fraction
  z.headeqi
  z.EqReplaceEq1  
  ## <d 'Apply Head Operator '>
    a b z.headop
    z.EqReplaceEq1 
  ## </d 'Apply Head Operator '>
)

## <title> Grab the bottom of a fraction </title>
## <suggest> right('Simplify', 'Bt') </suggest>
thm (bottomfrac () () (z.= (bottom (</> a b)) b)
  (</> a b) df-bottom
  a b df-fraction
  z.taileqi
  z.EqReplaceEq1 
  ## <d 'Apply Tail Operator '>
    a b z.tailop
    z.EqReplaceEq1 
  ## </d 'Apply Tail Operator '>
)

## <title> Substitution </title>
## <table>
##   (<-> ph (z.= A  [ B ]   ]   ] ))
##   (z.=            [ B ]   [ C ] )
##   (<-> ph (z.= A  [   [   [ C ] ))
## </table>
thm (ZeqReplaceBi1Zeq1 () (
     replacee (<-> ph (z.= A B))
     substitution (z.= B C)) 
     (<-> ph (z.= A C))
  replacee substitution
  A z.eqeq2i
  bitri
)

## <title> Substitution </title>
## <table>
##   (<-> ph (z.=  [ A ]   ]   ]  C))
##   (z.=          [ A ]   [ B ] )
##   (<-> ph (z.=  [   [   [ B ]  C))
## </table>
thm (ZeqReplaceBi1Zeq0 () (
     replacee (<-> ph (z.= A C))
     substitution (z.= A B)) 
     (<-> ph (z.= B C))
  replacee substitution
  C z.eqeq1i
  bitri
)

## <title> Substitution </title>
## <table>
##   (<-> ph (z.= (z.* A  [ B ]   ]   ] ) D))
##   (z.=                [ B ]   [ C ] )
##   (<-> ph (z.= (z.* A  [   [   [ C ] ) D))
## </table>
thm (ZeqReplaceBi1Zeq0Mul1 () (
     replacee (<-> ph (z.= (z.* A B) D))
     substitution (z.= B C)) 
     (<-> ph (z.= (z.* A C) D))
  replacee substitution
  A z.muleq2i
  ZeqReplaceBi1Zeq0
)

## <title> Substitution </title>
## <table>
##   (z.= A (z.<,>  [ B ]   ]   ]  D))
##   (z.=           [ B ]   [ C ] )
##   (z.= A (z.<,>  [   [   [ C ]  D))
## </table>
thm (ZeqReplaceEq1Op0 () (
     replacee (z.= A (z.<,> B D))
     substitution (z.= B C)) 
     (z.= A (z.<,> C D))
  replacee substitution
  D z.opeq1i
  z.EqReplaceEq1 
)

## <title> Substitution </title>
## <table>
##   (<-> ph (/\ (z.= A  [ B ]   ]   ] ) ps))
##   (z.=                [ B ]   [ C ] )
##   (<-> ph (/\ (z.= A  [   [   [ C ] ) ps))
## </table>
thm (ZeqReplaceBi1An0Zeq1 () (
     replacee (<-> ph (/\ (z.= A B) ps))
     substitution (z.= B C)) 
     (<-> ph (/\ (z.= A C) ps))
  replacee substitution
  A z.eqeq2i
  BiReplaceBi1An0
)

## <title> Substitution </title>
## <table>
##   (<-> ph (/\ (z.= A (z.* B  [ C ]   ]   ] )) ps))
##   (z.=                      [ C ]   [ D ] )
##   (<-> ph (/\ (z.= A (z.* B  [   [   [ D ] )) ps))
## </table>
thm (ZeqReplaceBi1An0Zeq1Mul1 () (
     replacee (<-> ph (/\ (z.= A (z.* B C)) ps))
     substitution (z.= C D)) 
     (<-> ph (/\ (z.= A (z.* B D)) ps))
  replacee substitution
  B z.muleq2i
  ZeqReplaceBi1An0Zeq1
)

## <title> Substitution </title>
## <table>
##   (<-> ph (/\ ps (<->  [ ch ]   ]    ]  ta)))
##   (<->                 [ ch ]   [ th ] )
##   (<-> ph (/\ ps (<->  [    [   [ th ]  ta)))
## </table>
thm (BiReplaceBi1An1Bi0 () (
     replacee (<-> ph (/\ ps (<-> ch ta)))
     substitution (<-> ch th)) 
     (<-> ph (/\ ps (<-> th ta)))
  replacee substitution
  ta bibi1i
  BiReplaceBi1An1
)


## <title> Substitution </title>
## <table>
##   (<-> ph (/\ ps (<-> (z.=  [ A ]   ]   ]  C) ch)))
##   (z.=                      [ A ]   [ B ] )
##   (<-> ph (/\ ps (<-> (z.=  [   [   [ B ]  C) ch)))
## </table>
thm (ZeqReplaceBi1An1Bi0Zeq0 () (
     replacee (<-> ph (/\ ps (<-> (z.= A C) ch)))
     substitution (z.= A B)) 
     (<-> ph (/\ ps (<-> (z.= B C) ch)))
  replacee substitution
  C z.eqeq1i
  BiReplaceBi1An1Bi0
)

## <title> Substitution </title>
## <table>
##   (<-> ph (/\ (z.= (z.*  [ A ]   ]   ]  C) D) ps))
##   (z.=                  [ A ]   [ B ] )
##   (<-> ph (/\ (z.= (z.*  [   [   [ B ]  C) D) ps))
## </table>
thm (ZeqReplaceBi1An0Zeq0Mul0 () (
     replacee (<-> ph (/\ (z.= (z.* A C) D) ps))
     substitution (z.= A B)) 
     (<-> ph (/\ (z.= (z.* B C) D) ps))
  replacee substitution
  C z.muleq1i
  ZeqReplaceBi1An0Zeq0
)

## <title> Substitution </title>
## <table>
##   (<-> ph (/\ (z.= (z.* A  [ B ]   ]   ] ) D) ps))
##   (z.=                    [ B ]   [ C ] )
##   (<-> ph (/\ (z.= (z.* A  [   [   [ C ] ) D) ps))
## </table>
thm (ZeqReplaceBi1An0Zeq0Mul1 () (
     replacee (<-> ph (/\ (z.= (z.* A B) D) ps))
     substitution (z.= B C)) 
     (<-> ph (/\ (z.= (z.* A C) D) ps))
  replacee substitution
  A z.muleq2i
  ZeqReplaceBi1An0Zeq0
)

## <title> Substitution </title>
## <table>
##   (<-> ph (/\ (z.= A (z.*  [ B ]   ]   ]  D)) ps))
##   (z.=                    [ B ]   [ C ] )
##   (<-> ph (/\ (z.= A (z.*  [   [   [ C ]  D)) ps))
## </table>
thm (ZeqReplaceBi1An0Zeq1Mul0 () (
     replacee (<-> ph (/\ (z.= A (z.* B D)) ps))
     substitution (z.= B C)) 
     (<-> ph (/\ (z.= A (z.* C D)) ps))
  replacee substitution
  D z.muleq1i
  ZeqReplaceBi1An0Zeq1
)

## <title> Substitution </title>
## <table>
##   (<-> ph (/\ ps (-.  [ ch ]   ]    ] )))
##   (<->                [ ch ]   [ th ] )
##   (<-> ph (/\ ps (-.  [    [   [ th ] )))
## </table>
thm (BiReplaceBi1An1Not0 () (
     replacee (<-> ph (/\ ps (-. ch)))
     substitution (<-> ch th)) 
     (<-> ph (/\ ps (-. th)))
  replacee substitution
  con4biir
  BiReplaceBi1An1
)


## <title> Substitution </title>
## <table>
##   (<-> ph (/\ ps (-. (z.=  [ A ]   ]   ]  C))))
##   (z.=                     [ A ]   [ B ] )
##   (<-> ph (/\ ps (-. (z.=  [   [   [ B ]  C))))
## </table>
thm (ZeqReplaceBi1An1Not0Zeq0 () (
     replacee (<-> ph (/\ ps (-. (z.= A C))))
     substitution (z.= A B)) 
     (<-> ph (/\ ps (-. (z.= B C))))
  replacee substitution
  C z.eqeq1i
  BiReplaceBi1An1Not0
)

## <title> Substitution </title>
## <table>
##   (<-> ph (/\ ps (<-> ch  [ th ]   ]    ] )))
##   (<->                    [ th ]   [ ta ] )
##   (<-> ph (/\ ps (<-> ch  [    [   [ ta ] )))
## </table>
thm (BiReplaceBi1An1Bi1 () (
     replacee (<-> ph (/\ ps (<-> ch th)))
     substitution (<-> th ta)) 
     (<-> ph (/\ ps (<-> ch ta)))
  replacee substitution
  ch bibi2i
  BiReplaceBi1An1
)


## <title> Substitution </title>
## <table>
##   (<-> ph (/\ ps (<-> ch (z.=  [ A ]   ]   ]  C))))
##   (z.=                         [ A ]   [ B ] )
##   (<-> ph (/\ ps (<-> ch (z.=  [   [   [ B ]  C))))
## </table>
thm (ZeqReplaceBi1An1Bi1Zeq0 () (
     replacee (<-> ph (/\ ps (<-> ch (z.= A C))))
     substitution (z.= A B)) 
     (<-> ph (/\ ps (<-> ch (z.= B C))))
  replacee substitution
  C z.eqeq1i
  BiReplaceBi1An1Bi1
)

## <title> Fraction Equality Formula </title>
thm (fraceq () () (<-> (= (</> A B) (</> C D)) (/\ (z.= (z.* A D) (z.* C B)) (<-> (z.= B (z.0)) (z.= D (z.0)))))
  (</> A B) (</> C D) df-eq    
  ## <d 'Grab the top of a fraction '>
    A B topfrac
    ZeqReplaceBi1An0Zeq0Mul0
  ## </d 'Grab the top of a fraction '>  
  ## <d 'Grab the bottom of a fraction '>
    C D bottomfrac
    ZeqReplaceBi1An0Zeq0Mul1
  ## </d 'Grab the bottom of a fraction '>  
  ## <d 'Grab the top of a fraction '>
    C D topfrac
    ZeqReplaceBi1An0Zeq1Mul0
  ## </d 'Grab the top of a fraction '>  
  ## <d 'Grab the bottom of a fraction '>
    A B bottomfrac
    ZeqReplaceBi1An0Zeq1Mul1
  ## </d 'Grab the bottom of a fraction '>  
  ## <d 'Grab the bottom of a fraction '>
    A B bottomfrac
    ZeqReplaceBi1An1Bi0Zeq0
  ## </d 'Grab the bottom of a fraction '>
  ## <d 'Grab the bottom of a fraction '>
    C D bottomfrac
    ZeqReplaceBi1An1Bi1Zeq0
  ## </d 'Grab the bottom of a fraction '>
)

thm (fraczeq1 () () (-> (z.= A B) (= (</> A C) (</> B C)))
  A B C z.muleq1
  A C B C fraceq
  (z.= C (z.0)) biid
  (z.= (z.* A C) (z.* B C)) anRemove2
  (= (</> A C) (</> B C)) bibi2i
  mpbi
  bicomi
  sylib
)

thm (fraczeq2 () () (-> (z.= A B) (= (</> C A) (</> C B)))
  A B C z.muleq2
  ## <d 'Symmetric Property '>
    (z.* C A) (z.* C B) z.eqcom
    sylib
  ## </d 'Symmetric Property '>
  A B (z.0) z.eqeq1
  jca

  C A C B fraceq
  bicomi
  sylib
)

thm (fraczeq1i () (
     hyp1 (z.= A B))
     (= (</> A C) (</> B C))
  hyp1
  A B C fraczeq1
  ax-mp
)

thm (fraczeq1d () (
     hyp1 (-> ph (z.= A B)))
     (-> ph (= (</> A C) (</> B C)))
  hyp1
  A B C fraczeq1
  syl
)

thm (fraczeq2i () (
     hyp1 (z.= A B))
     (= (</> C A) (</> C B))
  hyp1
  A B C fraczeq2
  ax-mp
)

thm (fraczeq2d () (
     hyp1 (-> ph (z.= A B)))
     (-> ph (= (</> C A) (</> C B)))
  hyp1
  A B C fraczeq2
  syl
)

## <title> Equivalence for </> </title> ##
thm (fraczeq12 () () (-> (/\ (z.= A B) (z.= C D)) (= (</> A C) (</> B D)))
  A B C fraczeq1
  C D B fraczeq2
  anim12i
  (</> A C) (</> B C) (</> B D) eqtr
syl
)

thm (fracExpandEq () () (z.= A (</> (top A) (bottom A)))
  A z.opexpand
  A df-bottom z.eqcomi
  (z.head A) z.opeq2i
  z.EqReplaceEq1 
  A df-top z.eqcomi
  ZeqReplaceEq1Op0
  (top A) (bottom A) df-fraction z.eqcomi  
  z.EqReplaceEq1 
)

## <suggest> left('Simplify', '/') </suggest>
thm (fracExpand () () (= A (</> (top A) (bottom A)))
  A (</> (top A) (bottom A)) df-eq  
  ## <d 'Grab the top of a fraction '>
    (top A) (bottom A) topfrac
    ZeqReplaceBi1An0Zeq1Mul0
  ## </d 'Grab the top of a fraction '>
  ## <d 'Grab the bottom of a fraction '>
    (top A) (bottom A) bottomfrac
    ZeqReplaceBi1An1Bi1Zeq0
  ## </d 'Grab the bottom of a fraction '>  
  ## <d 'Grab the bottom of a fraction '>
    (top A) (bottom A) bottomfrac
    ZeqReplaceBi1An0Zeq0Mul1
  ## </d 'Grab the bottom of a fraction '>

  (z.* (top A) (bottom A)) z.eqid  
  (<-> (z.= (bottom A) (z.0)) (z.= (bottom A) (z.0))) anRemove1
  (= A (</> (top A) (bottom A))) bibi2i
  mpbi
  (z.= (bottom A) (z.0)) biid  
  mpbirRemove
)

## <title> Substitution </title>
## <table>
##   (<-> ph  [ ps ]   ]    ] )
##   (->      [ ps ]   [ ch ] )
##   (<-> ph  [    [   [ ch ] )
## </table>
thm (ImpReplaceBi1 () (
     replacee (<-> ph ps)
     substitution (-> ps ch)) 
     (-> ph ch)
  replacee substitution
  ph biim2i
  ax-mp
)

## <title> Substitution </title>
## <table>
##   (<-> ph (E. x  [ ps ]   ]    ] ))
##   (->            [ ps ]   [ ch ] )
##   (<-> ph (E. x  [    [   [ ch ] ))
## </table>
thm (ImpReplaceBi1Ex1 () (
     replacee (<-> ph (E. x ps))
     substitution (-> ps ch)) 
     (-> ph (E. x ch))
  replacee substitution
  x 19.22i
  ImpReplaceBi1
)

## <title> Convert from Natural to Rational Equality </title>
thm (eqeqq () () (-> (z.= A B) (= A B))
  A B topeq
  A B bottomeq  
  ## <d 'Symmetric Property '>
    (bottom A) (bottom B) z.eqcom
    sylib
  ## </d 'Symmetric Property '>
  jca
  (top A) (top B) (bottom B) (bottom A) z.muleq12   
  syl

  A B bottomeq
  (z.0) z.eqeq1d
  jca  
  ## <d 'Definition of Rational Equality '>
    A B df-eq bicomi
    sylib
  ## </d 'Definition of Rational Equality '>
)

## <title> Convert Natural to Rational Equality </title>
thm (eqeqqi () (hyp (z.= A B)) (= A B)
  hyp
  A B eqeqq
  ax-mp
)

## <title> Convert Natural to Rational Equality </title>
thm (eqeqqd () (hyp (-> ph (z.= A B))) (-> ph (= A B))
  hyp
  A B eqeqq
  syl
)


## <title> One-Digit Inequality </title>
thm (tyex ((A z)) () (E. z (= z A))
  x (top A) z.tyex
  y (bottom A) z.tyex
  pm3.2i  
  ## <d 'Combine Existence Quantifiers '>
    x (z.= x (top A)) y (z.= y (bottom A)) z.doubleex
    ax-mp
  ## </d 'Combine Existence Quantifiers '>
  x (top A) y (bottom A) fraczeq12
  y z.19.22i
  x z.19.22i  
  ax-mp

  z (</> x y) eqeqq
  z (</> x y) (</> (top A) (bottom A)) eqqeqq1  
  syl
  z.ceqsex bicomi
  z (/\ (z.= z (</> x y)) (= z (</> (top A) (bottom A)))) zexex
  bitri  
  ## <d 'Remove Left Side of AND '>
    (z.= z (</> x y)) (= z (</> (top A) (bottom A))) pm3.27
    ImpReplaceBi1Ex1
  ## </d 'Remove Left Side of AND '>
  y z.19.22i
  x z.19.22i
  ax-mp  
  ## <d 'Quantified Non-free Variable '>
    x (z.E. y (E. z (= z (</> (top A) (bottom A))))) z.19.9
    mpbi
  ## </d 'Quantified Non-free Variable '>  
  ## <d 'Quantified Non-free Variable '>
    y (E. z (= z (</> (top A) (bottom A)))) z.19.9
    mpbi
  ## </d 'Quantified Non-free Variable '>
  A fracExpand A (</> (top A) (bottom A)) eqcom mpbi  
  z eqqeqq2i
  exbiii
)

export (EQUALITY_MIN ../../../predicate/equality_min.ghi (PROP PREDICATE_MIN PREDICATE) "")
import (EQUALITY ../../../predicate/equality.ghi (PROP PREDICATE_MIN PREDICATE EQUALITY_MIN) "")
export (PREDICATE_ALL ../../../predicate/all.ghi (PROP) "")
