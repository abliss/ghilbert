import (PROP ../../prop.ghi () "")
import (Q_PREDICATE ../../predicate/all.ghi (PROP) "q.")
import (Q_DIVISION_NAN NaN_construction/division_NaN.ghi (PROP Q_PREDICATE) "q.")


kindbind (q.nat nat)

tvar (wff ph ps ch th ta)
tvar (nat A B C D A' B' C' D')
var (nat v w x y z)

## <context>
##   This theorem is part of a series of proofs related to the
##   <a href="/wiki/peano/arithmetic/rationals">construction of the rationals</a>. This is the second part
##   in that process. The first part constructed the rationals from an ordered pair of integers.
##   However, it allows for the existence of NaN (not-a-number) which breaks several of the basic rules.
##   Now a new version of addition, multiplication, and equality are introduced which merges the number 0
##   and the symbol NaN together, but the merging is done so that this number retains all the properties
##   of 0 and none of the properties of NaN.
## </context>

# Briefly Add Back Predicate Calculus

## <summary>
##   To be able to bind q.nat and nat we cannot import predicate because that would reintroduce nat.
##   So we have to prove everything in predicate_min from q. Here we redefine q.A. as A.
## </summary>
defthm (df-al wff (A. x ph) () ()  (<-> (A. x ph) (q.A. x ph)) 
  (q.A. x ph) biid)

## <summary> Reproved for integers directly from the natural number versioq. </title>
thm (alnfi ((ph x)) () (-> ph (A. x ph))
  ph x q.alnfi
  x ph df-al bicomi  
  sylib
)

## <title> Generalization Axiom </title>
## <table>
##       [ ph ]
## (A. x [ ph ] )
## </table>
## <summary> Reproved for integers directly from the natural number versioq. </title>
thm (gen () (hyp ph) (A. x ph)
  hyp
  x q.gen
  x ph df-al bicomi  
  mpbi
)

# roughly Margaris A5, but without the subst
## <title> Axiom 4: Specialization </title>
## <suggest> right('Remove', 'âˆ€') </suggest>
thm (ax-4 () () (-> (A. x ph) ph)
  x ph q.ax-4
  x ph df-al bicomi    
  sylbi2
)

## <title> Substitution </title>
## <table>
##   (-> ph (->  [ ps ]   ]    ]  th))
##   (<->        [ ps ]   [ ch ] )
##   (-> ph (->  [    [   [ ch ]  th))
## </table>
thm (BiReplaceImp1Imp0 () (
     replacee (-> ph (-> ps th))
     substitution (<-> ps ch)) 
     (-> ph (-> ch th))
  replacee substitution
  th imbi1i
  sylib
)

## <title> Substitution </title>
## <table>
##   (-> ph (-> ps  [ ch ]   ]    ] ))
##   (<->           [ ch ]   [ th ] )
##   (-> ph (-> ps  [    [   [ th ] ))
## </table>
thm (BiReplaceImp1Imp1 () (
     replacee (-> ph (-> ps ch))
     substitution (<-> ch th)) 
     (-> ph (-> ps th))
  replacee substitution
  ps imbi2i
  sylib
)

## <title> Axiom 5: Quantified Implication </title>
thm (ax-alim () () (-> (A. x (-> ph ps)) (-> (A. x ph) (A. x ps)))
  x ph ps q.ax-alim
  ## <d>
  x (-> ph ps) df-al bicomi 
  sylbi2
  ## </d>
  ## <d>
  x ph df-al bicomi  
  BiReplaceImp1Imp0
  ## </d>
  ## <d>
  x ps df-al bicomi    
  BiReplaceImp1Imp1
  ## </d>
)

## <title> Substitution </title>
## <table>
##   (-> (-.  [ ph ]   ]    ] ) ch)
##   (<->     [ ph ]   [ ps ] )
##   (-> (-.  [    [   [ ps ] ) ch)
## </table>
thm (BiReplaceImp0Not0 () (
     replacee (-> (-. ph) ch)
     substitution (<-> ph ps)) 
     (-> (-. ps) ch)
  replacee substitution
  con4biir
  sylbi2
)

## <title> Axiom 6: Quantified Negation </title>
thm (ax-6 () () (-> (-. (A. x ph)) (A. x (-. (A. x ph))))
  x ph q.ax-6
  x ph df-al bicomi    
  BiReplaceImp0Not0
  x ph df-al bicomi
  
  ## <d 'Negate Both Sides '>
    (q.A. x ph) (A. x ph) notbi
    mpbi
  ## </d 'Negate Both Sides '>
  x q.albii  
  sylib
  x (-. (A. x ph)) df-al bicomi
  sylib
)

## <title> Axiom 7: Quantifier Commutation </title>
thm (ax-7 () () (-> (A. x (A. y ph)) (A. y (A. x ph)))
  x y ph q.ax-7
  ## <d>
  x ph df-al bicomi
  y q.albii
  y (A. x ph) df-al bicomi
  bitri  
  sylib
  ## </d>
  ## <d>
  y ph df-al bicomi
  x q.albii
  x (A. y ph) df-al bicomi  
  bitri
  sylbi2
  ## </d>
)

export (PREDICATE_MIN ../../predicate/predicate_min.ghi (PROP) "")
import (PREDICATE ../../predicate/predicate.ghi (PROP PREDICATE_MIN) "")



## <title> Substitution </title>
## <table>
##   (<-> ph (-.  [ ps ]   ]    ] ))
##   (<->         [ ps ]   [ ch ] )
##   (<-> ph (-.  [    [   [ ch ] ))
## </table>
thm (BiReplaceBi1Not0 () (
     replacee (<-> ph (-. ps))
     substitution (<-> ps ch)) 
     (<-> ph (-. ch))
  replacee substitution
  con4biir
  bitri
)

## <title> Natural and Integer Existence are the same </title>
thm (qexex () () (<-> (q.E. x ph) (E. x ph))
  x ph q.df-ex
  x (-. ph) df-al bicomi    
  BiReplaceBi1Not0
  x ph df-ex bicomi  
  bitri
)

## <title> Definition of Remove NaN </title>
## <summary>
##   This maps NaN to 0 and leaves everything else unchanged.
## </summary>
## <suggest> left('Simplify', '/') right('Define', '/') </suggest>
defthm (df-r nat (r A) () () (q.= (r A) (q.ifn (q.= A (q.NaN)) (q.0) A))
  (q.ifn (q.= A (q.NaN)) (q.0) A) q.eqid
)

thm (req () () (-> (q.= A B) (q.= (r A) (r B)))
  A B (q.NaN) q.eqeq1
  ancri
  (q.= A (q.NaN)) (q.= B (q.NaN)) A B (q.0) q.ifneq13
  A df-r q.eqcomi
  (q.ifn (q.= B (q.NaN)) (q.0) B)  q.eqeq1i  
  sylib
  B df-r q.eqcomi
  (r A)  q.eqeq2i  
  sylib  
  syl
)

thm (reqi () (
     hyp1 (q.= A B))
     (q.= (r A) (r B))
  hyp1
  A B req
  ax-mp
)

thm (reqd () (
     hyp1 (-> ph (q.= A B)))
     (-> ph (q.= (r A) (r B)))
  hyp1
  A B req
  syl
)

thm (rNaN0 () () (-> (q.= A (q.NaN)) (q.= (r A) (q.0)))
  (q.= A (q.NaN)) (q.0) A q.ifn1
  A df-r q.eqcomi (q.0) q.eqeq1i  
  sylib
)


## <title> Substitution </title>
## <table>
##   (-> ph (-.  [ ps ]   ]    ] ))
##   (<->        [ ps ]   [ ch ] )
##   (-> ph (-.  [    [   [ ch ] ))
## </table>
thm (BiReplaceImp1Not0 () (
     replacee (-> ph (-. ps))
     substitution (<-> ps ch)) 
     (-> ph (-. ch))
  replacee substitution
  con4biir
  sylib
)

thm (rNotNaN2 () () (-> (-. (q.= A (q.NaN))) (q.= (r A) A))
  (q.= A (q.NaN)) (q.0) A q.ifn2
  A df-r q.eqcomi
  A q.eqeq1i
  sylib
)

thm (rNotNaN () () (-. (q.= (r A) (q.NaN)))
  A rNaN0
  (q.NaN) q.eqeq2d
  q.0NaN  
  ## <d 'Symmetric Property '>
    (q.0) (q.NaN) q.eqcom
    mtbi
  ## </d 'Symmetric Property '>
  ## <d>  
    (q.= (q.NaN) (r A)) biNotRemove2
    (q.= A (q.NaN)) imbi2i
    mpbi  
  ## </d>
  ## <d 'Symmetric Property '>
    (q.NaN) (r A) q.eqcom
    BiReplaceImp1Not0
  ## </d 'Symmetric Property '>
  A rNotNaN2
  (q.NaN) q.eqeq1d
  ## <d 'Negate Both Sides '>
    (q.= (r A) (q.NaN)) (q.= A (q.NaN)) notbi
    sylib
  ## </d 'Negate Both Sides '>  
  ## <d 'Commutative Biconditional '>
    (-. (q.= (r A) (q.NaN))) (-. (q.= A (q.NaN))) bicom
    sylib
  ## </d 'Commutative Biconditional '>
  ancli  
  ## <d>
    (-. (q.= A (q.NaN))) (-. (q.= (r A) (q.NaN))) pm5.36
    sylib
  ## </d>  
  ## <d 'Remove Right Side of AND '>
    (-. (q.= (r A) (q.NaN))) (<-> (-. (q.= A (q.NaN))) (-. (q.= (r A) (q.NaN)))) pm3.26
    syl
  ## </d 'Remove Right Side of AND '>
  jaoi  
  ## <d 'Excluded Middle'>
    (q.= A (q.NaN)) exmid    
    ax-mpRemove
  ## </d 'Excluded Middle'>
)

thm (r0q () () (q.= (r (q.0)) (q.0))
  q.0NaN
  (q.0) rNotNaN2  
  ax-mp
)

thm (r1q () () (q.= (r (q.1)) (q.1))
  q.1NaN
  (q.1) rNotNaN2  
  ax-mp
)

defthm (df-eq wff (= A B) () () (<-> (= A B) (q.= (r A) (r B)))
  (q.= (r A) (r B)) biid
)

## <title> Reflexive Property </title>
thm (eqid () () (= A A)
  A A df-eq
  (r A) q.eqid  
  mpbirRemove
)

## <title> Symmetric Property </title>
thm (eqcom () () (<-> (= A B) (= B A))
  A B df-eq
  ## <d 'Symmetric Property '>
    (r A) (r B) q.eqcom
    bitri
  ## </d 'Symmetric Property '>
  ## <d>
    B A df-eq bicomi  
    bitri
  ## </d>
)

## <title> Substitution </title>
## <table>
##   (-> (/\  [ ph ]   ]    ]  ch) th)
##   (<->     [ ph ]   [ ps ] )
##   (-> (/\  [    [   [ ps ]  ch) th)
## </table>
thm (BiReplaceImp0An0 () (
     replacee (-> (/\ ph ch) th)
     substitution (<-> ph ps)) 
     (-> (/\ ps ch) th)
  replacee substitution
  ch anbi1i
  sylbi2
)

## <title> Substitution </title>
## <table>
##   (-> (/\ ph  [ ps ]   ]    ] ) th)
##   (<->        [ ps ]   [ ch ] )
##   (-> (/\ ph  [    [   [ ch ] ) th)
## </table>
thm (BiReplaceImp0An1 () (
     replacee (-> (/\ ph ps) th)
     substitution (<-> ps ch)) 
     (-> (/\ ph ch) th)
  replacee substitution
  ph anbi2i
  sylbi2
)

thm (eqtr () () (-> (/\ (= A B) (= B C)) (= A C))
  (r A) (r B) (r C) q.eqtr
  ## <d>
    A B df-eq bicomi  
    BiReplaceImp0An0
  ## </d>
  ## <d>
    B C df-eq bicomi    
    BiReplaceImp0An1
  ## </d>
  ## <d>
    A C df-eq bicomi   
    sylib
  ## </d>
)

thm (tyex ((A x)) () (E. x (= x A))
  x A q.tyex
  x A req
  x q.19.22i
  ax-mp
  x A df-eq bicomi
  x q.exbii  
  mpbi
  x (= x A) qexex  
  mpbi
)

export (EQUALITY_MIN ../../predicate/equality_min.ghi (PROP PREDICATE_MIN PREDICATE) "")
import (EQUALITY ../../predicate/equality.ghi (PROP PREDICATE_MIN PREDICATE EQUALITY_MIN) "")
export (PREDICATE_ALL ../../predicate/all.ghi (PROP) "")

thm (eqeqq () () (-> (q.= A B) (= A B))
  A B req
  A B df-eq bicomi  
  sylib
)

## <title> Convert Natural to Rational Equality </title>
thm (eqeqqi () (hyp (q.= A B)) (= A B)
  hyp
  A B eqeqq
  ax-mp
)

## <title> Convert Natural to Rational Equality </title>
thm (eqeqqd () (hyp (-> ph (q.= A B))) (-> ph (= A B))
  hyp
  A B eqeqq
  syl
)

thm (doubleR () () (q.= (r (r A)) (r A))
  (r A) df-r
  A rNotNaN
  (q.= (r A) (q.NaN)) (q.0) (r A) q.ifn2  
  ax-mp
  (r (r A)) q.eqeq2i  
  mpbi
)