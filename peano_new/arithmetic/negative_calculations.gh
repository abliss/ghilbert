import (PROP ../prop.ghi () "")
import (PREDICATE_EQ ../predicate/predicate_equals.ghi (PROP) "")
import (NATURALS naturals.ghi (PROP PREDICATE_EQ) "")
import (NEGATIVE negative.ghi (PROP PREDICATE_EQ NATURALS) "")
import (CALCULATIONS natural_calculations.ghi (PROP PREDICATE_EQ NATURALS) "")

tvar (wff ph ps ch th ta)
tvar (nat A B C D A' B' C' D' A0 A1 A2 A3)
var (nat v w x y z v' w' x' y' z')



## <title> Substitution </title>
## <table>
##   (= A (-n  [ B ]   ]   ] ))
##   (=        [ B ]   [ C ] )
##   (= A (-n  [   [   [ C ] ))
## </table>
thm (EqReplaceEq1Neg0 () (
     replacee (= A (-n B))
     substitution (= B C)) 
     (= A (-n C))
  replacee substitution
  negeqi
  EqReplaceEq1
)

thm (negmulExample () () (= (* (-n (3)) (4)) (-n (+ (10) (2))))   
  ## <d 'Evaluate'>
    (3) (4) negmul
    ## <d 'Positive Multiplication'>
      3times4
      EqReplaceEq1Neg0
    ## </d 'Positive Multiplication'>
  ## </d 'Evaluate'>
)

## <title> Substitution </title>
## <table>
##   (= A (+ B  [ C ]   ]   ] ))
##   (=         [ C ]   [ D ] )
##   (= A (+ B  [   [   [ D ] ))
## </table>
thm (EqReplaceEq1Add1 () (
     replacee (= A (+ B C))
     substitution (= C D)) 
     (= A (+ B D))
  replacee substitution
  B addeq2i
  EqReplaceEq1
)

## <title> Substitution </title>
## <table>
##   (= A (+  [ B ]   ]   ]  D))
##   (=       [ B ]   [ C ] )
##   (= A (+  [   [   [ C ]  D))
## </table>
thm (EqReplaceEq1Add0 () (
     replacee (= A (+ B D))
     substitution (= B C)) 
     (= A (+ C D))
  replacee substitution
  D addeq1i
  EqReplaceEq1
)

## <title> Substitution </title>
## <table>
##   (= A (+ (*  [ B ]   ]   ]  D) A'))
##   (=          [ B ]   [ C ] )
##   (= A (+ (*  [   [   [ C ]  D) A'))
## </table>
thm (EqReplaceEq1Add0Mul0 () (
     replacee (= A (+ (* B D) A'))
     substitution (= B C)) 
     (= A (+ (* C D) A'))
  replacee substitution
  D muleq1i
  EqReplaceEq1Add0
)

## <title> Substitution </title>
## <table>
##   (= A (+ (+ B  [ C ]   ]   ] ) A'))
##   (=            [ C ]   [ D ] )
##   (= A (+ (+ B  [   [   [ D ] ) A'))
## </table>
thm (EqReplaceEq1Add0Add1 () (
     replacee (= A (+ (+ B C) A'))
     substitution (= C D)) 
     (= A (+ (+ B D) A'))
  replacee substitution
  B addeq2i
  EqReplaceEq1Add0
)

## <title> Substitution </title>
## <table>
##   (= A (+ (+ B (*  [ C ]   ]   ]  A')) B'))
##   (=               [ C ]   [ D ] )
##   (= A (+ (+ B (*  [   [   [ D ]  A')) B'))
## </table>
thm (EqReplaceEq1Add0Add1Mul0 () (
     replacee (= A (+ (+ B (* C A')) B'))
     substitution (= C D)) 
     (= A (+ (+ B (* D A')) B'))
  replacee substitution
  A' muleq1i
  EqReplaceEq1Add0Add1
)

## <title> Substitution </title>
## <table>
##   (= A (+ (+  [ B ]   ]   ]  D) A'))
##   (=          [ B ]   [ C ] )
##   (= A (+ (+  [   [   [ C ]  D) A'))
## </table>
thm (EqReplaceEq1Add0Add0 () (
     replacee (= A (+ (+ B D) A'))
     substitution (= B C)) 
     (= A (+ (+ C D) A'))
  replacee substitution
  D addeq1i
  EqReplaceEq1Add0
)


## <title> Substitution </title>
## <table>
##   (= A (+ (+ (*  [ B ]   ]   ]  D) A') B'))
##   (=             [ B ]   [ C ] )
##   (= A (+ (+ (*  [   [   [ C ]  D) A') B'))
## </table>
thm (EqReplaceEq1Add0Add0Mul0 () (
     replacee (= A (+ (+ (* B D) A') B'))
     substitution (= B C)) 
     (= A (+ (+ (* C D) A') B'))
  replacee substitution
  D muleq1i
  EqReplaceEq1Add0Add0
)

thm (negmulExample2 () () (= (* (-n (+ (10) (3))) (-n (+ (10) (7)))) (+ (* (2) (* (10) (10))) (+ (* (2) (10)) (1)))) 
      
  ## <d 'Evaluate'>
    ## <d 'Negative Multiplication'>
      (+ (10) (3)) (+ (10) (7)) doublenegmul
      ## <d 'Positive Multiplication'>
        ## <d 'Multiplication'>
          ## <d 'Distribute Digits'>
            ## <d 'Distributive Property'>
              (+ (10) (3)) (10) (7) distr
            ## </d 'Distributive Property'>
          ## </d 'Distribute Digits'>
          ## <d 'Multiply Each Digit'>
            ## <d 'Multiply Two Individual Digits'>
              ## <d 'Multiply Base'>
                ## <d 'One-Digit times Multiple-Digits'>
                  ## <d 'Rearrange Digits'>
                    ## <d 'Distributive Property'>
                      (10) (3) (7) distl
                    ## </d 'Distributive Property'>
                  ## </d 'Rearrange Digits'>
                  ## <d 'Multiply Two Digits'>
                    ## <d 'Evaluate'>
                      3times7
                    ## </d 'Evaluate'>
                    EqReplaceEq1Add1
                  ## </d 'Multiply Two Digits'>
                  ## <d 'Multiply Two Digits'>
                    ## <d 'Evaluate'>
                      ## <d 'Commutative Property'>
                        (10) (7) mulcom
                      ## </d 'Commutative Property'>
                    ## </d 'Evaluate'>
                    EqReplaceEq1Add0
                  ## </d 'Multiply Two Digits'>
                  ## <d 'Evaluate'>
                    ## <d 'Addition'>
                      ## <d 'Group Common Digits'>
                        ## <d 'Rearrange Terms'>
                          ## <d 'Associate All Left'>
                            ## <d 'Associative Property'>
                              (* (7) (10)) (* (2) (10)) (1) addass
                              ## <d 'Commutative Property'>
                                (+ (+ (* (7) (10)) (* (2) (10))) (1)) (+ (* (7) (10)) (+ (* (2) (10)) (1))) eqcom
                                mpbi
                              ## </d 'Commutative Property'>
                            ## </d 'Associative Property'>
                          ## </d 'Associate All Left'>
                        ## </d 'Rearrange Terms'>
                        ## <d 'Distributive Property'>
                          (7) (2) (10) distl
                          ## <d 'Commutative Property'>
                            (* (+ (7) (2)) (10)) (+ (* (7) (10)) (* (2) (10))) eqcom
                            mpbi
                          ## </d 'Commutative Property'>
                          EqReplaceEq1Add0
                        ## </d 'Distributive Property'>
                      ## </d 'Group Common Digits'>
                      ## <d 'Single-digit Addition'>
                        7plus2
                        EqReplaceEq1Add0Mul0
                      ## </d 'Single-digit Addition'>
                    ## </d 'Addition'>
                    EqReplaceEq1
                  ## </d 'Evaluate'>
                ## </d 'One-Digit times Multiple-Digits'>
              ## </d 'Multiply Base'>
              (* (+ (10) (3)) (10)) addeq2i
            ## </d 'Multiply Two Individual Digits'>
            ## <d 'Multiply Two Individual Digits'>
              ## <d 'Multiply Base'>
                ## <d 'Distributive Property'>
                  (10) (3) (10) distl
                ## </d 'Distributive Property'>
              ## </d 'Multiply Base'>
              EqReplaceEq1Add0
            ## </d 'Multiply Two Individual Digits'>
            EqReplaceEq1
          ## </d 'Multiply Each Digit'>
          ## <d 'Sum the Total'>
            ## <d 'Addition'>
              ## <d 'Group Common Digits'>
                ## <d 'Rearrange Terms'>
                  ## <d 'Associate All Left'>
                    ## <d 'Associative Property'>
                      (+ (* (10) (10)) (* (3) (10))) (* (9) (10)) (1) addass
                      ## <d 'Commutative Property'>
                        (+ (+ (+ (* (10) (10)) (* (3) (10))) (* (9) (10))) (1)) (+ (+ (* (10) (10)) (* (3) (10))) (+ (* (9) (10)) (1))) eqcom
                        mpbi
                      ## </d 'Commutative Property'>
                    ## </d 'Associative Property'>
                  ## </d 'Associate All Left'>
                  ## <d 'Change Associations'>
                    ## <d 'Associative Property'>
                      (* (10) (10)) (* (3) (10)) (* (9) (10)) addass
                      (1) addeq1i
                    ## </d 'Associative Property'>
                    EqReplaceEq1
                  ## </d 'Change Associations'>
                ## </d 'Rearrange Terms'>
                ## <d 'Multiply By One'>
                  ## <d 'Multiply By One'>
                    ## <d 'Multiply By One'>
                      ## <d 'Evaluate'>
                        ## <d 'Evaluate'>
                          (* (10) (10)) mulidr
                        ## </d 'Evaluate'>
                        ## <d 'Commutative Property'>
                          (* (1) (* (10) (10))) (* (10) (10)) eqcom
                          mpbi
                        ## </d 'Commutative Property'>
                      ## </d 'Evaluate'>
                      (+ (* (3) (10)) (* (9) (10))) addeq1i
                    ## </d 'Multiply By One'>
                    (1) addeq1i
                  ## </d 'Multiply By One'>
                  EqReplaceEq1
                ## </d 'Multiply By One'>
                ## <d 'Distributive Property'>
                  (3) (9) (10) distl
                  ## <d 'Commutative Property'>
                    (* (+ (3) (9)) (10)) (+ (* (3) (10)) (* (9) (10))) eqcom
                    mpbi
                  ## </d 'Commutative Property'>
                  EqReplaceEq1Add0Add1
                ## </d 'Distributive Property'>
              ## </d 'Group Common Digits'>
              ## <d 'Single-digit Addition'>
                3plus9
                EqReplaceEq1Add0Add1Mul0
              ## </d 'Single-digit Addition'>
              ## <d 'Carry the One'>
                ## <d 'Distributive Property'>
                  (10) (2) (10) distl
                  (* (1) (* (10) (10))) addeq2i
                ## </d 'Distributive Property'>
                ## <d 'Associative Property'>
                  (* (1) (* (10) (10))) (* (10) (10)) (* (2) (10)) addass
                  ## <d 'Commutative Property'>
                    (+ (+ (* (1) (* (10) (10))) (* (10) (10))) (* (2) (10))) (+ (* (1) (* (10) (10))) (+ (* (10) (10)) (* (2) (10)))) eqcom
                    mpbi
                  ## </d 'Commutative Property'>
                  EqReplaceEq1
                ## </d 'Associative Property'>
                ## <d 'Multiply By One'>
                  ## <d 'Evaluate'>
                    ## <d 'Evaluate'>
                      (* (10) (10)) mulidr
                    ## </d 'Evaluate'>
                    ## <d 'Commutative Property'>
                      (* (1) (* (10) (10))) (* (10) (10)) eqcom
                      mpbi
                    ## </d 'Commutative Property'>
                  ## </d 'Evaluate'>
                  EqReplaceEq1Add0Add1
                ## </d 'Multiply By One'>
                ## <d 'Distributive Property'>
                  (1) (1) (* (10) (10)) distl
                  ## <d 'Commutative Property'>
                    (* (+ (1) (1)) (* (10) (10))) (+ (* (1) (* (10) (10))) (* (1) (* (10) (10)))) eqcom
                    mpbi
                  ## </d 'Commutative Property'>
                  EqReplaceEq1Add0
                ## </d 'Distributive Property'>
                EqReplaceEq1Add0
              ## </d 'Carry the One'>
              ## <d 'Single-digit Addition'>
                1plus1
                EqReplaceEq1Add0Add0Mul0
              ## </d 'Single-digit Addition'>
              ## <d 'Simplify'>
                ## <d 'Associative Property'>
                  (* (2) (* (10) (10))) (* (2) (10)) (1) addass
                ## </d 'Associative Property'>
                EqReplaceEq1
              ## </d 'Simplify'>
            ## </d 'Addition'>
            EqReplaceEq1
          ## </d 'Sum the Total'>
        ## </d 'Multiplication'>
        EqReplaceEq1
      ## </d 'Positive Multiplication'>
    ## </d 'Negative Multiplication'>
  ## </d 'Evaluate'>
)

## <summary> This is used just for convenience to get an empty theorem. </summary>
thm (emptyThm () () (T)
 tru
)
