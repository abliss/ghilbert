# This file is the second step in constructing the rationals. division_NaN file produces many of the
# most basic properties of rational arithmetic. However, it allows for the existence of NaN (not-a-number)
# which breaks several of the basic rules. This file construct a new version of addition, multiplication,
# and equality which merges the number 0 and the symbol NaN together, but the merging is done so that this
# number retains all the properties of 0 and none of the properties of NaN.

import (PROP ../prop.ghi () "")
import (Q_PREDICATE_EQ ../predicate/predicate_equals.ghi (PROP) "q.")
import (Q_DIVISION_NAN division_NaN.ghi (PROP Q_PREDICATE_EQ) "q.")


kindbind (q.nat nat)
#kindbind (q.set set)

tvar (wff ph ps ch th ta)
tvar (nat A B C D A' B' C' D')
#tvar (set S T U V)
var (nat v w x y z)


# Briefly Add Back Predicate Calculus

## <summary>
##   To be able to bind q.nat and nat we cannot import predicate because that would reintroduce nat.
##   So we have to prove everything in predicate_min from q. Here we redefine q.A. as A.
## </summary>
defthm (df-al wff (A. x ph) () ()  (<-> (A. x ph) (q.A. x ph)) 
  (q.A. x ph) biid)

## <summary> Reproved for integers directly from the natural number versioq. </title>
thm (alnfi ((ph x)) () (-> ph (A. x ph))
  ph x q.alnfi
  x ph df-al bicomi  
  sylib
)

## <title> Generalization Axiom </title>
## <table>
##       [ ph ]
## (A. x [ ph ] )
## </table>
## <summary> Reproved for integers directly from the natural number versioq. </title>
thm (gen () (hyp ph) (A. x ph)
  hyp
  x q.gen
  x ph df-al bicomi  
  mpbi
)

# roughly Margaris A5, but without the subst
## <title> Axiom 4: Specialization </title>
## <suggest> right('Remove', 'âˆ€') </suggest>
thm (ax-4 () () (-> (A. x ph) ph)
  x ph q.ax-4
  x ph df-al bicomi    
  sylbi2
)

## <title> Substitution </title>
## <table>
##   (-> ph (->  [ ps ]   ]    ]  th))
##   (<->        [ ps ]   [ ch ] )
##   (-> ph (->  [    [   [ ch ]  th))
## </table>
thm (BiReplaceImp1Imp0 () (
     replacee (-> ph (-> ps th))
     substitution (<-> ps ch)) 
     (-> ph (-> ch th))
  replacee substitution
  th imbi1i
  sylib
)

## <title> Substitution </title>
## <table>
##   (-> ph (-> ps  [ ch ]   ]    ] ))
##   (<->           [ ch ]   [ th ] )
##   (-> ph (-> ps  [    [   [ th ] ))
## </table>
thm (BiReplaceImp1Imp1 () (
     replacee (-> ph (-> ps ch))
     substitution (<-> ch th)) 
     (-> ph (-> ps th))
  replacee substitution
  ps imbi2i
  sylib
)

## <title> Axiom 5: Quantified Implication </title>
thm (ax-alim () () (-> (A. x (-> ph ps)) (-> (A. x ph) (A. x ps)))
  x ph ps q.ax-alim
  ## <d>
  x (-> ph ps) df-al bicomi 
  sylbi2
  ## </d>
  ## <d>
  x ph df-al bicomi  
  BiReplaceImp1Imp0
  ## </d>
  ## <d>
  x ps df-al bicomi    
  BiReplaceImp1Imp1
  ## </d>
)

## <title> Substitution </title>
## <table>
##   (-> (-.  [ ph ]   ]    ] ) ch)
##   (<->     [ ph ]   [ ps ] )
##   (-> (-.  [    [   [ ps ] ) ch)
## </table>
thm (BiReplaceImp0Not0 () (
     replacee (-> (-. ph) ch)
     substitution (<-> ph ps)) 
     (-> (-. ps) ch)
  replacee substitution
  con4biir
  sylbi2
)

## <title> Axiom 6: Quantified Negation </title>
thm (ax-6 () () (-> (-. (A. x ph)) (A. x (-. (A. x ph))))
  x ph q.ax-6
  x ph df-al bicomi    
  BiReplaceImp0Not0
  x ph df-al bicomi
  
  ## <d 'Negate Both Sides '>
    (q.A. x ph) (A. x ph) notbi
    mpbi
  ## </d 'Negate Both Sides '>
  x q.albii  
  sylib
  x (-. (A. x ph)) df-al bicomi
  sylib
)

## <title> Axiom 7: Quantifier Commutation </title>
thm (ax-7 () () (-> (A. x (A. y ph)) (A. y (A. x ph)))
  x y ph q.ax-7
  ## <d>
  x ph df-al bicomi
  y q.albii
  y (A. x ph) df-al bicomi
  bitri  
  sylib
  ## </d>
  ## <d>
  y ph df-al bicomi
  x q.albii
  x (A. y ph) df-al bicomi  
  bitri
  sylbi2
  ## </d>
)

export (PREDICATE_MIN ../predicate/predicate_min.ghi (PROP) "")
import (PREDICATE ../predicate/predicate.ghi (PROP PREDICATE_MIN) "")



## <title> Substitution </title>
## <table>
##   (<-> ph (-.  [ ps ]   ]    ] ))
##   (<->         [ ps ]   [ ch ] )
##   (<-> ph (-.  [    [   [ ch ] ))
## </table>
thm (BiReplaceBi1Not0 () (
     replacee (<-> ph (-. ps))
     substitution (<-> ps ch)) 
     (<-> ph (-. ch))
  replacee substitution
  con4biir
  bitri
)

## <title> Natural and Integer Existence are the same </title>
thm (qexex () () (<-> (q.E. x ph) (E. x ph))
  x ph q.df-ex
  x (-. ph) df-al bicomi    
  BiReplaceBi1Not0
  x ph df-ex bicomi  
  bitri
)

## <title> Definition of Remove NaN </title>
## <summary>
##   This maps NaN to 0 and leaves everything else unchanged.
## </summary>
## <suggest> left('Simplify', '/') right('Define', '/') </suggest>
defthm (df-r nat (r A) () () (q.= (r A) (q.ifn (q.= A (q.NaN)) (q.0) A))
  (q.ifn (q.= A (q.NaN)) (q.0) A) q.eqid
)

thm (req () () (-> (q.= A B) (q.= (r A) (r B)))
  A B (q.NaN) q.eqeq1
  ancri
  (q.= A (q.NaN)) (q.= B (q.NaN)) A B (q.0) q.ifneq13
  A df-r q.eqcomi
  (q.ifn (q.= B (q.NaN)) (q.0) B)  q.eqeq1i  
  sylib
  B df-r q.eqcomi
  (r A)  q.eqeq2i  
  sylib  
  syl
)

thm (reqi () (
     hyp1 (q.= A B))
     (q.= (r A) (r B))
  hyp1
  A B req
  ax-mp
)

thm (reqd () (
     hyp1 (-> ph (q.= A B)))
     (-> ph (q.= (r A) (r B)))
  hyp1
  A B req
  syl
)

thm (rNaN0 () () (-> (q.= A (q.NaN)) (q.= (r A) (q.0)))
  (q.= A (q.NaN)) (q.0) A q.ifn1
  A df-r q.eqcomi (q.0) q.eqeq1i  
  sylib
)


## <title> Substitution </title>
## <table>
##   (-> ph (-.  [ ps ]   ]    ] ))
##   (<->        [ ps ]   [ ch ] )
##   (-> ph (-.  [    [   [ ch ] ))
## </table>
thm (BiReplaceImp1Not0 () (
     replacee (-> ph (-. ps))
     substitution (<-> ps ch)) 
     (-> ph (-. ch))
  replacee substitution
  con4biir
  sylib
)

thm (rNotNaN2 () () (-> (-. (q.= A (q.NaN))) (q.= (r A) A))
  (q.= A (q.NaN)) (q.0) A q.ifn2
  A df-r q.eqcomi
  A q.eqeq1i
  sylib
)

thm (rNotNaN () () (-. (q.= (r A) (q.NaN)))
  A rNaN0
  (q.NaN) q.eqeq2d
  q.0NaN  
  ## <d 'Symmetric Property '>
    (q.0) (q.NaN) q.eqcom
    mtbi
  ## </d 'Symmetric Property '>
  ## <d>  
    (q.= (q.NaN) (r A)) biNotRemove2
    (q.= A (q.NaN)) imbi2i
    mpbi  
  ## </d>
  ## <d 'Symmetric Property '>
    (q.NaN) (r A) q.eqcom
    BiReplaceImp1Not0
  ## </d 'Symmetric Property '>
  A rNotNaN2
  (q.NaN) q.eqeq1d
  ## <d 'Negate Both Sides '>
    (q.= (r A) (q.NaN)) (q.= A (q.NaN)) notbi
    sylib
  ## </d 'Negate Both Sides '>  
  ## <d 'Commutative Biconditional '>
    (-. (q.= (r A) (q.NaN))) (-. (q.= A (q.NaN))) bicom
    sylib
  ## </d 'Commutative Biconditional '>
  ancli  
  ## <d>
    (-. (q.= A (q.NaN))) (-. (q.= (r A) (q.NaN))) pm5.36
    sylib
  ## </d>  
  ## <d 'Remove Right Side of AND '>
    (-. (q.= (r A) (q.NaN))) (<-> (-. (q.= A (q.NaN))) (-. (q.= (r A) (q.NaN)))) pm3.26
    syl
  ## </d 'Remove Right Side of AND '>
  jaoi  
  ## <d 'Excluded Middle'>
    (q.= A (q.NaN)) exmid    
    ax-mpRemove
  ## </d 'Excluded Middle'>
)

thm (r0q () () (q.= (r (q.0)) (q.0))
  q.0NaN
  (q.0) rNotNaN2  
  ax-mp
)

thm (r1q () () (q.= (r (q.1)) (q.1))
  q.1NaN
  (q.1) rNotNaN2  
  ax-mp
)

defthm (df-eq wff (= A B) () () (<-> (= A B) (q.= (r A) (r B)))
  (q.= (r A) (r B)) biid
)

## <title> Reflexive Property </title>
thm (eqid () () (= A A)
  A A df-eq
  (r A) q.eqid  
  mpbirRemove
)

## <title> Symmetric Property </title>
thm (eqcom () () (<-> (= A B) (= B A))
  A B df-eq
  ## <d 'Symmetric Property '>
    (r A) (r B) q.eqcom
    bitri
  ## </d 'Symmetric Property '>
  ## <d>
    B A df-eq bicomi  
    bitri
  ## </d>
)

## <title> Substitution </title>
## <table>
##   (-> (/\  [ ph ]   ]    ]  ch) th)
##   (<->     [ ph ]   [ ps ] )
##   (-> (/\  [    [   [ ps ]  ch) th)
## </table>
thm (BiReplaceImp0An0 () (
     replacee (-> (/\ ph ch) th)
     substitution (<-> ph ps)) 
     (-> (/\ ps ch) th)
  replacee substitution
  ch anbi1i
  sylbi2
)

## <title> Substitution </title>
## <table>
##   (-> (/\ ph  [ ps ]   ]    ] ) th)
##   (<->        [ ps ]   [ ch ] )
##   (-> (/\ ph  [    [   [ ch ] ) th)
## </table>
thm (BiReplaceImp0An1 () (
     replacee (-> (/\ ph ps) th)
     substitution (<-> ps ch)) 
     (-> (/\ ph ch) th)
  replacee substitution
  ph anbi2i
  sylbi2
)

thm (eqtr () () (-> (/\ (= A B) (= B C)) (= A C))
  (r A) (r B) (r C) q.eqtr
  ## <d>
    A B df-eq bicomi  
    BiReplaceImp0An0
  ## </d>
  ## <d>
    B C df-eq bicomi    
    BiReplaceImp0An1
  ## </d>
  ## <d>
    A C df-eq bicomi   
    sylib
  ## </d>
)

thm (tyex ((A x)) () (E. x (= x A))
  x A q.tyex
  x A req
  x q.19.22i
  ax-mp
  x A df-eq bicomi
  x q.exbii  
  mpbi
  x (= x A) qexex  
  mpbi
)

export (EQUALITY_MIN ../predicate/equality_min.ghi (PROP PREDICATE_MIN PREDICATE) "")
import (EQUALITY ../predicate/equality.ghi (PROP PREDICATE_MIN PREDICATE EQUALITY_MIN) "")
export (PREDICATE_EQ ../predicate/predicate_equals.ghi (PROP) "")

thm (eqeqq () () (-> (q.= A B) (= A B))
  A B req
  A B df-eq bicomi  
  sylib
)

## <title> Convert Natural to Rational Equality </title>
thm (eqeqqi () (hyp (q.= A B)) (= A B)
  hyp
  A B eqeqq
  ax-mp
)

## <title> Convert Natural to Rational Equality </title>
thm (eqeqqd () (hyp (-> ph (q.= A B))) (-> ph (= A B))
  hyp
  A B eqeqq
  syl
)

thm (doubleR () () (q.= (r (r A)) (r A))
  (r A) df-r
  A rNotNaN
  (q.= (r A) (q.NaN)) (q.0) (r A) q.ifn2  
  ax-mp
  (r (r A)) q.eqeq2i  
  mpbi
)

## <title> Definition of Rational Addition </title>
## <suggest> left('Simplify', '+') right('Define', '+') </suggest>
defthm (df-add nat (+ A B) () () (q.= (+ A B) (q.+ (r A) (r B)))
  (q.+ (r A) (r B)) q.eqid
)

## <title> Substitution </title>
## <table>
##   (-> ph (=  [ A ]   ]   ]  C))
##   (=         [ A ]   [ B ] )
##   (-> ph (=  [   [   [ B ]  C))
## </table>
thm (EqReplaceImp1Eq0 () (
     replacee (-> ph (= A C))
     substitution (= A B)) 
     (-> ph (= B C))
  replacee substitution
  C eqeq1i
  sylib
)

## <title> Substitution </title>
## <table>
##   (-> ph (= A  [ B ]   ]   ] ))
##   (=           [ B ]   [ C ] )
##   (-> ph (= A  [   [   [ C ] ))
## </table>
thm (EqReplaceImp1Eq1 () (
     replacee (-> ph (= A B))
     substitution (= B C)) 
     (-> ph (= A C))
  replacee substitution
  A eqeq2i
  sylib
)

thm (addeq1 () () (-> (= A B) (= (+ A C) (+ B C)))
  (r A) (r B) (r C) q.addeq1 eqeqqd
  A B df-eq bicomi
  sylbi2
  A C df-add q.eqcomi eqeqqi
  EqReplaceImp1Eq0
  B C df-add q.eqcomi eqeqqi
  EqReplaceImp1Eq1
)


thm (addeq2 () () (-> (= A B) (= (+ C A) (+ C B)))
  (r A) (r B) (r C) q.addeq2 eqeqqd
  A B df-eq bicomi  
  sylbi2
  C A df-add q.eqcomi eqeqqi  
  EqReplaceImp1Eq0
  C B df-add q.eqcomi eqeqqi
  EqReplaceImp1Eq1
)

thm (addeq1i () (
     hyp1 (= A B))
     (= (+ A C) (+ B C))
  hyp1
  A B C addeq1
  ax-mp
)

thm (addeq1d () (
     hyp1 (-> ph (= A B)))
     (-> ph (= (+ A C) (+ B C)))
  hyp1
  A B C addeq1
  syl
)

thm (addeq2i () (
     hyp1 (= A B))
     (= (+ C A) (+ C B))
  hyp1
  A B C addeq2
  ax-mp
)

## <title> Equivalence for +q </title> ##
thm (addeq12 () () (-> (/\ (= A B) (= C D)) (= (+ A C) (+ B D)))
  A B C addeq1
  C D B addeq2
  anim12i
  ## <d 'Transitive Property'>
    (+ A C) (+ B C) (+ B D) eqtr
    syl
  ## </d 'Transitive Property'>
)

## <table>
##   (=     A ] ]   ]       [ B ] ] )
##   (=       [ [ C ]       [   [ [ D)
##   (= (+ A ] [ C ] ) (+ [ B ] [ D))
## </table>
thm (addeq12i ()
    (hyp1 (= A B)
     hyp2 (= C D))
    (= (+ A C) (+ B D))
  hyp1 hyp2 A B C D addeq12 mp2an
)

thm (addeq2d () (
     hyp1 (-> ph (= A B)))
     (-> ph (= (+ C A) (+ C B)))
  hyp1
  A B C addeq2
  syl
)

thm (addeq12d () (
     hyp1 (-> ph (= A B))
     hyp2 (-> ph (= C D)))
     (-> ph (= (+ A C) (+ B D)))
  hyp1
  hyp2
  jca
  A B C D addeq12
  syl
)

## <title> Substitution </title>
## <table>
##   (=  [ A ]   ]   ]  C)
##   (=  [ A ]   [ B ] )
##   (=  [   [   [ B ]  C)
## </table>
thm (EqReplaceEq0 () (
     replacee (= A C)
     substitution (= A B)) 
     (= B C)
  replacee substitution
  C eqeq1i
  mpbi
)

## <title> Substitution </title>
## <table>
##   (= A  [ B ]   ]   ] )
##   (=    [ B ]   [ C ] )
##   (= A  [   [   [ C ] )
## </table>
thm (EqReplaceEq1 () (
     replacee (= A B)
     substitution (= B C)) 
     (= A C)
  replacee substitution
  A eqeq2i
  mpbi
)

thm (addRationals () () (-> (/\ (-. (q.= A (q.NaN))) (-. (q.= B (q.NaN)))) (q.= (q.+ (r A) (r B)) (q.+ A B)))
  A rNotNaN2
  B rNotNaN2
  anim12i  
  ## <d 'Addition of Equal Numbers Axiom '>
    (r A) A (r B) B q.addeq12
    syl
  ## </d 'Addition of Equal Numbers Axiom '>
)

## <title> Substitution </title>
## <table>
##   (-. (q.=  [ A ]   ]   ]  C))
##   (q.=      [ A ]   [ B ] )
##   (-. (q.=  [   [   [ B ]  C))
## </table>
thm (QeqReplaceNot0Qeq0 () (
     replacee (-. (q.= A C))
     substitution (q.= A B)) 
     (-. (q.= B C))
  replacee substitution
  C q.eqeq1i
  mtbi
)

thm (addNotNaN () () (-. (q.= (+ A B) (q.NaN)))
  (r A) (r B) q.addClosure
  ## <d>
  A rNotNaN  
  (-. (q.= (r B) (q.NaN))) anRemove1
  (-. (q.= (q.+ (r A) (r B)) (q.NaN))) bibi2i
  mpbi
  ## </d>
  ## <d>
  B rNotNaN    
  mpbirRemove
  ## </d>
  A B df-add q.eqcomi  
  QeqReplaceNot0Qeq0
)

thm (rAdd () () (q.= (r (+ A B)) (+ A B))
  A B addNotNaN
  (+ A B) rNotNaN2  
  ax-mp
)

thm (rAdd2 () () (q.= (r (+ B C)) (q.+ (r B) (r C)))
  B C rAdd
  B C df-add
  (r (+ B C)) q.eqeq2i  
  mpbi
)

thm (addcom () () (= (+ A B) (+ B A))
  (r A) (r B) q.addcom eqeqqi
  ## <d>
    A B df-add q.eqcomi eqeqqi
    EqReplaceEq0
  ## </d>
  ## <d>
    B A df-add q.eqcomi eqeqqi
    EqReplaceEq1
  ## </d>
)

thm (addass () () (= (+ (+ A B) C) (+ A (+ B C)))
  (r A) (r B) (r C) q.addass
  ## <d>
    A B rAdd2 q.eqcomi  
    (r C) q.addeq1i
    (q.+ (r A) (q.+ (r B) (r C))) q.eqeq1i
    mpbi
  ## </d>
  ## <d>
    (+ A B) C df-add q.eqcomi  
    (q.+ (r A) (q.+ (r B) (r C))) q.eqeq1i
    mpbi
  ## </d>
  ## <d>
    B C rAdd2 q.eqcomi  
    (r A) q.addeq2i
    (+ (+ A B) C) q.eqeq2i
    mpbi
  ## </d>
  ## <d>
    A (+ B C) df-add q.eqcomi    
    (+ (+ A B) C) q.eqeq2i
    mpbi
  ## </d>
	eqeqqi
)

## <title> Definition of 0 </title>
defthm (df-0 nat (0) () () (q.= (0) (q.0))
  (q.0) q.eqid
)

thm (r0 () () (q.= (r (0)) (0))
  r0q
  df-0 q.eqcomi
  (q.0) (0) req
  ax-mp  
  (q.0) q.eqeq1i
  mpbi
  df-0 q.eqcomi  
  (r (0)) q.eqeq2i
  mpbi
)

thm (addid () () (= (+ A (0)) A)
  (r A) q.addid
  ## <d>
  df-0 q.eqcomi  
  (r A) q.addeq2i
  (r A) q.eqeq1i
  mpbi
  ## </d>
  ## <d>
    r0 q.eqcomi  
    (r A) q.addeq2i
    (r A) q.eqeq1i
    mpbi
  ## </d>
  ## <d>
    A (0) rAdd2 q.eqcomi  
    (r A) q.eqeq1i
    mpbi
  ## </d>
  ## <d>
    (+ A (0)) A df-eq bicomi  
    mpbi
  ## </d>
)

## <title> Definition of 1 </title>
defthm (df-1 nat (1) () () (q.= (1) (q.1))
  (q.1) q.eqid
)

thm (r1 () () (q.= (r (1)) (1))
  r1q
  df-1 q.eqcomi
  (q.1) (1) req
  ax-mp  
  (q.1) q.eqeq1i
  mpbi
  df-1 q.eqcomi  
  (r (1)) q.eqeq2i
  mpbi
)

## <title> Definition of Rational Multiplication </title>
defthm (df-mul nat (* A B) () () (q.= (* A B) (q.* (r A) (r B)))
  (q.* (r A) (r B)) q.eqid
)

thm (muleq1 () () (-> (= A B) (= (* A C) (* B C)))
  (r A) (r B) (r C) q.muleq1 eqeqqd
  A B df-eq bicomi
  sylbi2
  A C df-mul q.eqcomi eqeqqi
  EqReplaceImp1Eq0
  B C df-mul q.eqcomi eqeqqi
  EqReplaceImp1Eq1
)

thm (muleq2 () () (-> (= A B) (= (* C A) (* C B)))
  (r A) (r B) (r C) q.muleq2 eqeqqd
  A B df-eq bicomi  
  sylbi2
  C A df-mul q.eqcomi eqeqqi  
  EqReplaceImp1Eq0
  C B df-mul q.eqcomi eqeqqi
  EqReplaceImp1Eq1
)

thm (muleq1i () (
     hyp1 (= A B))
     (= (* A C) (* B C))
  hyp1
  A B C muleq1
  ax-mp
)

thm (muleq1d () (
     hyp1 (-> ph (= A B)))
     (-> ph (= (* A C) (* B C)))
  hyp1
  A B C muleq1
  syl
)

thm (muleq2i () (
     hyp1 (= A B))
     (= (* C A) (* C B))
  hyp1
  A B C muleq2
  ax-mp
)

thm (muleq2d () (
     hyp1 (-> ph (= A B)))
     (-> ph (= (* C A) (* C B)))
  hyp1
  A B C muleq2
  syl
)

## <title> Equivalence for *q </title> ##
thm (muleq12 () () (-> (/\ (= A B) (= C D)) (= (* A C) (* B D)))
  A B C muleq1
  C D B muleq2
  anim12i
  ## <d 'Transitive Property'>
    (* A C) (* B C) (* B D) eqtr
    syl
  ## </d 'Transitive Property'>
)

thm (muleq12d () (
     hyp1 (-> ph (= A B))
     hyp2 (-> ph (= C D)))
     (-> ph (= (* A C) (* B D)))
  hyp1
  hyp2
  jca
  A B C D muleq12
  syl
)

thm (mulNotNaN () () (-. (q.= (* A B) (q.NaN)))
  (r A) (r B) q.mulClosure
  ## <d>
  A rNotNaN
  (-. (q.= (r B) (q.NaN))) anRemove1
  (-. (q.= (q.* (r A) (r B)) (q.NaN))) bibi2i
  mpbi
  ## </d>
  ## <d>
  B rNotNaN    
  mpbirRemove
  ## </d>
  A B df-mul q.eqcomi  
  QeqReplaceNot0Qeq0
)

thm (rMul () () (q.= (r (* A B)) (* A B))
  A B mulNotNaN
  (* A B) rNotNaN2  
  ax-mp
)

thm (rMul2 () () (q.= (r (* B C)) (q.* (r B) (r C)))
  B C rMul
  B C df-mul
  (r (* B C)) q.eqeq2i  
  mpbi
)

thm (mulcom () () (= (* A B) (* B A))
  (r A) (r B) q.mulcom eqeqqi
  ## <d>
    A B df-mul q.eqcomi eqeqqi
    EqReplaceEq0
  ## </d>
  ## <d>
    B A df-mul q.eqcomi eqeqqi
    EqReplaceEq1
  ## </d>
)

thm (mulass () () (= (* (* A B) C) (* A (* B C)))
  (r A) (r B) (r C) q.mulass
  ## <d>
    A B rMul2 q.eqcomi  
    (r C) q.muleq1i
    (q.* (r A) (q.* (r B) (r C))) q.eqeq1i
    mpbi
  ## </d>
  ## <d>
    (* A B) C df-mul q.eqcomi  
    (q.* (r A) (q.* (r B) (r C))) q.eqeq1i
    mpbi
  ## </d>
  ## <d>
    B C rMul2 q.eqcomi  
    (r A) q.muleq2i
    (* (* A B) C) q.eqeq2i
    mpbi
  ## </d>
  ## <d>
    A (* B C) df-mul q.eqcomi    
    (* (* A B) C) q.eqeq2i
    mpbi
  ## </d>
	eqeqqi
)

thm (mulid () () (= (* A (1)) A)
  (r A) q.mulid
  ## <d>
    df-1 q.eqcomi  
    (r A) q.muleq2i
    (r A) q.eqeq1i
    mpbi
  ## </d>
  ## <d>
    r1 q.eqcomi  
    (r A) q.muleq2i
    (r A) q.eqeq1i
    mpbi
  ## </d>
  ## <d>
    A (1) rMul2 q.eqcomi  
    (r A) q.eqeq1i
    mpbi
  ## </d>
  ## <d>
    (* A (1)) A df-eq bicomi  
    mpbi
  ## </d>
)

thm (distr () () (= (* A (+ B C)) (+ (* A B) (* A C)))
  (r A) (r B) (r C) q.distr

  ## <d>
  B C rAdd2 q.eqcomi    
  (r A) q.muleq2i
  (q.+ (q.* (r A) (r B)) (q.* (r A) (r C))) q.eqeq1i
  mpbi
  ## </d>

  ## <d>
  A (+ B C) rMul2 q.eqcomi    
  (q.+ (q.* (r A) (r B)) (q.* (r A) (r C))) q.eqeq1i
  mpbi
  ## </d>

  ## <d>
  A B rMul2 q.eqcomi      
  (q.* (r A) (r C)) q.addeq1i
  (r (* A (+ B C))) q.eqeq2i
  mpbi
  ## </d>

  ## <d>
  A C rMul2 q.eqcomi  
  (r (* A B)) q.addeq2i
  (r (* A (+ B C))) q.eqeq2i
  mpbi
  ## </d>

  ## <d>
  (* A B) (* A C) rAdd2 q.eqcomi    
  (r (* A (+ B C))) q.eqeq2i
  mpbi
  ## </d>

  ## <d> 
  (* A (+ B C)) (+ (* A B) (* A C))   df-eq  bicomi  
  mpbi
  ## </d>
)

## <title> Def. Less Than or Equal </title>
defthm (df-le wff (<= A B) () () (<-> (<= A B) (q.<= (r A) (r B)))
  (q.<= (r A) (r B)) biid
)

## <title> Substitution </title>
## <table>
##   (-> ph (<->  [ ps ]   ]    ]  th))
##   (<->         [ ps ]   [ ch ] )
##   (-> ph (<->  [    [   [ ch ]  th))
## </table>
thm (BiReplaceImp1Bi0 () (
     replacee (-> ph (<-> ps th))
     substitution (<-> ps ch)) 
     (-> ph (<-> ch th))
  replacee substitution
  th bibi1i
  sylib
)

## <title> Substitution </title>
## <table>
##   (-> ph (<-> ps  [ ch ]   ]    ] ))
##   (<->            [ ch ]   [ th ] )
##   (-> ph (<-> ps  [    [   [ th ] ))
## </table>
thm (BiReplaceImp1Bi1 () (
     replacee (-> ph (<-> ps ch))
     substitution (<-> ch th)) 
     (-> ph (<-> ps th))
  replacee substitution
  ps bibi2i
  sylib
)

thm (leeq1 () () (-> (= A B) (<-> (<= A C) (<= B C)))
  (r A) (r B) (r C) q.leeq1
  ## <d>
    A B df-eq bicomi  
    sylbi2
  ## </d>
  ## <d>
    A C df-le bicomi    
    BiReplaceImp1Bi0
  ## </d>
  ## <d>
    B C df-le bicomi
    BiReplaceImp1Bi1
  ## </d>
)

thm (leeq2 () () (-> (= A B) (<-> (<= C A) (<= C B)))
  (r A) (r B) (r C) q.leeq2
  ## <d>
    A B df-eq bicomi  
    sylbi2
  ## </d>
  ## <d>
    C A df-le bicomi    
    BiReplaceImp1Bi0
  ## </d>
  ## <d>
    C B df-le bicomi
    BiReplaceImp1Bi1
  ## </d>
)

thm (leeq1i () (
     hyp1 (= A C))
     (<-> (<= A B) (<= C B))
  hyp1
  A C B leeq1
  ax-mp
)


thm (leeq1d () (
     hyp1 (-> ph (= A C)))
     (-> ph (<-> (<= A B) (<= C B)))
  hyp1
  A C B leeq1
  syl
)

thm (leeq2i () (
     hyp1 (= B C))
     (<-> (<= A B) (<= A C))
  hyp1
  B C A leeq2
  ax-mp
)

## <title> Equivalence for <=q </title> ##
thm (leeq12 () () (-> (/\ (= A B) (= C D)) (<-> (<= A C) (<= B D)))
  A B C leeq1
  C D B leeq2
  anim12i
  ## <d 'Transitive Property'>
    (<= A C) (<= B C) (<= B D) bitr
    syl
  ## </d 'Transitive Property'>
)

thm (leeq2d () (
     hyp1 (-> ph (= B C)))
     (-> ph (<-> (<= A B) (<= A C)))
  hyp1
  B C A leeq2
  syl
)

thm (leeq12d () (
     hyp1 (-> ph (= A B))
     hyp2 (-> ph (= C D)))
     (-> ph (<-> (<= A C) (<= B D)))
  hyp1
  hyp2
  jca
  A B C D leeq12
  syl
)

thm (leid () () (<= A A)
  (r A) q.leid
  A A df-le bicomi  
  mpbi
)

## <title> Substitution </title>
## <table>
##   (-. (q.= A  [ B ]   ]   ] ))
##   (q.=        [ B ]   [ C ] )
##   (-. (q.= A  [   [   [ C ] ))
## </table>
thm (QeqReplaceNot0Qeq1 () (
     replacee (-. (q.= A B))
     substitution (q.= B C)) 
     (-. (q.= A C))
  replacee substitution
  A q.eqeq2i
  mtbi
)

thm (0ne1 () () (-. (= (0) (1)))
  ## <d>
    ## <d>
      q.0ne1
      r0q q.eqcomi  
      QeqReplaceNot0Qeq0
    ## </d>
    ## <d>
      r1q q.eqcomi  
      QeqReplaceNot0Qeq1
    ## </d>
    ## <d>
      df-0 q.eqcomi
      reqi  
      QeqReplaceNot0Qeq0
    ## </d>
    ## <d>
      df-1 q.eqcomi
      reqi    
      QeqReplaceNot0Qeq1
    ## </d>
  ## </d>
  ## <d>
    (0) (1) df-eq bicomi  
    mtbi
  ## </d>
)

## <title> Substitution </title>
## <table>
##   (q.<=  [ A ]   ]   ]  C)
##   (q.=   [ A ]   [ B ] )
##   (q.<=  [   [   [ B ]  C)
## </table>
thm (QeqReplaceQle0 () (
     replacee (q.<= A C)
     substitution (q.= A B)) 
     (q.<= B C)
  replacee substitution
  C q.leeq1i
  mpbi
)

## <title> Substitution </title>
## <table>
##   (q.<= A  [ B ]   ]   ] )
##   (q.=     [ B ]   [ C ] )
##   (q.<= A  [   [   [ C ] )
## </table>
thm (QeqReplaceQle1 () (
     replacee (q.<= A B)
     substitution (q.= B C)) 
     (q.<= A C)
  replacee substitution
  A q.leeq2i
  mpbi
)

thm (0le1 () () (<= (0) (1))
  q.0le1
  ## <d>
    ## <d>
      r0q q.eqcomi  
      QeqReplaceQle0
    ## </d>
    ## <d>
      r1q q.eqcomi    
      QeqReplaceQle1
    ## <d>
    ## <d>
      df-0 q.eqcomi
      reqi  
      QeqReplaceQle0
    ## </d>
    ## <d>
      df-1 q.eqcomi
      reqi    
      QeqReplaceQle1
    ## </d>
  ## </d>
  (0) (1) df-le bicomi  
  mpbi
)



## <title> Substitution </title>
## <table>
##   (<-> (q.=  [ A ]   ]   ]  C) ph)
##   (q.=       [ A ]   [ B ] )
##   (<-> (q.=  [   [   [ B ]  C) ph)
## </table>
thm (QeqReplaceBi0Qeq0 () (
     replacee (<-> (q.= A C) ph)
     substitution (q.= A B)) 
     (<-> (q.= B C) ph)
  replacee substitution
  C q.eqeq1i
  bitr3icom
)

## <title> Substitution </title>
## <table>
##   (<-> (q.= A  [ B ]   ]   ] ) ph)
##   (q.=         [ B ]   [ C ] )
##   (<-> (q.= A  [   [   [ C ] ) ph)
## </table>
thm (QeqReplaceBi0Qeq1 () (
     replacee (<-> (q.= A B) ph)
     substitution (q.= B C)) 
     (<-> (q.= A C) ph)
  replacee substitution
  A q.eqeq2i
  bitr3icom
)

thm (addcan () () (<-> (= (+ B A) (+ C A)) (= B C))
  (r A) (r B) (r C) q.addcanNaN
  ## <d>
    A rNotNaN  
    ax-mpRemove
  ## </d>
  ## <d>
    B C df-eq bicomi  
    bitri
  ## </d>
  ## <d>
    B A rAdd2 q.eqcomi  
    QeqReplaceBi0Qeq0
  ## </d>
  ## <d>
    C A rAdd2 q.eqcomi  
    QeqReplaceBi0Qeq1
  ## </d>
  ## <d>
    (+ B A) (+ C A) df-eq bicomi  
    bitr3icom
  ## </d>
)



## <title> Substitution </title>
## <table>
##   (-> ph (<-> (q.=  [ A ]   ]   ]  C) ps))
##   (q.=              [ A ]   [ B ] )
##   (-> ph (<-> (q.=  [   [   [ B ]  C) ps))
## </table>
thm (QeqReplaceImp1Bi0Qeq0 () (
     replacee (-> ph (<-> (q.= A C) ps))
     substitution (q.= A B)) 
     (-> ph (<-> (q.= B C) ps))
  replacee substitution
  C q.eqeq1i
  BiReplaceImp1Bi0
)

## <title> Substitution </title>
## <table>
##   (-> ph (<-> (q.= A  [ B ]   ]   ] ) ps))
##   (q.=                [ B ]   [ C ] )
##   (-> ph (<-> (q.= A  [   [   [ C ] ) ps))
## </table>
thm (QeqReplaceImp1Bi0Qeq1 () (
     replacee (-> ph (<-> (q.= A B) ps))
     substitution (q.= B C)) 
     (-> ph (<-> (q.= A C) ps))
  replacee substitution
  A q.eqeq2i
  BiReplaceImp1Bi0
)

## <title> Substitution </title>
## <table>
##   (-> (/\ (-.  [ ph ]   ]    ] ) ch) th)
##   (<->         [ ph ]   [ ps ] )
##   (-> (/\ (-.  [    [   [ ps ] ) ch) th)
## </table>
thm (BiReplaceImp0An0Not0 () (
     replacee (-> (/\ (-. ph) ch) th)
     substitution (<-> ph ps)) 
     (-> (/\ (-. ps) ch) th)
  replacee substitution
  con4biir
  BiReplaceImp0An0
)


## <title> Substitution </title>
## <table>
##   (-> (/\ (-. (q.= A  [ B ]   ]   ] )) ph) ps)
##   (q.=                [ B ]   [ C ] )
##   (-> (/\ (-. (q.= A  [   [   [ C ] )) ph) ps)
## </table>
thm (QeqReplaceImp0An0Not0Qeq1 () (
     replacee (-> (/\ (-. (q.= A B)) ph) ps)
     substitution (q.= B C)) 
     (-> (/\ (-. (q.= A C)) ph) ps)
  replacee substitution
  A q.eqeq2i
  BiReplaceImp0An0Not0
)

## <title> Substitution </title>
## <table>
##   (q.=  [ A ]   ]   ]  C)
##   (q.=  [ A ]   [ B ] )
##   (q.=  [   [   [ B ]  C)
## </table>
thm (QeqReplaceQeq0 () (
     replacee (q.= A C)
     substitution (q.= A B)) 
     (q.= B C)
  replacee substitution
  C q.eqeq1i
  mpbi
)

## <title> Substitution </title>
## <table>
##   (<-> ph (q.= A  [ B ]   ]   ] ))
##   (q.=            [ B ]   [ C ] )
##   (<-> ph (q.= A  [   [   [ C ] ))
## </table>
thm (QeqReplaceBi1Qeq1 () (
     replacee (<-> ph (q.= A B))
     substitution (q.= B C)) 
     (<-> ph (q.= A C))
  replacee substitution
  A q.eqeq2i
  bitri
)


thm (mulcan() () (-> (-. (= C (0))) (<-> (= (* A C) (* B C)) (= A B)))
  (r C) (r A) (r B) q.mulcan
  ## <d>
  ## <d>
  A B df-eq bicomi  
  BiReplaceImp1Bi1
  ## </d>
  ## <d>
  A C rMul2 q.eqcomi  
  QeqReplaceImp1Bi0Qeq0
  ## </d>
  ## <d>
  B C rMul2 q.eqcomi  
  QeqReplaceImp1Bi0Qeq1
  ## </d>
  ## <d>
  (* A C) (* B C) df-eq bicomi  
  BiReplaceImp1Bi0
  ## </d>
  ## </d>
  ## <d>
  ## <d>
  r0q q.eqcomi  
  QeqReplaceImp0An0Not0Qeq1
  df-0 q.eqcomi reqi 
  QeqReplaceImp0An0Not0Qeq1
  ## </d>
  ## <d>
  C (0) df-eq bicomi  
  BiReplaceImp0An0Not0
  ## </d>
  ## <d>
  C rNotNaN  
  (-. (= C (0))) anRemove2
  (<-> (= (* A C) (* B C)) (= A B)) imbi1i
  mpbi
  ## </d>
  ## </d>
)

## <title> Definition of Rational Negative </title>
## <suggest> left('Simplify', '-') right('Define', '-') </suggest>
defthm (df-neg nat (-n A) () () (q.= (-n A) (q.-n (r A)))
  (q.-n (r A)) q.eqid
)

thm (negeq () () (-> (= A B) (= (-n A) (-n B)))
  (r A) (r B) q.negeq eqeqqd

  ## <d>
  A B df-eq bicomi
  sylbi2

  ## </d>
  ## <d>
  A df-neg q.eqcomi eqeqqi  
  EqReplaceImp1Eq0

  ## </d>
  ## <d>
  B df-neg q.eqcomi eqeqqi  
  EqReplaceImp1Eq1
  ## </d>
)

thm (negNotNaN () () (-. (q.= (-n A) (q.NaN)))
  (r A) q.negClosure
  A rNotNaN    
  mpbirRemove
  A df-neg q.eqcomi
  QeqReplaceNot0Qeq0
)

thm (rNeg () () (q.= (r (-n A)) (-n A))
  A negNotNaN
  (-n A) rNotNaN2  
  ax-mp
)



## <title> Substitution </title>
## <table>
##   (-> ph (q.=  [ A ]   ]   ]  C))
##   (q.=         [ A ]   [ B ] )
##   (-> ph (q.=  [   [   [ B ]  C))
## </table>
thm (QeqReplaceImp1Qeq0 () (
     replacee (-> ph (q.= A C))
     substitution (q.= A B)) 
     (-> ph (q.= B C))
  replacee substitution
  C q.eqeq1i
  sylib
)


## <title> Substitution </title>
## <table>
##   (-> ph (q.= (q.+ A  [ B ]   ]   ] ) D))
##   (q.=                [ B ]   [ C ] )
##   (-> ph (q.= (q.+ A  [   [   [ C ] ) D))
## </table>
thm (QeqReplaceImp1Qeq0Q.+1 () (
     replacee (-> ph (q.= (q.+ A B) D))
     substitution (q.= B C)) 
     (-> ph (q.= (q.+ A C) D))
  replacee substitution
  A q.addeq2i
  QeqReplaceImp1Qeq0
)

## <title> Substitution </title>
## <table>
##   (q.= A  [ B ]   ]   ] )
##   (q.=    [ B ]   [ C ] )
##   (q.= A  [   [   [ C ] )
## </table>
thm (QeqReplaceQeq1 () (
     replacee (q.= A B)
     substitution (q.= B C)) 
     (q.= A C)
  replacee substitution
  A q.eqeq2i
  mpbi
)

thm (negcan () () (= (+ A (-n A)) (0))
  (r A) q.negcan
  A df-neg q.eqcomi  
  QeqReplaceImp1Qeq0Q.+1
  A rNeg q.eqcomi  
  QeqReplaceImp1Qeq0Q.+1
  
  ## <d 'Definition of Rational Addition '>
    A (-n A) df-add q.eqcomi
    QeqReplaceImp1Qeq0
  ## </d 'Definition of Rational Addition '>
  A rNotNaN  
  ax-mpRemove
  df-0 q.eqcomi  
  QeqReplaceQeq1
  eqeqqi
)

## <title> Definition of Rational Multiplication </title>
defthm (df-div nat (/ A B) () () (q.= (/ A B) (q./ (r A) (r B)))
  (q./ (r A) (r B)) q.eqid
)

thm (diveq1 () () (-> (= A B) (= (/ A C) (/ B C)))
  (r A) (r B) (r C) q.diveq1 eqeqqd
  A B df-eq bicomi
  sylbi2
  A C df-div q.eqcomi eqeqqi
  EqReplaceImp1Eq0
  B C df-div q.eqcomi eqeqqi
  EqReplaceImp1Eq1
)

thm (diveq2 () () (-> (= A B) (= (/ C A) (/ C B)))
  (r A) (r B) (r C) q.diveq2 eqeqqd
  A B df-eq bicomi  
  sylbi2
  C A df-div q.eqcomi eqeqqi  
  EqReplaceImp1Eq0
  C B df-div q.eqcomi eqeqqi
  EqReplaceImp1Eq1
)

## <title> Substitution </title>
## <table>
##   (-> (-. (q.= A  [ B ]   ]   ] )) ph)
##   (q.=            [ B ]   [ C ] )
##   (-> (-. (q.= A  [   [   [ C ] )) ph)
## </table>
thm (QeqReplaceImp0Not0Qeq1 () (
     replacee (-> (-. (q.= A B)) ph)
     substitution (q.= B C)) 
     (-> (-. (q.= A C)) ph)
  replacee substitution
  A q.eqeq2i
  BiReplaceImp0Not0
)

## <title> Substitution </title>
## <table>
##   (-> ph (-. (q.=  [ A ]   ]   ]  C)))
##   (q.=             [ A ]   [ B ] )
##   (-> ph (-. (q.=  [   [   [ B ]  C)))
## </table>
thm (QeqReplaceImp1Not0Qeq0 () (
     replacee (-> ph (-. (q.= A C)))
     substitution (q.= A B)) 
     (-> ph (-. (q.= B C)))
  replacee substitution
  C q.eqeq1i
  BiReplaceImp1Not0
)

thm (divNotNaN () () (-> (-. (= B (0))) (-. (q.= (/ A B) (q.NaN))))
  (r A) (r B) q.divclosure
  A rNotNaN  
  (/\ (-. (q.= (r B) (q.0))) (-. (q.= (r B) (q.NaN)))) anRemove1
  (-. (q.= (q./ (r A) (r B)) (q.NaN))) imbi1i
  mpbi
  B rNotNaN    
  (-. (q.= (r B) (q.0))) anRemove2
  (-. (q.= (q./ (r A) (r B)) (q.NaN))) imbi1i
  mpbi
  df-0 q.eqcomi
  r0 q.eqcomi
  QeqReplaceQeq1
  QeqReplaceImp0Not0Qeq1
  B (0) df-eq bicomi  
  BiReplaceImp0Not0
  A B df-div q.eqcomi  
  QeqReplaceImp1Not0Qeq0
)

thm (rDiv () () (-> (-. (= B (0))) (q.= (r (/ A B)) (/ A B)))
  B A divNotNaN
  (/ A B) rNotNaN2
  syl
)

thm (rDiv2 () () (-> (-. (= B (0))) (q.= (r (/ A B)) (q./ (r A) (r B))))
  B A rDiv
  A B df-div
  (r (/ A B)) q.eqeq2i  
  sylib
)



## <title> Substitution </title>
## <table>
##   (-> ph (q.= (q.* A  [ B ]   ]   ] ) D))
##   (q.=                [ B ]   [ C ] )
##   (-> ph (q.= (q.* A  [   [   [ C ] ) D))
## </table>
thm (QeqReplaceImp1Qeq0Q.*1 () (
     replacee (-> ph (q.= (q.* A B) D))
     substitution (q.= B C)) 
     (-> ph (q.= (q.* A C) D))
  replacee substitution
  A q.muleq2i
  QeqReplaceImp1Qeq0
)

## <title> Substitution </title>
## <table>
##   (-> ph (q.= A  [ B ]   ]   ] ))
##   (q.=           [ B ]   [ C ] )
##   (-> ph (q.= A  [   [   [ C ] ))
## </table>
thm (QeqReplaceImp1Qeq1 () (
     replacee (-> ph (q.= A B))
     substitution (q.= B C)) 
     (-> ph (q.= A C))
  replacee substitution
  A q.eqeq2i
  sylib
)

## <title> Substitution </title>
## <table>
##   (-> ph (/\ ps  [ ch ]   ]    ] ))
##   (<->           [ ch ]   [ th ] )
##   (-> ph (/\ ps  [    [   [ th ] ))
## </table>
thm (BiReplaceImp1An1 () (
     replacee (-> ph (/\ ps ch))
     substitution (<-> ch th)) 
     (-> ph (/\ ps th))
  replacee substitution
  ps anbi2i
  sylib
)

## <title> Substitution </title>
## <table>
##   (-> ph (q.= (r  [ A ]   ]   ] ) C))
##   (q.=            [ A ]   [ B ] )
##   (-> ph (q.= (r  [   [   [ B ] ) C))
## </table>
thm (QeqReplaceImp1Qeq0R0 () (
     replacee (-> ph (q.= (r A) C))
     substitution (q.= A B)) 
     (-> ph (q.= (r B) C))
  replacee substitution
  reqi
  QeqReplaceImp1Qeq0
)

thm (divcan () () (-> (-. (= B (0))) (= (* B (/ A B)) A))
  (r B) (r A) q.divcan4

  ## <d>
  B rNotNaN      
  (-. (q.= (r B) (q.0))) anRemove2
  (q.= (q.* (r B) (q./ (r A) (r B))) (r A)) imbi1i
  mpbi
  ## </d>

  ## <d>
  df-0 q.eqcomi  
  QeqReplaceImp0Not0Qeq1
  r0 q.eqcomi
  QeqReplaceImp0Not0Qeq1
  B (0) df-eq bicomi  
  BiReplaceImp0Not0
  ## </d>

  ## <d>
  B A rDiv2
  (r B) q.muleq2d
  (r A) q.eqeq1d  
  ## <d 'Commutative Biconditional '>
    (q.= (q.* (r B) (r (/ A B))) (r A)) (q.= (q.* (r B) (q./ (r A) (r B))) (r A)) bicom
    sylib
  ## </d 'Commutative Biconditional '>
  jca  
  ## <d>
    (q.= (q.* (r B) (q./ (r A) (r B))) (r A)) (q.= (q.* (r B) (r (/ A B))) (r A)) pm5.36
    sylib
  ## </d>  
  ## <d 'Remove Right Side of AND '>
    (q.= (q.* (r B) (r (/ A B))) (r A)) (<-> (q.= (q.* (r B) (q./ (r A) (r B))) (r A)) (q.= (q.* (r B) (r (/ A B))) (r A))) pm3.26
    syl
  ## </d 'Remove Right Side of AND '>
  ## </d>
  ## <d>
    B (/ A B) rMul2 q.eqcomi  
    QeqReplaceImp1Qeq0
  ## </d>

  ## <d>
    (* B (/ A B)) A df-eq bicomi  
    sylib
  ## </d>
)

## <title> Equivalence for / </title> ##
thm (diveq12 () () (-> (/\ (= A B) (= C D)) (= (/ A C) (/ B D)))
  A B C diveq1
  C D B diveq2
  anim12i
  ## <d 'Transitive Property'>
    (/ A C) (/ B C) (/ B D) eqtr
    syl
  ## </d 'Transitive Property'>
)

thm (emptyThm () () (T)
 tru
)

export (ADD_MULTIPLY add_multiply_min.ghi (PROP PREDICATE_EQ) "")
export (NEGATIVE negative_min.ghi (PROP PREDICATE_EQ ADD_MULTIPLY) "")
export (DIVISION division_min.ghi (PROP PREDICATE_EQ ADD_MULTIPLY ) "")

# Still missing lesym, letot, letr, exle, and lemul1 
# export (INEQUALITY inequality_min.ghi (PROP PREDICATE_EQ ARITHMETIC_MIN) "")
