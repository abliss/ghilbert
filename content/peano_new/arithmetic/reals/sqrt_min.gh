# This file define the supremum. It does not prove much about it yet.

import (PROP          /peano_new/prop.ghi () "")
import (PREDICATE     /peano_new/predicate/all.ghi (PROP) "")
import (REALS         /peano_new/arithmetic/reals/common.ghi (PROP PREDICATE) "")
import (SET_MIN       /peano_new/set_min.ghi (PROP PREDICATE) "")
import (SET           /peano_new/set.ghi (PROP PREDICATE SET_MIN) "")
import (SUPREMUM      /peano_new/arithmetic/reals/supremum.ghi (PROP PREDICATE REALS SET_MIN) "")

tvar (wff ph ps ch th ta)
tvar (nat A B C D A' B' C' D' ep)
var (nat v w x y z)
tvar (set S T U V)

## <context>
##   This theorem is part of a series of proofs about the existence of square roots.
##   The numbers here are all assumed to be real numbers. This theorem is leading up
##   to a proof that every nonnegative number has exactly one square root. Remember that
##   square roots are defined to be positive, so -2 is not a square root of 4. First, we
##   prove that there exists at most one square root. However, the existence proof is not
##   complete yet. (We've shown there cannot be more than one square root, but haven't yet
##   ruled out the possibility of there being no square roots for a positive number.)
## </context>


## <title> Def. Square Root </title>
defthm (df-sqrt nat (sqrt A) ((A x)) () (= (sqrt A) (iota ({|} x (/\ (= (exp x (2)) A) (>= x (0))))))
  y x (2) expeq1
  A eqeq1d
  y x (0) geeq1
  anbi12d
  abeq
  iotaseqi
)



## <title> Substitution </title>
## <table>
##   (-> ph (>  [ A ]   ]   ]  C))
##   (=         [ A ]   [ B ] )
##   (-> ph (>  [   [   [ B ]  C))
## </table>
thm (EqReplaceImp1Gt0 () (
     replacee (-> ph (> A C))
     substitution (= A B)) 
     (-> ph (> B C))
  replacee substitution
  C gteq1i
  sylib
)

## <title> Substitution </title>
## <table>
##   (<-> ph (/\  [ ps ]   ]    ]  th))
##   (<->         [ ps ]   [ ch ] )
##   (<-> ph (/\  [    [   [ ch ]  th))
## </table>
thm (BiReplaceBi1An0 () (
     replacee (<-> ph (/\ ps th))
     substitution (<-> ps ch)) 
     (<-> ph (/\ ch th))
  replacee substitution
  th anbi1i
  bitri
)

## <title> Substitution </title>
## <table>
##   (-> ph (> A  [ B ]   ]   ] ))
##   (=           [ B ]   [ C ] )
##   (-> ph (> A  [   [   [ C ] ))
## </table>
thm (EqReplaceImp1Gt1 () (
     replacee (-> ph (> A B))
     substitution (= B C)) 
     (-> ph (> A C))
  replacee substitution
  A gteq2i
  sylib
)


## <title> Squares are not equal </title>
thm (sqrtmo.1 () () (-> (/\ (> A B) (/\ (> A (0)) (> B (0)))) (-. (= (exp A (2)) (exp B (2)))))
  ## <d>
  A B A gtmul2
  A B B gtmul2
  ## <d 'Commutative Property '>
    B A mulcom
    EqReplaceImp1Gt0
  ## </d 'Commutative Property '>
  ## </d>
  anim12i
  ## <d>
    (> A B) (> A (0)) (> A B) (> B (0)) an4  
    ## <d 'Conjunction is Idempotent '>
      (> A B) anidm
      BiReplaceBi1An0
    ## </d 'Conjunction is Idempotent '>  
    sylbi2
    ## <d 'Transitive Inequality '>
      (* A A) (* A B) (* B B) gttr
      syl
    ## </d 'Transitive Inequality '> 
  ## </d>
  ## <d>
  ## <d>
    A exp2 eqcomi  
    EqReplaceImp1Gt0
  ## </d>
  ## <d>
    B exp2 eqcomi  
    EqReplaceImp1Gt1
  ## </d>
  ## </d>  
  ## <d 'Inequality Conversion '>
    (exp A (2)) (exp B (2)) gtneq
    syl
  ## </d 'Inequality Conversion '>
)

## <title> Substitution </title>
## <table>
##   (-> (/\ ph  [ ps ]   ]    ] ) th)
##   (<->        [ ps ]   [ ch ] )
##   (-> (/\ ph  [    [   [ ch ] ) th)
## </table>
thm (BiReplaceImp0An1 () (
     replacee (-> (/\ ph ps) th)
     substitution (<-> ps ch)) 
     (-> (/\ ph ch) th)
  replacee substitution
  ph anbi2i
  sylbi2
)

## <title> Substitution </title>
## <table>
##   (-> (/\  [ ph ]   ]    ]  ch) th)
##   (<->     [ ph ]   [ ps ] )
##   (-> (/\  [    [   [ ps ]  ch) th)
## </table>
thm (BiReplaceImp0An0 () (
     replacee (-> (/\ ph ch) th)
     substitution (<-> ph ps)) 
     (-> (/\ ps ch) th)
  replacee substitution
  ch anbi1i
  sylbi2
)

## <title> Substitution </title>
## <table>
##   (-> ph (-.  [ ps ]   ]    ] ))
##   (<->        [ ps ]   [ ch ] )
##   (-> ph (-.  [    [   [ ch ] ))
## </table>
thm (BiReplaceImp1Not0 () (
     replacee (-> ph (-. ps))
     substitution (<-> ps ch)) 
     (-> ph (-. ch))
  replacee substitution
  con4biir
  sylib
)

## <title> Squares are not equal </title>
thm (sqrtmo.2 () () (-> (/\ (-. (= A B)) (/\ (> A (0)) (> B (0)))) (-. (= (exp A (2)) (exp B (2)))))
  ## <d>
    A B neqlt
    (/\ (> A (0)) (> B (0))) anim1i
    B A sqrtmo.1  
  ## </d>
  ## <d>
    ## <d 'Commute Conjunction '>
      (> B (0)) (> A (0)) ancom
      BiReplaceImp0An1
    ## </d 'Commute Conjunction '>  
    ## <d 'Converse of < '>
      A B ltcon bicomi
      BiReplaceImp0An0
    ## </d 'Converse of < '>  
    ## <d 'Symmetric Property '>
      (exp B (2)) (exp A (2)) eqcom
      BiReplaceImp1Not0
    ## </d 'Symmetric Property '>
  ## </d>
  A B sqrtmo.1
  jaoi  
  ## <d 'Distributive Property '>
    (< A B) (> A B) (/\ (> A (0)) (> B (0))) andir bicomi
    sylbi2
  ## </d 'Distributive Property '>  
  syl
)



## <title> Substitution </title>
## <table>
##   (<-> ph (-.  [ ps ]   ]    ] ))
##   (<->         [ ps ]   [ ch ] )
##   (<-> ph (-.  [    [   [ ch ] ))
## </table>
thm (BiReplaceBi1Not0 () (
     replacee (<-> ph (-. ps))
     substitution (<-> ps ch)) 
     (<-> ph (-. ch))
  replacee substitution
  con4biir
  bitri
)


## <title> Substitution </title>
## <table>
##   (<-> ph (-. (\/  [ ps ]   ]    ]  th)))
##   (<->             [ ps ]   [ ch ] )
##   (<-> ph (-. (\/  [    [   [ ch ]  th)))
## </table>
thm (BiReplaceBi1Not0Or0 () (
     replacee (<-> ph (-. (\/ ps th)))
     substitution (<-> ps ch)) 
     (<-> ph (-. (\/ ch th)))
  replacee substitution
  th orbi1i
  BiReplaceBi1Not0
)

## <title> Substitution </title>
## <table>
##   (-> ph (\/ ps  [ ch ]   ]    ] ))
##   (<->           [ ch ]   [ th ] )
##   (-> ph (\/ ps  [    [   [ th ] ))
## </table>
thm (BiReplaceImp1Or1 () (
     replacee (-> ph (\/ ps ch))
     substitution (<-> ch th)) 
     (-> ph (\/ ps th))
  replacee substitution
  ps orbi2i
  sylib
)


## <title> Squares are equal implies equality </title>
thm (sqrtmo.3 () () (-> (/\ (= (exp A (2)) (exp B (2))) (/\ (> A (0)) (> B (0)))) (= A B))
  A B sqrtmo.2
  ## <d 'Contrapositive '>
  ## <d 'Contrapositive '>
    (/\ (-. (= A B)) (/\ (> A (0)) (> B (0)))) (-. (= (exp A (2)) (exp B (2)))) con34b
    mpbi
    (= (exp A (2)) (exp B (2))) notnotr
    sylbi2
  ## </d 'Contrapositive '>  
  ## <d 'DeMorgan's Law '>
    (-. (= A B)) (/\ (> A (0)) (> B (0))) anor
    (= A B) notnotr
    BiReplaceBi1Not0Or0
    BiReplaceImp1Not0
  ## </d 'DeMorgan's Law '>  
  ## <d 'Double Negative '>
    (\/ (= A B) (-. (/\ (> A (0)) (> B (0))))) notnotr
    sylib
  ## </d 'Double Negative '>
  ## </d 'Contrapositive '> 
  ## <d 'Excluded Middle'>
  (/\ (> A (0)) (> B (0))) anim1i 
  ## <d 'Distributive Property '>
    (= A B) (-. (/\ (> A (0)) (> B (0)))) (/\ (> A (0)) (> B (0))) andir
    sylib
  ## </d 'Distributive Property '>  
  ## <d 'Commute Conjunction '>
    (-. (/\ (> A (0)) (> B (0)))) (/\ (> A (0)) (> B (0))) ancom
    BiReplaceImp1Or1
  ## </d 'Commute Conjunction '>  
  ## <d 'Excluded Middle'>
    (/\ (> A (0)) (> B (0))) pm3.24    
    (/\ (= A B) (/\ (> A (0)) (> B (0)))) orNotRemove2
    (/\ (= (exp A (2)) (exp B (2))) (/\ (> A (0)) (> B (0)))) imbi2i
    mpbi
  ## </d 'Excluded Middle'>
  ## </d 'Excluded Middle'>  
  ## <d 'Remove Right Side of AND '>
    (= A B) (/\ (> A (0)) (> B (0))) pm3.26
    syl
  ## </d 'Remove Right Side of AND '>
)

## <title> Non-zero Squares are positive </title>
thm (posSquares2 () () (-> (-. (= A (0))) (> (exp A (2)) (0)))
  A posSquares
  (* A A) df-pos  
  sylib    
  ## <d 'Squared means multiply twice '>
    A exp2 eqcomi
    EqReplaceImp1Gt0
  ## </d 'Squared means multiply twice '>
)

## <title> Substitution </title>
## <table>
##   (-> ph (= A  [ B ]   ]   ] ))
##   (=           [ B ]   [ C ] )
##   (-> ph (= A  [   [   [ C ] ))
## </table>
thm (EqReplaceImp1Eq1 () (
     replacee (-> ph (= A B))
     substitution (= B C)) 
     (-> ph (= A C))
  replacee substitution
  A eqeq2i
  sylib
)

## <title> Substitution </title>
## <table>
##   (-> ph (=  [ A ]   ]   ]  C))
##   (=         [ A ]   [ B ] )
##   (-> ph (=  [   [   [ B ]  C))
## </table>
thm (EqReplaceImp1Eq0 () (
     replacee (-> ph (= A C))
     substitution (= A B)) 
     (-> ph (= B C))
  replacee substitution
  C eqeq1i
  sylib
)

## <title> Squares are zero, only for zero </title>
thm (square0 () () (<-> (= A (0)) (= (exp A (2)) (0)))
  A (0) A muleq1  
  ## <d 'Multiply by 0 '>
    A mul0r
    EqReplaceImp1Eq1
  ## </d 'Multiply by 0 '>  
  ## <d 'Squared means multiply twice '>
    A exp2 eqcomi
    EqReplaceImp1Eq0
  ## </d 'Squared means multiply twice '>
  A posSquares2  
  ## <d 'Inequality Conversion '>
    (exp A (2)) (0) gtneq
    syl
  ## </d 'Inequality Conversion '>  
  ## <d 'Contrapositive '>
    (-. (= A (0))) (-. (= (exp A (2)) (0))) con34b
    mpbi
    (= (exp A (2)) (0)) notnotr
    sylbi2
    (= A (0)) notnotr
    sylib
  ## </d 'Contrapositive '>
  impbii
)



## <title> Substitution </title>
## <table>
##   (-> ph (/\ ps  [ ch ]   ]    ] ))
##   (->            [ ch ]   [ th ] )
##   (-> ph (/\ ps  [    [   [ th ] ))
## </table>
thm (ImpReplaceImp1An1 () (
     replacee (-> ph (/\ ps ch))
     substitution (-> ch th)) 
     (-> ph (/\ ps th))
  replacee substitution
  ps anim2i
  syl
)

## <title> Squares cannot be zero and positive </title>
thm (impossibleSq () () (-. (/\ (= (exp A (2)) C) (/\ (= (exp B (2)) C) (/\ (= A (0)) (> B (0))))))

  (exp A (2)) C (exp B (2)) eqtr  
  ## <d 'Symmetric Property '>
    C (exp B (2)) eqcom
    BiReplaceImp0An1
  ## </d 'Symmetric Property '>
  ## <d 'Add A=0 to both sides'>
  (= A (0)) anim1i  
  ## <d 'Associative Property '>
    (= (exp A (2)) C) (= (exp B (2)) C) (= A (0)) anass
    sylbi2
  ## </d 'Associative Property '>
  ## </d>

  ## <d 'Add B=0 to both sides'>
  (> B (0)) anim1i    
  ## <d 'Associative Property '>
    (= (exp A (2)) C) (/\ (= (exp B (2)) C) (= A (0))) (> B (0)) anass
    sylbi2
  ## </d 'Associative Property '>  
  ## <d 'Associative Property '>
    (= (exp B (2)) C) (= A (0)) (> B (0)) anass
    BiReplaceImp0An1
  ## </d 'Associative Property '>  
  ## <d 'Associative Property '>
    (= (exp A (2)) (exp B (2))) (= A (0)) (> B (0)) anass
    sylib
  ## </d 'Associative Property '>
  ## </d>

  (exp A (2)) (0) (exp B (2)) eqtr2
  ## <d>
    A square0 bicomi
    BiReplaceImp0An0
  ## </d>
  ## <d>
    B square0 bicomi
    ## <d 'Symmetric Property '>
      (exp B (2)) (0) eqcom
      bitr3icom
    ## </d 'Symmetric Property '>
    sylib
  ## </d>
  ## <d 'Add B>0 to both sides'>
  ## <d 'Commute Conjunction '>
    (= A (0)) (= (exp A (2)) (exp B (2))) ancom
    sylbi2
  ## </d 'Commute Conjunction '>
  (> B (0)) anim1i
  ## <d 'Associative Property '>
    (= (exp A (2)) (exp B (2))) (= A (0)) (> B (0)) anass
    sylbi2
  ## </d 'Associative Property '>
  ## </d>  
  syl

  ## <d 'B cannot be 0 and positive'>
    ## <d 'Inequality Conversion '>
      B (0) gtneq
      ImpReplaceImp1An1
    ## </d 'Inequality Conversion '>
    ## <d 'Remove Left Side of AND '>
      (= B (0)) pm3.24
      mtoRemove
    ## </d 'Remove Left Side of AND '>
  ## </d>
)



## <title> Substitution </title>
## <table>
##   (-> (/\ ph (/\ ps  [ ch ]   ]    ] )) ta)
##   (<->               [ ch ]   [ th ] )
##   (-> (/\ ph (/\ ps  [    [   [ th ] )) ta)
## </table>
thm (BiReplaceImp0An1An1 () (
     replacee (-> (/\ ph (/\ ps ch)) ta)
     substitution (<-> ch th)) 
     (-> (/\ ph (/\ ps th)) ta)
  replacee substitution
  ps anbi2i
  BiReplaceImp0An1
)

## <title> Substitution </title>
## <table>
##   (-. (/\ ph  [ ps ]   ]    ] ))
##   (<->        [ ps ]   [ ch ] )
##   (-. (/\ ph  [    [   [ ch ] ))
## </table>
thm (BiReplaceNot0An1 () (
     replacee (-. (/\ ph ps))
     substitution (<-> ps ch)) 
     (-. (/\ ph ch))
  replacee substitution
  ph anbi2i
  mtbi
)


## <title> Substitution </title>
## <table>
##   (-. (/\ ph (/\ ps  [ ch ]   ]    ] )))
##   (<->               [ ch ]   [ th ] )
##   (-. (/\ ph (/\ ps  [    [   [ th ] )))
## </table>
thm (BiReplaceNot0An1An1 () (
     replacee (-. (/\ ph (/\ ps ch)))
     substitution (<-> ch th)) 
     (-. (/\ ph (/\ ps th)))
  replacee substitution
  ps anbi2i
  BiReplaceNot0An1
)

## <title> Substitution </title>
## <table>
##   (-. (/\  [ ph ]   ]    ]  ch))
##   (<->     [ ph ]   [ ps ] )
##   (-. (/\  [    [   [ ps ]  ch))
## </table>
thm (BiReplaceNot0An0 () (
     replacee (-. (/\ ph ch))
     substitution (<-> ph ps)) 
     (-. (/\ ps ch))
  replacee substitution
  ch anbi1i
  mtbi
)


## <title> Equal Squares implies equality </title>
thm (sqrtmo.4 () () (-> (/\ (= (exp A (2)) C) (/\ (= (exp B (2)) C) (/\ (>= A (0)) (>= B (0))))) (= A B))
  ## <d>
    C (exp A (2)) (exp B (2)) eqtr2  
    ## <d 'Symmetric Property '>
      C (exp A (2)) eqcom
      BiReplaceImp0An0
    ## </d 'Symmetric Property '>  
    ## <d 'Symmetric Property '>
      C (exp B (2)) eqcom
      BiReplaceImp0An1
    ## </d 'Symmetric Property '>
    (/\ (> A (0)) (> B (0))) anim1i
  ## </d>
  A B sqrtmo.3     
  syl
  ## <d 'Add A = 0 case'>
  ## <d 'Associative Property '>
    (= (exp A (2)) C) (= (exp B (2)) C) (/\ (> A (0)) (> B (0))) anass
    sylbi2
  ## </d 'Associative Property '>
  A C B impossibleSq
  (= A B) pm2.24i  
  ## <d 'Double Negative '>
    (/\ (= (exp A (2)) C) (/\ (= (exp B (2)) C) (/\ (= A (0)) (> B (0))))) notnotr
    sylbi2
  ## </d 'Double Negative '>
  jaoi
  ## <d>
  ## <d 'Distributive Property '>
    (= (exp A (2)) C) (/\ (= (exp B (2)) C) (/\ (> A (0)) (> B (0)))) (/\ (= (exp B (2)) C) (/\ (= A (0)) (> B (0)))) andi bicomi
    sylbi2
  ## </d 'Distributive Property '>  
  ## <d 'Distributive Property '>
    (= (exp B (2)) C) (/\ (> A (0)) (> B (0))) (/\ (= A (0)) (> B (0))) andi bicomi
    BiReplaceImp0An1
  ## </d 'Distributive Property '>  
  ## <d 'Distributive Property '>
    (> A (0)) (= A (0)) (> B (0)) andir bicomi
    BiReplaceImp0An1An1
  ## </d 'Distributive Property '>
  ## </d>
  ## <d>
  ## <d '≥ means > OR = '>
    A (0) gegeo bicomi
  ## </d '≥ means > OR = '>
  (> B (0)) anbi1i  
  BiReplaceImp0An1An1
  ## </d>
  ## </d>

  ## <d 'Add B = 0 case'>
  (/\ (= (exp A (2)) C) (= (exp B (2)) C)) (/\ (= A (0)) (= B (0))) pm3.27
  A (0) B  eqtr  
  ## <d 'Symmetric Property '>
    (0) B eqcom
    BiReplaceImp0An1
  ## </d 'Symmetric Property '>
  syl  
  ## <d 'Associative Property '>
    (= (exp A (2)) C) (= (exp B (2)) C) (/\ (= A (0)) (= B (0))) anass
    sylbi2
  ## </d 'Associative Property '>
  B C A impossibleSq
  ## <d>
  ## <d 'Commute Conjunction '>
    (= B (0)) (> A (0)) ancom
    BiReplaceNot0An1An1
  ## </d 'Commute Conjunction '>  
  ## <d 'Associative Property '>
    (= (exp B (2)) C) (= (exp A (2)) C) (/\ (> A (0)) (= B (0))) anass bicomi
    mtbi
  ## </d 'Associative Property '>  
  ## <d 'Commute Conjunction '>
    (= (exp B (2)) C) (= (exp A (2)) C) ancom
    BiReplaceNot0An0
  ## </d 'Commute Conjunction '>  
  ## <d 'Associative Property '>
    (= (exp A (2)) C) (= (exp B (2)) C) (/\ (> A (0)) (= B (0))) anass
    mtbi
  ## </d 'Associative Property '>
  ## </d>
  ## <d 'Contradiction Implies Anything'>
  (= A B) pm2.24i  
  ## <d 'Double Negative '>
    (/\ (= (exp A (2)) C) (/\ (= (exp B (2)) C) (/\ (> A (0)) (= B (0))))) notnotr
    sylbi2
  ## </d 'Double Negative '>
  ## </d>
  jaoi  
  ## <d 'Distributive Property '>
  ## <d 'Distributive Property '>
    (= (exp A (2)) C) (/\ (= (exp B (2)) C) (/\ (= A (0)) (= B (0)))) (/\ (= (exp B (2)) C) (/\ (> A (0)) (= B (0)))) andi bicomi
    sylbi2
  ## </d 'Distributive Property '>
  
  ## <d 'Distributive Property '>
    (= (exp B (2)) C) (/\ (= A (0)) (= B (0))) (/\ (> A (0)) (= B (0))) andi bicomi
    BiReplaceImp0An1
  ## </d 'Distributive Property '>
  
  ## <d 'Distributive Property '>
    (= A (0)) (> A (0)) (= B (0)) andir bicomi
    BiReplaceImp0An1An1
  ## </d 'Distributive Property '>
  ## </d 'Distributive Property '>
   
  ## <d>
  ## <d 'Commutative Property of OR '>
    (= A (0)) (> A (0)) orcom
  ## </d 'Commutative Property of OR '>  
  ## <d '≥ means > OR = '>
    A (0) gegeo bicomi
    bitri
  ## </d '≥ means > OR = '>
  (= B (0)) anbi1i  
  BiReplaceImp0An1An1
  ## </d>
  jaoi
 
  ## <d 'Distributive Property '>
    (= (exp A (2)) C) (/\ (= (exp B (2)) C) (/\ (>= A (0)) (> B (0)))) (/\ (= (exp B (2)) C) (/\ (>= A (0)) (= B (0)))) andi bicomi
    sylbi2
  ## </d 'Distributive Property '>  
  ## <d 'Distributive Property '>
    (= (exp B (2)) C) (/\ (>= A (0)) (> B (0))) (/\ (>= A (0)) (= B (0))) andi bicomi
    BiReplaceImp0An1
  ## </d 'Distributive Property '>  
  ## <d 'Distributive Property '>
    (>= A (0)) (> B (0)) (= B (0)) andi bicomi
    BiReplaceImp0An1An1
  ## </d 'Distributive Property '>
  ## <d '≥ means > OR = '>
    B (0) gegeo
    ## <d 'Commutative Property'>
      (>= B (0)) (\/ (> B (0)) (= B (0))) bicom
      mpbi
    ## </d 'Commutative Property'>
  ## </d '≥ means > OR = '>
  (>= A (0)) anbi2i    
  BiReplaceImp0An1An1
  ## </d>
)

## <title> There exists at most one square root </title>
thm (sqrtmo ((A x)) () (E* x (/\ (= (exp x (2)) A) (>= x (0))))
  x A y sqrtmo.4    
  ## <d 'Group x and y terms'>
    ## <d 'Associative Property '>
      (= (exp x (2)) A) (= (exp y (2)) A) (/\ (>= x (0)) (>= y (0))) anass bicomi
      sylbi2
    ## </d 'Associative Property '>
    (= (exp x (2)) A) (= (exp y (2)) A) (>= x (0)) (>= y (0)) an4  
    sylbi2
  ## </d>
  ## <d>
    y gen
    x gen
    x y (2) expeq1
    A eqeq1d
    x y (0) geeq1
    anbi12d
    mo4 bicomi  
    mpbi
  ## </d>
)



## <title> Substitution </title>
## <table>
##   (<-> ph (<=  [ A ]   ]   ]  C))
##   (=           [ A ]   [ B ] )
##   (<-> ph (<=  [   [   [ B ]  C))
## </table>
thm (EqReplaceBi1Le0 () (
     replacee (<-> ph (<= A C))
     substitution (= A B)) 
     (<-> ph (<= B C))
  replacee substitution
  C leeq1i
  bitri
)

## <title> Determine when set of squares is empty </title>
thm (setSquares ((A x)) () (<-> (>= A (0)) (e. (0) ({|} x (<= (exp x (2)) A))))    
  ## <d>
    (0) x (<= (exp x (2)) A) ax-elab
  ## </d>
  ## <d>
    (= x (0)) id
    (2) expeq1d
    A leeq1d
    sbcie
    bitri
  ## </d>    
  ## <d 'Squared means multiply twice '>
    (0) exp2
    (0) mul0r
    EqReplaceEq1
    EqReplaceBi1Le0
  ## </d 'Multiply by 0 '>  
  ## <d 'Converse of ≤ '>
    (0) A lecon
    bitri
    bicomi
  ## </d 'Converse of ≤ '>
)

## <title> Equivalence for square root </title>
thm (sqrteq () () (-> (= A B) (= (sqrt A) (sqrt B)))
  (= A B) id
  (exp x (2)) eqeq2d
  (>= x (0)) anbi1d
  x abbi2d
  iotaseqd
  A x df-sqrt
  ## <d 'Commutative Property'>
    (sqrt A) (iota ({|} x (/\ (= (exp x (2)) A) (>= x (0))))) eqcom
    mpbi
  ## </d 'Commutative Property'>
  EqReplaceImp1Eq0
  B x df-sqrt
  ## <d 'Commutative Property'>
    (sqrt B) (iota ({|} x (/\ (= (exp x (2)) B) (>= x (0))))) eqcom
    mpbi
  ## </d 'Commutative Property'>
  EqReplaceImp1Eq1
)



## <summary> This is used just for convenience to get an empty theorem. </summary>
thm (emptyThm () () (T)
  tru
)

# This is not ready yet.

# export (SQRT_ROOT_MIN /peano_new/arithmetic/reals/sqrt_root_min.ghi (PROP PREDICATE REALS SET_MIN) "")