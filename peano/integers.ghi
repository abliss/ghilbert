param (PROP /peano/prop.ghi () "")
param (PEANO_MIN /peano/peano_min.ghi (PROP) "")
param (PEANO /peano/peano_ax.ghi (PROP PEANO_MIN) "")
param (NAIVE_SET /peano/naive_set.ghi (PROP PEANO_MIN PEANO) "")
param (PEANO_THMS /peano/peano_stmts.ghi (PROP PEANO_MIN PEANO NAIVE_SET) "")

tvar (wff ph ps ch th ta)
tvar (nat A B C D A' B' C' D' A0 A1 A2 A3 i j k)
var (nat v w x y z v' w' x' y' z')
tvar (set S T U V S0 S1 S2 S3 S4 S5 S6 S7 S8 S9)
tvar (wff zi si)

term (wff (=z A B))
term (wff (<=z A B))
term (wff (<z A B))
term (wff (>z A B))
term (wff (>=z A B))
term (wff (zpos A))
term (nat (+z A B))
term (nat (*z A B))
term (nat (-n A))
term (nat (- A B))
term (nat (int A))
term (nat (zn A))
term (nat (0z))
term (nat (1z))
term (nat (2z))
term (nat (3z))
term (nat (4z))
term (nat (5z))
term (nat (6z))
term (nat (7z))
term (nat (8z))
term (nat (9z))
term (nat (10z))


## <title> Convert Natural to Integer Equality </title>
## <summary> Use this sparingly. </summary>
stmt (eqzeqi () ((= A B)) (=z A B))

## <title> Convert Natural to Integer Equality </title>
## <summary> Use this sparingly. </summary>
stmt (eqzeqd () ((-> ph (= A B))) (-> ph (=z A B)))

## <title> Reflexive Property </title>
## <summary> Integer equality is reflexive. </summary>
stmt (zeqid () () (=z A A))

## <title> Symmetric Property </title>
## <summary> Integer equality is symmetric. </summary>
## <suggest> right('Commute', '=') </suggest>
stmt (zeqcom() () (<-> (=z A B) (=z B A)))

## <title> Symmetric Property </title>
stmt (zeqcomi() ((=z A B)) (=z B A))

## <title> Transitive Property </title>
## <suggest> right('Simplify', '=') </suggest>
stmt (zeqtr() () (-> (/\ (=z A B) (=z B C)) (=z A C)))

## <title> Transitive Property </title>
stmt (zeqtrd () ((-> ph (=z A B)) (-> ph (=z B C))) (-> ph (=z A C)))

stmt (zeqzeq1() () (-> (=z A B) (<-> (=z A C) (=z B C))))

## <title> Equivalence over Equality </title>
stmt (zeqzeq2 () () (-> (=z A B) (<-> (=z C A) (=z C B))))

## <title> Equivalence over Equality </title>
## <table>
##   (=z      A ]    ] [     B ] )
##   (<-> (=z A ] C) ] [ (=z B ] C))
## </table>
stmt (zeqzeq1i () ((=z A B)) (<-> (=z A C) (=z B C)))

## <title> Equivalence over Equality </title>
## <table>
##   (-> ph (=      A ]    ] [    B ] ))
##   (-> ph (<-> (= A ] C) ] [ (= B ] C)))
## </table>
stmt (zeqzeq1d () ((-> ph (=z A B))) (-> ph (<-> (=z A C) (=z B C))))

## <title> Equivalence over Equality </title>
## <table>
##   (=z        [ A  ] [       [ B)
##   (<-> (=z C [ A) ] [ (=z C [ B))
## </table>
stmt (zeqzeq2i () ((=z A B)) (<-> (=z C A) (=z C B)))

## <title> Equivalence over Equality </title>
## <table>
##   (-> ph (=        [ A  ] [      [ B))
##   (-> ph (<-> (= C [ A) ] [ (= C [ B)))
## </table>
stmt (zeqzeq2d ()
  ((-> ph (=z A B)))
  (-> ph (<-> (=z C A) (=z C B))))

## <title> Equivalence over Equality </title>
stmt (zeqzeq12i ()
  ((=z A B)
   (=z C D))
  (<-> (=z A C) (=z B D)))

## <title> Transitive Property </title>
stmt (zeqzeq12d ()
  ((-> ph (=z A B))
   (-> ph (=z C D)))
  (-> ph (<-> (=z A C) (=z B D))))

## <table>
##   (<-> (=z <g> A <b> B) (=z (+z <g> A <r> C) (+z <b> B <r> C)))
## </table>
stmt (zaddcan1() () (<-> (=z A B) (=z (+z A C) (+z B C))))

## <table>
##   (<-> (=z <g> A <b> B) (=z (+z <r> C <g> A) (+z <r> C <b> B)))
## </table>
stmt (zaddcan2() () (<-> (=z A B) (=z (+z C A) (+z C B))))

stmt (zaddzeq1() () (-> (=z A B) (=z (+z A C) (+z B C))))

stmt (zaddzeq2() () (-> (=z A B) (=z (+z C A) (+z C B))))

stmt (zaddzeq1i () (
     (=z A B))
     (=z (+z A C) (+z B C)))

stmt (zaddzeq1d () (
     (-> ph (=z A B)))
     (-> ph (=z (+z A C) (+z B C))))

stmt (zaddzeq2i () (
     (=z A B))
     (=z (+z C A) (+z C B)))

stmt (zaddzeq2d () (
     (-> ph (=z A B)))
     (-> ph (=z (+z C A) (+z C B))))

stmt (zaddzeq12() () (-> (/\ (=z A B) (=z C D)) (=z (+z A C) (+z B D))))

## <title> Equality over Addition </title>
## <table>
##   (=z     A ] ]   ]     [ B ] ] )
##   (=z       [ [ C ]     [   [ [ D)
##   (=z (+z A ] [ C ] ) (+z [ B ] [ D))
## </table>
stmt (zaddzeq12i ()
    ((=z A B)
     (=z C D))
    (=z (+z A C) (+z B D)))

## <title> Equality over Addition </title>
stmt (zaddzeq12d ()
  ((-> ph (=z A B))
   (-> ph (=z C D)))
  (-> ph (=z (+z A C) (+z B D))))

## <title> Integer Addition is a homomorphism </title>
stmt (zaddhomomorph() () (=z (+z (int A) (int B)) (int (+ A B))))

## <title> Negative Signs Cancel </title>
## <suggest> left('Simplify','-') </suggest>
stmt (negzeq2 () () (<-> (=z A B) (=z (-n A) (-n B))))

stmt (negzeq  () () (-> (=z A B) (=z (-n A) (-n B))))

stmt (negzeqi() ((=z A B)) (=z (-n A) (-n B)))

## <title> Double Negative </title>
stmt (doubleneg() () (=z (-n (-n A)) A))

## <title> Integer Addition Identity </title>
## <summary> 0 is the additive identity for integer addition </summary>
## <suggest> right('Simplify','0') </suggest>
stmt (zaddid() () (=z (+z A (0z)) A))

## <title> Integer Addition Identity </title>
## <summary> 0 is the additive identity for integer addition </summary>
## <suggest> right('Simplify','0') </suggest>
stmt (zaddidr () () (=z (+z (0z) A) A))

stmt (neg0() () (=z (-n (0z)) (0z)))

## <title> Commutative Property of Addition </title>
## <table> (= (+ <r> A <g> B) (+ <g> B <r> A)) </table>
## <suggest> right('Commute', '+') </suggest>
stmt (zaddcom () () (=z (+z A B) (+z B A)))

## <title> Associative Property </title>
## <suggest> right('Associate', 'R') left('Associate', 'L') </suggest>
stmt (zaddass() () (=z (+z (+z A B) C) (+z A (+z B C))))

## <title> Equivalence for - </title> ##
stmt (minuszeq1 () () (-> (=z A C) (=z (- A B) (- C B))))

stmt (minuszeq1i () (
     (=z A C))
     (=z (- A B) (- C B)))

## <title> Equivalence for - </title> ##
stmt (minuszeq2 () () (-> (=z B C) (=z (- A B) (- A C))))

stmt (minuszeq1d () (
     (-> ph (=z A C)))
     (-> ph (=z (- A B) (- C B))))

stmt (minuszeq2i () (
     (=z B C))
     (=z (- A B) (- A C)))

stmt (minuszeq2d () (
     (-> ph (=z B C)))
     (-> ph (=z (- A B) (- A C))))

## <title> Cancel using subtraction </title>
## <suggest> right('Simplify','0') </suggest>
stmt (negcan() () (=z (+z A (-n A)) (0z)))

## <title> Cancel using subtraction </title>
## <suggest> right('Simplify','0') </suggest>
stmt (minuscan () () (=z (- A A) (0z)))

## <title> Addition is the inverse of Subtraction </title>
## <suggest> right('Simplify','-') </suggest>
stmt (zaddcan() () (=z (+z (- A B) B) A))

## <title> Addition is the inverse of Subtraction </title>
## <suggest> right('Simplify','-') </suggest>
stmt (zaddcanr () () (=z (- (+z A B) B) A))

stmt (zmulzeq1() () (-> (=z A B) (=z (*z A C) (*z B C))))

stmt (zmulzeq2() () (-> (=z A B) (=z (*z C A) (*z C B))))

stmt (zmulzeq1i () (
     (=z A B))
     (=z (*z A C) (*z B C)))

stmt (zmulzeq1d () (
     (-> ph (=z A B)))
     (-> ph (=z (*z A C) (*z B C))))

stmt (zmulzeq2i () (
     (=z A B))
     (=z (*z C A) (*z C B)))

stmt (zmulzeq2d () (
     (-> ph (=z A B)))
     (-> ph (=z (*z C A) (*z C B))))

stmt (zmulzeq12() () (-> (/\ (=z A B) (=z C D)) (=z (*z A C) (*z B D))))

## <title> Equality over Multiplication </title>
## <table>
##   (=z     A ] ]   ]       [ B ] ] )
##   (=z       [ [ C ]       [   [ [ D)
##   (=z (*z A ] [ C ] ) (*z [ B ] [ D))
## </table>
stmt (zmulzeq12i ()
    ((=z A B)
     (=z C D))
    (=z (*z A C) (*z B D)))

## <title> Equality over Multiplication </title>
stmt (zmulzeq12d ()
  ((-> ph (=z A B))
   (-> ph (=z C D)))
  (-> ph (=z (*z A C) (*z B D))))

## <title> Multiplication on Ordered Pairs </title>
## <suggest> right('Equivalence', '∙') </suggest>
stmt (zmulop() () (=z (*z (<,> A B) (<,> C D)) (<,> (+ (* A C) (* B D)) (+ (* A D) (* B C)))))

## <title> Integer Multiplication is a homomorphism </title>
stmt (zmulhomomorph() () (=z (*z (int A) (int B)) (<,> (* A B) (0))))

## <title> Commutative Property of Multiplication </title>
## <table> (=z (*z <r> A <g> B) (*z <g> B <r> A)) </table>
## <suggest> right('Commute', '∙') </suggest>
stmt (zmulcom () () (=z (*z A B) (*z B A)))

## <title> Multiply by 0 </title>
## <suggest> right('Simplify','0') </suggest>
stmt (zmul0() () (=z (*z A (0z)) (0z)))

## <title> Multiply by 0 </title>
## <suggest> right('Simplify','0') </suggest>
stmt (zmul0r() () (=z (*z (0z) A) (0z)))

## <title> Integer Multiplication Identity </title>
## <summary> 1 is the identity for integer multiplication. </summary>
## <suggest> right('Simplify','1') </suggest>
stmt (zmulid() () (=z (*z A (1z)) A))

## <title> Associative Property of Integer Multiplication </title>
## <suggest> right('Associate', 'R') left('Associate', 'L') </suggest>
stmt (zmulass () () (=z (*z (*z A B) C) (*z A (*z B C))))

## <title> Distributive Property </title>
## <table>
##   (=z (*z <c> A (+z B C)) (+z (*z <c> A B) (*z <c> A C)))
## </table>
## <suggest> right('Distribute', 'R') left('Distribute', '-R') </suggest>
stmt (zdistr() () (=z (*z A (+z B C)) (+z (*z A B) (*z A C))))

## <title> Distributive Property </title>
## <table>
##   (=z (*z (+z B C) <c> A ) (+z (*z B <c> A) (*z C <c> A)))
## </table>
## <suggest> right('Distribute', 'L') left('Distribute', '-L') </suggest>
stmt (zdistl () () (=z (*z (+z B C) A) (+z (*z B A) (*z C A))))

stmt (zlezeq1 () () (-> (=z A B) (<-> (<=z A C) (<=z B C))))

stmt (zlezeq2 () () (-> (=z A B) (<-> (<=z C A) (<=z C B))))

stmt (zlezeq1i () (
     (=z A B))
     (<-> (<=z A C) (<=z B C)))

stmt (zlezeq1d () (
     (-> ph (=z A B)))
     (-> ph (<-> (<=z A C) (<=z B C))))

stmt (zlezeq2i () (
     (=z A B))
     (<-> (<=z C A) (<=z C B)))

stmt (zlezeq2d () (
     (-> ph (=z A B)))
     (-> ph (<-> (<=z C A) (<=z C B))))

stmt (zltzeq1 () () (-> (=z A B) (<-> (<z A C) (<z B C))))
stmt (zltzeq2 () () (-> (=z A B) (<-> (<z C A) (<z C B))))
stmt (zltzeq1i () (
     (=z A B))
     (<-> (<z A C) (<z B C)))

stmt (zltzeq1d () (
     (-> ph (=z A B)))
     (-> ph (<-> (<z A C) (<z B C))))

stmt (zltzeq2i () (
     (=z A B))
     (<-> (<z C A) (<z C B)))

stmt (zltzeq2d () (
     (-> ph (=z A B)))
     (-> ph (<-> (<z C A) (<z C B))))

	 
## <title> Less Than Converse </title>
## <suggest> left('Commute', '>') right('Commute', '<') </suggest>
stmt (zltcon () () (<-> (<z A B) (>z B A)))

## <title> Converse of ≤ </title>
## <suggest> right('Commute', '≤') left('Commute', '≥') </suggest>
stmt (zlecon () () (<-> (<=z A B) (>=z B A)))

## <title> Squares are not negative </title>
stmt (posSquares () () (-> (-. (=z A (0z))) (zpos (*z A A))))

## <title> Definition of a Positive Integer </title>
## <suggest> left('Simplify', '+') </suggest>
stmt (df-zpos () () (<-> (zpos A) (>z A (0z))))

stmt (zposeq () () (-> (=z A B) (<-> (zpos A) (zpos B))))
stmt (zposeqi () ((=z A B)) (<-> (zpos A) (zpos B)))

stmt (zposeqd () ((-> ph (=z A B))) (-> ph (<-> (zpos A) (zpos B))))

stmt (posProduct2 () () (-> (zpos A) (<-> (zpos (*z A B)) (zpos B))))

## <title> Natural-Integer Mappings Cancel </title>
stmt (znint() () (= (zn (int A)) A))

stmt (zneq () () (-> (=z A B) (= (zn A) (zn B))))

stmt (zneqi () ((=z A B)) (= (zn A) (zn B)))

stmt (zneqd () ((-> ph (=z A B))) (-> ph (= (zn A) (zn B))))

## <title> Integer Inequality Homomorphism </title>
stmt (zlehomomorph() () (<-> (<=z (int A) (int B)) (<= A B)))

## <title> Multiplication Cancellation </title>
stmt (zmulcan() () (-> (-. (=z A (0z))) (<-> (=z (*z B A) (*z C A)) (=z B C))))

## <title> Multiplication Cancellation </title>
stmt (zmulcan0 () () (-> (-. (=z A (0z))) (<-> (=z (*z B A) (0z)) (=z B (0z)))))

## <title> Zero Product Property </title>
stmt (zeroProductz () () (-> (/\ (-. (=z A (0z))) (-. (=z B (0z)))) (-. (=z (*z A B) (0z)))))

## <title> Zero Product Property </title>
stmt (nonzeroProduct () () (-> (-. (=z A (0z))) (<-> (=z B (0z)) (=z (*z A B) (0z)))))

## <title> Zero Product Property </title>
stmt (zeroFactors () () (<-> (=z (*z A B) (0z)) (\/ (=z A (0z)) (=z B (0z)))))

stmt (productPos () () (-> (zpos (*z A B)) (<-> (zpos A) (zpos B))))

## <title> 0 is not positive </title>
stmt (0NotPos () () (-> (=z A (0z)) (-. (zpos A))))

## <title> Zero Product Property </title>
stmt (nonzeroProduct2 () () (<-> (-. (=z (*z A B) (0z))) (/\ (-. (=z A (0z))) (-. (=z B (0z))))))

## <title> Multiply Two Positive Numbers </title>
stmt (posproduct1 () () (-> (/\ (zpos A) (zpos B)) (zpos (*z A B))))

## <title> Addition on Both Sides of Inequality </title>
## <suggest> right('Cancel', '+') </suggest>
stmt (zlezadd() () (<-> (<=z (+z A C) (+z B C)) (<=z A B)))

## <title> No Natural Numbers below 0 </title>
stmt (0zle() () (<=z (0z) (int A)))

stmt (0zless1() () (<z (0z) (1z)))

## <title> Transitive Property </title>
stmt (zlezlttr() () (-> (/\ (<=z A B) (<z B C)) (<z A C)))

## <title> Transitive Property </title>
stmt (zltzletr() () (-> (/\ (<z A B) (<=z B C)) (<z A C)))

## <title> Operator Conversion </title>
## <suggest> right('Infer', '≠') </suggest>
stmt (zltneq() () (-> (<z A B) (-. (=z A B))))

## <title> Rearrange Multiplication Terms </title>
stmt (zmul4() () (=z (*z (*z A B) (*z C D)) (*z (*z A C) (*z B D))))

## <title> Rearrange Multiplication Terms </title>
stmt (zmul42() () (=z (*z (*z A B) (*z C D)) (*z (*z A D) (*z C B))))

stmt (df-int () () (=z (int A) (<,> A (0))))

stmt (inteq () () (-> (= A B) (=z (int A) (int B))))

stmt (inteqi () ((= A B)) (=z (int A) (int B)))

stmt (inteqd () ((-> ph (= A B))) (-> ph (=z (int A) (int B))))

stmt (zge0() () (<-> (<=z (0z) A) (<= (tail A) (head A))))

## <title> Invert Integer Mapping </title>
stmt (intzn() () (-> (<=z (0z) A) (=z (int (zn A)) A)))

## <title> Multiply Negated Number </title>
## <suggest> right('Equivalence', '-') left('Equivalence', '-') </suggest>
stmt (negzmul () () (=z (-n (*z A B)) (*z (-n A) B)))

## <title> Definition of Minus </title>
stmt (df-minus () () (=z (- A B) (+z A (-n B))))

## <title> 0 does not equal 1 </title>
stmt (0znotEqual1 () () (-. (=z (0z) (1z))))